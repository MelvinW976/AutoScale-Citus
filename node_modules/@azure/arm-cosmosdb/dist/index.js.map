{"version":3,"file":"index.js","sources":["../src/pagingHelper.ts","../src/models/index.ts","../src/models/mappers.ts","../src/models/parameters.ts","../src/lroImpl.ts","../src/operations/databaseAccounts.ts","../src/operations/operations.ts","../src/operations/database.ts","../src/operations/collection.ts","../src/operations/collectionRegion.ts","../src/operations/databaseAccountRegion.ts","../src/operations/percentileSourceTarget.ts","../src/operations/percentileTarget.ts","../src/operations/percentile.ts","../src/operations/collectionPartitionRegion.ts","../src/operations/collectionPartition.ts","../src/operations/partitionKeyRangeId.ts","../src/operations/partitionKeyRangeIdRegion.ts","../src/operations/sqlResources.ts","../src/operations/mongoDBResources.ts","../src/operations/tableResources.ts","../src/operations/cassandraResources.ts","../src/operations/gremlinResources.ts","../src/operations/locations.ts","../src/operations/cassandraClusters.ts","../src/operations/cassandraDataCenters.ts","../src/operations/notebookWorkspaces.ts","../src/operations/privateEndpointConnections.ts","../src/operations/privateLinkResources.ts","../src/operations/restorableDatabaseAccounts.ts","../src/operations/restorableSqlDatabases.ts","../src/operations/restorableSqlContainers.ts","../src/operations/restorableSqlResources.ts","../src/operations/restorableMongodbDatabases.ts","../src/operations/restorableMongodbCollections.ts","../src/operations/restorableMongodbResources.ts","../src/operations/restorableGremlinDatabases.ts","../src/operations/restorableGremlinGraphs.ts","../src/operations/restorableGremlinResources.ts","../src/operations/restorableTables.ts","../src/operations/restorableTableResources.ts","../src/operations/service.ts","../src/cosmosDBManagementClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport interface PageInfo {\n  continuationToken?: string;\n}\n\nconst pageMap = new WeakMap<object, PageInfo>();\n\n/**\n * Given the last `.value` produced by the `byPage` iterator,\n * returns a continuation token that can be used to begin paging from\n * that point later.\n * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.\n * @returns The continuation token that can be passed into byPage() during future calls.\n */\nexport function getContinuationToken(page: unknown): string | undefined {\n  if (typeof page !== \"object\" || page === null) {\n    return undefined;\n  }\n  return pageMap.get(page)?.continuationToken;\n}\n\nexport function setContinuationToken(\n  page: unknown,\n  continuationToken: string | undefined\n): void {\n  if (typeof page !== \"object\" || page === null || !continuationToken) {\n    return;\n  }\n  const pageInfo = pageMap.get(page) ?? {};\n  pageInfo.continuationToken = continuationToken;\n  pageMap.set(page, pageInfo);\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport type BackupPolicyUnion =\n  | BackupPolicy\n  | PeriodicModeBackupPolicy\n  | ContinuousModeBackupPolicy;\nexport type ServiceResourcePropertiesUnion =\n  | ServiceResourceProperties\n  | DataTransferServiceResourceProperties\n  | SqlDedicatedGatewayServiceResourceProperties\n  | GraphAPIComputeServiceResourceProperties\n  | MaterializedViewsBuilderServiceResourceProperties;\n\n/** Identity for the resource. */\nexport interface ManagedServiceIdentity {\n  /**\n   * The principal id of the system assigned identity. This property will only be provided for a system assigned identity.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly principalId?: string;\n  /**\n   * The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly tenantId?: string;\n  /** The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service. */\n  type?: ResourceIdentityType;\n  /** The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */\n  userAssignedIdentities?: {\n    [propertyName: string]: Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties;\n  };\n}\n\nexport interface Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties {\n  /**\n   * The principal id of user assigned identity.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly principalId?: string;\n  /**\n   * The client id of user assigned identity.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly clientId?: string;\n}\n\n/** IpAddressOrRange object */\nexport interface IpAddressOrRange {\n  /** A single IPv4 address or a single IPv4 address range in CIDR format. Provided IPs must be well-formatted and cannot be contained in one of the following ranges: 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16, since these are not enforceable by the IP address filter. Example of valid inputs: “23.40.210.245” or “23.40.210.0/8”. */\n  ipAddressOrRange?: string;\n}\n\n/** The consistency policy for the Cosmos DB database account. */\nexport interface ConsistencyPolicy {\n  /** The default consistency level and configuration settings of the Cosmos DB account. */\n  defaultConsistencyLevel: DefaultConsistencyLevel;\n  /** When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'. */\n  maxStalenessPrefix?: number;\n  /** When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'. */\n  maxIntervalInSeconds?: number;\n}\n\n/** Cosmos DB capability object */\nexport interface Capability {\n  /** Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\". */\n  name?: string;\n}\n\n/** A region in which the Azure Cosmos DB database account is deployed. */\nexport interface Location {\n  /**\n   * The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /** The name of the region. */\n  locationName?: string;\n  /**\n   * The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly documentEndpoint?: string;\n  /**\n   * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'DeletionFailed' – the Cosmos DB account deletion failed.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: string;\n  /** The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. */\n  failoverPriority?: number;\n  /** Flag to indicate whether or not this region is an AvailabilityZone region */\n  isZoneRedundant?: boolean;\n}\n\n/** The failover policy for a given region of a database account. */\nexport interface FailoverPolicy {\n  /**\n   * The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /** The name of the region in which the database account exists. */\n  locationName?: string;\n  /** The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. */\n  failoverPriority?: number;\n}\n\n/** Virtual Network ACL Rule object */\nexport interface VirtualNetworkRule {\n  /** Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}. */\n  id?: string;\n  /** Create firewall rule before the virtual network has vnet service endpoint enabled. */\n  ignoreMissingVNetServiceEndpoint?: boolean;\n}\n\n/** Private endpoint which the connection belongs to. */\nexport interface PrivateEndpointProperty {\n  /** Resource id of the private endpoint. */\n  id?: string;\n}\n\n/** Connection State of the Private Endpoint Connection. */\nexport interface PrivateLinkServiceConnectionStateProperty {\n  /** The private link service connection status. */\n  status?: string;\n  /** The private link service connection description. */\n  description?: string;\n  /**\n   * Any action that is required beyond basic workflow (approve/ reject/ disconnect)\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly actionsRequired?: string;\n}\n\n/** Common fields that are returned in the response for all Azure Resource Manager resources */\nexport interface Resource {\n  /**\n   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the resource\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n}\n\nexport interface ApiProperties {\n  /** Describes the ServerVersion of an a MongoDB account. */\n  serverVersion?: ServerVersion;\n}\n\n/** Analytical storage specific properties. */\nexport interface AnalyticalStorageConfiguration {\n  /** Describes the types of schema for analytical storage. */\n  schemaType?: AnalyticalStorageSchemaType;\n}\n\n/** Parameters to indicate the information about the restore. */\nexport interface RestoreParameters {\n  /** Describes the mode of the restore. */\n  restoreMode?: RestoreMode;\n  /** The id of the restorable database account from which the restore has to be initiated. For example: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName} */\n  restoreSource?: string;\n  /** Time to which the account has to be restored (ISO-8601 format). */\n  restoreTimestampInUtc?: Date;\n  /** List of specific databases available for restore. */\n  databasesToRestore?: DatabaseRestoreResource[];\n  /** List of specific gremlin databases available for restore. */\n  gremlinDatabasesToRestore?: GremlinDatabaseRestoreResource[];\n  /** List of specific tables available for restore. */\n  tablesToRestore?: string[];\n}\n\n/** Specific Databases to restore. */\nexport interface DatabaseRestoreResource {\n  /** The name of the database available for restore. */\n  databaseName?: string;\n  /** The names of the collections available for restore. */\n  collectionNames?: string[];\n}\n\n/** Specific Gremlin Databases to restore. */\nexport interface GremlinDatabaseRestoreResource {\n  /** The name of the gremlin database available for restore. */\n  databaseName?: string;\n  /** The names of the graphs available for restore. */\n  graphNames?: string[];\n}\n\n/** The object representing the policy for taking backups on an account. */\nexport interface BackupPolicy {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"Periodic\" | \"Continuous\";\n  /** The object representing the state of the migration between the backup policies. */\n  migrationState?: BackupPolicyMigrationState;\n}\n\n/** The object representing the state of the migration between the backup policies. */\nexport interface BackupPolicyMigrationState {\n  /** Describes the status of migration between backup policy types. */\n  status?: BackupPolicyMigrationStatus;\n  /** Describes the target backup policy type of the backup policy migration. */\n  targetType?: BackupPolicyType;\n  /** Time at which the backup policy migration started (ISO-8601 format). */\n  startTime?: Date;\n}\n\n/** The CORS policy for the Cosmos DB database account. */\nexport interface CorsPolicy {\n  /** The origin domains that are permitted to make a request against the service via CORS. */\n  allowedOrigins: string;\n  /** The methods (HTTP request verbs) that the origin domain may use for a CORS request. */\n  allowedMethods?: string;\n  /** The request headers that the origin domain may specify on the CORS request. */\n  allowedHeaders?: string;\n  /** The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer. */\n  exposedHeaders?: string;\n  /** The maximum amount time that a browser should cache the preflight OPTIONS request. */\n  maxAgeInSeconds?: number;\n}\n\n/** The object that represents all properties related to capacity enforcement on an account. */\nexport interface Capacity {\n  /** The total throughput limit imposed on the account. A totalThroughputLimit of 2000 imposes a strict limit of max throughput that can be provisioned on that account to be 2000. A totalThroughputLimit of -1 indicates no limits on provisioning of throughput. */\n  totalThroughputLimit?: number;\n}\n\n/** The metadata related to each access key for the given Cosmos DB database account. */\nexport interface DatabaseAccountKeysMetadata {\n  /**\n   * The metadata related to the Primary Read-Write Key for the given Cosmos DB database account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly primaryMasterKey?: AccountKeyMetadata;\n  /**\n   * The metadata related to the Secondary Read-Write Key for the given Cosmos DB database account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly secondaryMasterKey?: AccountKeyMetadata;\n  /**\n   * The metadata related to the Primary Read-Only Key for the given Cosmos DB database account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly primaryReadonlyMasterKey?: AccountKeyMetadata;\n  /**\n   * The metadata related to the Secondary Read-Only Key for the given Cosmos DB database account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly secondaryReadonlyMasterKey?: AccountKeyMetadata;\n}\n\n/** The metadata related to an access key for a given database account. */\nexport interface AccountKeyMetadata {\n  /**\n   * Generation time in UTC of the key in ISO-8601 format. If the value is missing from the object, it means that the last key regeneration was triggered before 2022-06-18.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly generationTime?: Date;\n}\n\n/** Metadata pertaining to creation and last modification of the resource. */\nexport interface SystemData {\n  /** The identity that created the resource. */\n  createdBy?: string;\n  /** The type of identity that created the resource. */\n  createdByType?: CreatedByType;\n  /** The timestamp of resource creation (UTC). */\n  createdAt?: Date;\n  /** The identity that last modified the resource. */\n  lastModifiedBy?: string;\n  /** The type of identity that last modified the resource. */\n  lastModifiedByType?: CreatedByType;\n  /** The timestamp of resource last modification (UTC) */\n  lastModifiedAt?: Date;\n}\n\n/** The core properties of ARM resources. */\nexport interface ARMResourceProperties {\n  /**\n   * The unique resource identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The location of the resource group to which the resource belongs. */\n  location?: string;\n  /** Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\". */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Parameters for patching Azure Cosmos DB database account properties. */\nexport interface DatabaseAccountUpdateParameters {\n  /** Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\". */\n  tags?: { [propertyName: string]: string };\n  /** The location of the resource group to which the resource belongs. */\n  location?: string;\n  /** Identity for the resource. */\n  identity?: ManagedServiceIdentity;\n  /** The consistency policy for the Cosmos DB account. */\n  consistencyPolicy?: ConsistencyPolicy;\n  /** An array that contains the georeplication locations enabled for the Cosmos DB account. */\n  locations?: Location[];\n  /** List of IpRules. */\n  ipRules?: IpAddressOrRange[];\n  /** Flag to indicate whether to enable/disable Virtual Network ACL rules. */\n  isVirtualNetworkFilterEnabled?: boolean;\n  /** Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account. */\n  enableAutomaticFailover?: boolean;\n  /** List of Cosmos DB capabilities for the account */\n  capabilities?: Capability[];\n  /** List of Virtual Network ACL rules configured for the Cosmos DB account. */\n  virtualNetworkRules?: VirtualNetworkRule[];\n  /** Enables the account to write in multiple locations */\n  enableMultipleWriteLocations?: boolean;\n  /** Enables the cassandra connector on the Cosmos DB C* account */\n  enableCassandraConnector?: boolean;\n  /** The cassandra connector offer type for the Cosmos DB database C* account. */\n  connectorOffer?: ConnectorOffer;\n  /** Disable write operations on metadata resources (databases, containers, throughput) via account keys */\n  disableKeyBasedMetadataWriteAccess?: boolean;\n  /** The URI of the key vault */\n  keyVaultKeyUri?: string;\n  /** The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be \"FirstPartyIdentity\", \"SystemAssignedIdentity\" and more. */\n  defaultIdentity?: string;\n  /** Whether requests from Public Network are allowed */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** Flag to indicate whether Free Tier is enabled. */\n  enableFreeTier?: boolean;\n  /** API specific properties. Currently, supported only for MongoDB API. */\n  apiProperties?: ApiProperties;\n  /** Flag to indicate whether to enable storage analytics. */\n  enableAnalyticalStorage?: boolean;\n  /** Analytical storage specific properties. */\n  analyticalStorageConfiguration?: AnalyticalStorageConfiguration;\n  /** The object representing the policy for taking backups on an account. */\n  backupPolicy?: BackupPolicyUnion;\n  /** The CORS policy for the Cosmos DB database account. */\n  cors?: CorsPolicy[];\n  /** Indicates what services are allowed to bypass firewall checks. */\n  networkAclBypass?: NetworkAclBypass;\n  /** An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account. */\n  networkAclBypassResourceIds?: string[];\n  /** Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. */\n  disableLocalAuth?: boolean;\n  /** The object that represents all properties related to capacity enforcement on an account. */\n  capacity?: Capacity;\n  /**\n   * This property is ignored during the update operation, as the metadata is read-only. The object represents the metadata for the Account Keys of the Cosmos DB account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly keysMetadata?: DatabaseAccountKeysMetadata;\n  /** Flag to indicate enabling/disabling of Partition Merge feature on the account */\n  enablePartitionMerge?: boolean;\n  /** Indicates the minimum allowed Tls version. The default is Tls 1.0, except for Cassandra and Mongo API's, which only work with Tls 1.2. */\n  minimalTlsVersion?: MinimalTlsVersion;\n}\n\n/** The list of new failover policies for the failover priority change. */\nexport interface FailoverPolicies {\n  /** List of failover policies. */\n  failoverPolicies: FailoverPolicy[];\n}\n\n/** The List operation response, that contains the database accounts and their properties. */\nexport interface DatabaseAccountsListResult {\n  /**\n   * List of database account and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: DatabaseAccountGetResults[];\n}\n\n/** The read-only access keys for the given database account. */\nexport interface DatabaseAccountListReadOnlyKeysResult {\n  /**\n   * Base 64 encoded value of the primary read-only key.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly primaryReadonlyMasterKey?: string;\n  /**\n   * Base 64 encoded value of the secondary read-only key.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly secondaryReadonlyMasterKey?: string;\n}\n\n/** The connection strings for the given database account. */\nexport interface DatabaseAccountListConnectionStringsResult {\n  /** An array that contains the connection strings for the Cosmos DB account. */\n  connectionStrings?: DatabaseAccountConnectionString[];\n}\n\n/** Connection string for the Cosmos DB account */\nexport interface DatabaseAccountConnectionString {\n  /**\n   * Value of the connection string\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly connectionString?: string;\n  /**\n   * Description of the connection string\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly description?: string;\n}\n\n/** Cosmos DB region to online or offline. */\nexport interface RegionForOnlineOffline {\n  /** Cosmos DB region, with spaces between words and each word capitalized. */\n  region: string;\n}\n\n/** Error Response. */\nexport interface ErrorResponse {\n  /** Error code. */\n  code?: string;\n  /** Error message indicating why the operation failed. */\n  message?: string;\n}\n\n/** Parameters to regenerate the keys within the database account. */\nexport interface DatabaseAccountRegenerateKeyParameters {\n  /** The access key to regenerate. */\n  keyKind: KeyKind;\n}\n\n/** Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set of results. */\nexport interface OperationListResult {\n  /** List of operations supported by the Resource Provider. */\n  value?: Operation[];\n  /** URL to get the next set of operation list results if there are any. */\n  nextLink?: string;\n}\n\n/** REST API operation */\nexport interface Operation {\n  /** Operation name: {provider}/{resource}/{operation} */\n  name?: string;\n  /** The object that represents the operation. */\n  display?: OperationDisplay;\n}\n\n/** The object that represents the operation. */\nexport interface OperationDisplay {\n  /** Service provider: Microsoft.ResourceProvider */\n  provider?: string;\n  /** Resource on which the operation is performed: Profile, endpoint, etc. */\n  resource?: string;\n  /** Operation type: Read, write, delete, etc. */\n  operation?: string;\n  /** Description of operation */\n  description?: string;\n}\n\n/** The response to a list metrics request. */\nexport interface MetricListResult {\n  /**\n   * The list of metrics for the account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: Metric[];\n}\n\n/** Metric data */\nexport interface Metric {\n  /**\n   * The start time for the metric (ISO-8601 format).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly startTime?: Date;\n  /**\n   * The end time for the metric (ISO-8601 format).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly endTime?: Date;\n  /**\n   * The time grain to be used to summarize the metric values.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly timeGrain?: string;\n  /**\n   * The unit of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly unit?: UnitType;\n  /**\n   * The name information for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: MetricName;\n  /**\n   * The metric values for the specified time window and timestep.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly metricValues?: MetricValue[];\n}\n\n/** A metric name. */\nexport interface MetricName {\n  /**\n   * The name of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: string;\n  /**\n   * The friendly name of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly localizedValue?: string;\n}\n\n/** Represents metrics values. */\nexport interface MetricValue {\n  /**\n   * The number of values for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly count?: number;\n  /**\n   * The average value of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly average?: number;\n  /**\n   * The max value of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly maximum?: number;\n  /**\n   * The min value of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly minimum?: number;\n  /**\n   * The metric timestamp (ISO-8601 format).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly timestamp?: Date;\n  /**\n   * The total value of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly total?: number;\n}\n\n/** The response to a list percentile metrics request. */\nexport interface PercentileMetricListResult {\n  /**\n   * The list of percentile metrics for the account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: PercentileMetric[];\n}\n\n/** Percentile Metric data */\nexport interface PercentileMetric {\n  /**\n   * The start time for the metric (ISO-8601 format).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly startTime?: Date;\n  /**\n   * The end time for the metric (ISO-8601 format).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly endTime?: Date;\n  /**\n   * The time grain to be used to summarize the metric values.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly timeGrain?: string;\n  /**\n   * The unit of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly unit?: UnitType;\n  /**\n   * The name information for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: MetricName;\n  /**\n   * The percentile metric values for the specified time window and timestep.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly metricValues?: PercentileMetricValue[];\n}\n\n/** The response to a list partition metrics request. */\nexport interface PartitionMetricListResult {\n  /**\n   * The list of partition-level metrics for the account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: PartitionMetric[];\n}\n\n/** The response to a list usage request. */\nexport interface UsagesResult {\n  /**\n   * The list of usages for the database. A usage is a point in time metric\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: Usage[];\n}\n\n/** The usage data for a usage request. */\nexport interface Usage {\n  /**\n   * The unit of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly unit?: UnitType;\n  /**\n   * The name information for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: MetricName;\n  /**\n   * The quota period used to summarize the usage values.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly quotaPeriod?: string;\n  /**\n   * Maximum value for this metric\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly limit?: number;\n  /**\n   * Current value for this metric\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly currentValue?: number;\n}\n\n/** The response to a list partition level usage request. */\nexport interface PartitionUsagesResult {\n  /**\n   * The list of partition-level usages for the database. A usage is a point in time metric\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: PartitionUsage[];\n}\n\n/** The response to a list metric definitions request. */\nexport interface MetricDefinitionsListResult {\n  /**\n   * The list of metric definitions for the account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: MetricDefinition[];\n}\n\n/** The definition of a metric. */\nexport interface MetricDefinition {\n  /**\n   * The list of metric availabilities for the account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly metricAvailabilities?: MetricAvailability[];\n  /**\n   * The primary aggregation type of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly primaryAggregationType?: PrimaryAggregationType;\n  /**\n   * The unit of the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly unit?: UnitType;\n  /**\n   * The resource uri of the database.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly resourceUri?: string;\n  /**\n   * The name information for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: MetricName;\n}\n\n/** The availability of the metric. */\nexport interface MetricAvailability {\n  /**\n   * The time grain to be used to summarize the metric values.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly timeGrain?: string;\n  /**\n   * The retention for the metric values.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly retention?: string;\n}\n\n/** The List operation response, that contains the SQL databases and their properties. */\nexport interface SqlDatabaseListResult {\n  /**\n   * List of SQL databases and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: SqlDatabaseGetResults[];\n}\n\n/** Cosmos DB SQL database resource object */\nexport interface SqlDatabaseResource {\n  /** Name of the Cosmos DB SQL database */\n  id: string;\n}\n\n/** The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs. */\nexport interface ExtendedResourceProperties {\n  /**\n   * A system generated property. A unique identifier.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly rid?: string;\n  /**\n   * A system generated property that denotes the last updated timestamp of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ts?: number;\n  /**\n   * A system generated property representing the resource etag required for optimistic concurrency control.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly etag?: string;\n}\n\n/** Cosmos DB options resource object */\nexport interface OptionsResource {\n  /** Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. */\n  throughput?: number;\n  /** Specifies the Autoscale settings. */\n  autoscaleSettings?: AutoscaleSettings;\n}\n\nexport interface AutoscaleSettings {\n  /** Represents maximum throughput, the resource can scale up to. */\n  maxThroughput?: number;\n}\n\n/** CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\" */\nexport interface CreateUpdateOptions {\n  /** Request Units per second. For example, \"throughput\": 10000. */\n  throughput?: number;\n  /** Specifies the Autoscale settings. */\n  autoscaleSettings?: AutoscaleSettings;\n}\n\n/** Cosmos DB resource throughput object. Either throughput is required or autoscaleSettings is required, but not both. */\nexport interface ThroughputSettingsResource {\n  /** Value of the Cosmos DB resource throughput. Either throughput is required or autoscaleSettings is required, but not both. */\n  throughput?: number;\n  /** Cosmos DB resource for autoscale settings. Either throughput is required or autoscaleSettings is required, but not both. */\n  autoscaleSettings?: AutoscaleSettingsResource;\n  /**\n   * The minimum throughput of the resource\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly minimumThroughput?: string;\n  /**\n   * The throughput replace is pending\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly offerReplacePending?: string;\n}\n\n/** Cosmos DB provisioned throughput settings object */\nexport interface AutoscaleSettingsResource {\n  /** Represents maximum throughput container can scale up to. */\n  maxThroughput: number;\n  /** Cosmos DB resource auto-upgrade policy */\n  autoUpgradePolicy?: AutoUpgradePolicyResource;\n  /**\n   * Represents target maximum throughput container can scale up to once offer is no longer in pending state.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly targetMaxThroughput?: number;\n}\n\n/** Cosmos DB resource auto-upgrade policy */\nexport interface AutoUpgradePolicyResource {\n  /** Represents throughput policy which service must adhere to for auto-upgrade */\n  throughputPolicy?: ThroughputPolicyResource;\n}\n\n/** Cosmos DB resource throughput policy */\nexport interface ThroughputPolicyResource {\n  /** Determines whether the ThroughputPolicy is active or not */\n  isEnabled?: boolean;\n  /** Represents the percentage by which throughput can increase every time throughput policy kicks in. */\n  incrementPercent?: number;\n}\n\n/** An error response from the service. */\nexport interface CloudError {\n  /** Error Response. */\n  error?: ErrorResponse;\n}\n\n/** The List operation response, that contains the containers and their properties. */\nexport interface SqlContainerListResult {\n  /**\n   * List of containers and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: SqlContainerGetResults[];\n}\n\n/** Cosmos DB SQL container resource object */\nexport interface SqlContainerResource {\n  /** Name of the Cosmos DB SQL container */\n  id: string;\n  /** The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container */\n  indexingPolicy?: IndexingPolicy;\n  /** The configuration of the partition key to be used for partitioning data into multiple partitions */\n  partitionKey?: ContainerPartitionKey;\n  /** Default time to live */\n  defaultTtl?: number;\n  /** The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. */\n  uniqueKeyPolicy?: UniqueKeyPolicy;\n  /** The conflict resolution policy for the container. */\n  conflictResolutionPolicy?: ConflictResolutionPolicy;\n  /** The client encryption policy for the container. */\n  clientEncryptionPolicy?: ClientEncryptionPolicy;\n  /** Analytical TTL. */\n  analyticalStorageTtl?: number;\n}\n\n/** Cosmos DB indexing policy */\nexport interface IndexingPolicy {\n  /** Indicates if the indexing policy is automatic */\n  automatic?: boolean;\n  /** Indicates the indexing mode. */\n  indexingMode?: IndexingMode;\n  /** List of paths to include in the indexing */\n  includedPaths?: IncludedPath[];\n  /** List of paths to exclude from indexing */\n  excludedPaths?: ExcludedPath[];\n  /** List of composite path list */\n  compositeIndexes?: CompositePath[][];\n  /** List of spatial specifics */\n  spatialIndexes?: SpatialSpec[];\n}\n\n/** The paths that are included in indexing */\nexport interface IncludedPath {\n  /** The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*) */\n  path?: string;\n  /** List of indexes for this path */\n  indexes?: Indexes[];\n}\n\n/** The indexes for the path. */\nexport interface Indexes {\n  /** The datatype for which the indexing behavior is applied to. */\n  dataType?: DataType;\n  /** The precision of the index. -1 is maximum precision. */\n  precision?: number;\n  /** Indicates the type of index. */\n  kind?: IndexKind;\n}\n\nexport interface ExcludedPath {\n  /** The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*) */\n  path?: string;\n}\n\nexport interface CompositePath {\n  /** The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*) */\n  path?: string;\n  /** Sort order for composite paths. */\n  order?: CompositePathSortOrder;\n}\n\nexport interface SpatialSpec {\n  /** The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*) */\n  path?: string;\n  /** List of path's spatial type */\n  types?: SpatialType[];\n}\n\n/** The configuration of the partition key to be used for partitioning data into multiple partitions */\nexport interface ContainerPartitionKey {\n  /** List of paths using which data within the container can be partitioned */\n  paths?: string[];\n  /** Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create */\n  kind?: PartitionKind;\n  /** Indicates the version of the partition key definition */\n  version?: number;\n  /**\n   * Indicates if the container is using a system generated partition key\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemKey?: boolean;\n}\n\n/** The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. */\nexport interface UniqueKeyPolicy {\n  /** List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service. */\n  uniqueKeys?: UniqueKey[];\n}\n\n/** The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service. */\nexport interface UniqueKey {\n  /** List of paths must be unique for each document in the Azure Cosmos DB service */\n  paths?: string[];\n}\n\n/** The conflict resolution policy for the container. */\nexport interface ConflictResolutionPolicy {\n  /** Indicates the conflict resolution mode. */\n  mode?: ConflictResolutionMode;\n  /** The conflict resolution path in the case of LastWriterWins mode. */\n  conflictResolutionPath?: string;\n  /** The procedure to resolve conflicts in the case of custom mode. */\n  conflictResolutionProcedure?: string;\n}\n\n/** Cosmos DB client encryption policy. */\nexport interface ClientEncryptionPolicy {\n  /** Paths of the item that need encryption along with path-specific settings. */\n  includedPaths: ClientEncryptionIncludedPath[];\n  /** Version of the client encryption policy definition. Supported versions are 1 and 2. Version 2 supports id and partition key path encryption. */\n  policyFormatVersion: number;\n}\n\n/** . */\nexport interface ClientEncryptionIncludedPath {\n  /** Path that needs to be encrypted. */\n  path: string;\n  /** The identifier of the Client Encryption Key to be used to encrypt the path. */\n  clientEncryptionKeyId: string;\n  /** The type of encryption to be performed. Eg - Deterministic, Randomized. */\n  encryptionType: string;\n  /** The encryption algorithm which will be used. Eg - AEAD_AES_256_CBC_HMAC_SHA256. */\n  encryptionAlgorithm: string;\n}\n\n/** The List operation response, that contains the client encryption keys and their properties. */\nexport interface ClientEncryptionKeysListResult {\n  /**\n   * List of client encryption keys and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: ClientEncryptionKeyGetResults[];\n}\n\n/** Cosmos DB client encryption key resource object. */\nexport interface ClientEncryptionKeyResource {\n  /** Name of the ClientEncryptionKey */\n  id?: string;\n  /** Encryption algorithm that will be used along with this client encryption key to encrypt/decrypt data. */\n  encryptionAlgorithm?: string;\n  /** Wrapped (encrypted) form of the key represented as a byte array. */\n  wrappedDataEncryptionKey?: Uint8Array;\n  /** Metadata for the wrapping provider that can be used to unwrap the wrapped client encryption key. */\n  keyWrapMetadata?: KeyWrapMetadata;\n}\n\n/** Represents key wrap metadata that a key wrapping provider can use to wrap/unwrap a client encryption key. */\nexport interface KeyWrapMetadata {\n  /** The name of associated KeyEncryptionKey (aka CustomerManagedKey). */\n  name?: string;\n  /** ProviderName of KeyStoreProvider. */\n  type?: string;\n  /** Reference / link to the KeyEncryptionKey. */\n  value?: string;\n  /** Algorithm used in wrapping and unwrapping of the data encryption key. */\n  algorithm?: string;\n}\n\n/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags */\nexport interface ARMProxyResource {\n  /**\n   * The unique resource identifier of the database account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the database account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n}\n\n/** Parameters to create and update ClientEncryptionKey. */\nexport interface ClientEncryptionKeyCreateUpdateParameters {\n  /** The standard JSON format of a ClientEncryptionKey */\n  resource: ClientEncryptionKeyResource;\n}\n\n/** The List operation response, that contains the storedProcedures and their properties. */\nexport interface SqlStoredProcedureListResult {\n  /**\n   * List of storedProcedures and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: SqlStoredProcedureGetResults[];\n}\n\n/** Cosmos DB SQL storedProcedure resource object */\nexport interface SqlStoredProcedureResource {\n  /** Name of the Cosmos DB SQL storedProcedure */\n  id: string;\n  /** Body of the Stored Procedure */\n  body?: string;\n}\n\n/** The List operation response, that contains the userDefinedFunctions and their properties. */\nexport interface SqlUserDefinedFunctionListResult {\n  /**\n   * List of userDefinedFunctions and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: SqlUserDefinedFunctionGetResults[];\n}\n\n/** Cosmos DB SQL userDefinedFunction resource object */\nexport interface SqlUserDefinedFunctionResource {\n  /** Name of the Cosmos DB SQL userDefinedFunction */\n  id: string;\n  /** Body of the User Defined Function */\n  body?: string;\n}\n\n/** The List operation response, that contains the triggers and their properties. */\nexport interface SqlTriggerListResult {\n  /**\n   * List of triggers and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: SqlTriggerGetResults[];\n}\n\n/** Cosmos DB SQL trigger resource object */\nexport interface SqlTriggerResource {\n  /** Name of the Cosmos DB SQL trigger */\n  id: string;\n  /** Body of the Trigger */\n  body?: string;\n  /** Type of the Trigger */\n  triggerType?: TriggerType;\n  /** The operation the trigger is associated with */\n  triggerOperation?: TriggerOperation;\n}\n\n/** The List operation response, that contains the MongoDB databases and their properties. */\nexport interface MongoDBDatabaseListResult {\n  /**\n   * List of MongoDB databases and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: MongoDBDatabaseGetResults[];\n}\n\n/** Cosmos DB MongoDB database resource object */\nexport interface MongoDBDatabaseResource {\n  /** Name of the Cosmos DB MongoDB database */\n  id: string;\n}\n\n/** The List operation response, that contains the MongoDB collections and their properties. */\nexport interface MongoDBCollectionListResult {\n  /**\n   * List of MongoDB collections and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: MongoDBCollectionGetResults[];\n}\n\n/** Cosmos DB MongoDB collection resource object */\nexport interface MongoDBCollectionResource {\n  /** Name of the Cosmos DB MongoDB collection */\n  id: string;\n  /** A key-value pair of shard keys to be applied for the request. */\n  shardKey?: { [propertyName: string]: string };\n  /** List of index keys */\n  indexes?: MongoIndex[];\n  /** Analytical TTL. */\n  analyticalStorageTtl?: number;\n}\n\n/** Cosmos DB MongoDB collection index key */\nexport interface MongoIndex {\n  /** Cosmos DB MongoDB collection index keys */\n  key?: MongoIndexKeys;\n  /** Cosmos DB MongoDB collection index key options */\n  options?: MongoIndexOptions;\n}\n\n/** Cosmos DB MongoDB collection resource object */\nexport interface MongoIndexKeys {\n  /** List of keys for each MongoDB collection in the Azure Cosmos DB service */\n  keys?: string[];\n}\n\n/** Cosmos DB MongoDB collection index options */\nexport interface MongoIndexOptions {\n  /** Expire after seconds */\n  expireAfterSeconds?: number;\n  /** Is unique or not */\n  unique?: boolean;\n}\n\n/** The List operation response, that contains the Table and their properties. */\nexport interface TableListResult {\n  /**\n   * List of Table and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: TableGetResults[];\n}\n\n/** Cosmos DB table resource object */\nexport interface TableResource {\n  /** Name of the Cosmos DB table */\n  id: string;\n}\n\n/** The List operation response, that contains the Cassandra keyspaces and their properties. */\nexport interface CassandraKeyspaceListResult {\n  /**\n   * List of Cassandra keyspaces and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: CassandraKeyspaceGetResults[];\n}\n\n/** Cosmos DB Cassandra keyspace resource object */\nexport interface CassandraKeyspaceResource {\n  /** Name of the Cosmos DB Cassandra keyspace */\n  id: string;\n}\n\n/** The List operation response, that contains the Cassandra tables and their properties. */\nexport interface CassandraTableListResult {\n  /**\n   * List of Cassandra tables and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: CassandraTableGetResults[];\n}\n\n/** Cosmos DB Cassandra table resource object */\nexport interface CassandraTableResource {\n  /** Name of the Cosmos DB Cassandra table */\n  id: string;\n  /** Time to live of the Cosmos DB Cassandra table */\n  defaultTtl?: number;\n  /** Schema of the Cosmos DB Cassandra table */\n  schema?: CassandraSchema;\n  /** Analytical TTL. */\n  analyticalStorageTtl?: number;\n}\n\n/** Cosmos DB Cassandra table schema */\nexport interface CassandraSchema {\n  /** List of Cassandra table columns. */\n  columns?: Column[];\n  /** List of partition key. */\n  partitionKeys?: CassandraPartitionKey[];\n  /** List of cluster key. */\n  clusterKeys?: ClusterKey[];\n}\n\n/** Cosmos DB Cassandra table column */\nexport interface Column {\n  /** Name of the Cosmos DB Cassandra table column */\n  name?: string;\n  /** Type of the Cosmos DB Cassandra table column */\n  type?: string;\n}\n\n/** Cosmos DB Cassandra table partition key */\nexport interface CassandraPartitionKey {\n  /** Name of the Cosmos DB Cassandra table partition key */\n  name?: string;\n}\n\n/** Cosmos DB Cassandra table cluster key */\nexport interface ClusterKey {\n  /** Name of the Cosmos DB Cassandra table cluster key */\n  name?: string;\n  /** Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\" */\n  orderBy?: string;\n}\n\n/** The List operation response, that contains the Gremlin databases and their properties. */\nexport interface GremlinDatabaseListResult {\n  /**\n   * List of Gremlin databases and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: GremlinDatabaseGetResults[];\n}\n\n/** Cosmos DB Gremlin database resource object */\nexport interface GremlinDatabaseResource {\n  /** Name of the Cosmos DB Gremlin database */\n  id: string;\n}\n\n/** The List operation response, that contains the graphs and their properties. */\nexport interface GremlinGraphListResult {\n  /**\n   * List of graphs and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: GremlinGraphGetResults[];\n}\n\n/** Cosmos DB Gremlin graph resource object */\nexport interface GremlinGraphResource {\n  /** Name of the Cosmos DB Gremlin graph */\n  id: string;\n  /** The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph */\n  indexingPolicy?: IndexingPolicy;\n  /** The configuration of the partition key to be used for partitioning data into multiple partitions */\n  partitionKey?: ContainerPartitionKey;\n  /** Default time to live */\n  defaultTtl?: number;\n  /** The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. */\n  uniqueKeyPolicy?: UniqueKeyPolicy;\n  /** The conflict resolution policy for the graph. */\n  conflictResolutionPolicy?: ConflictResolutionPolicy;\n  /** Analytical TTL. */\n  analyticalStorageTtl?: number;\n}\n\n/** The List operation response, that contains Cosmos DB locations and their properties. */\nexport interface LocationListResult {\n  /**\n   * List of Cosmos DB locations and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: LocationGetResult[];\n}\n\n/** Cosmos DB location metadata */\nexport interface LocationProperties {\n  /**\n   * Flag indicating whether the location supports availability zones or not.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly supportsAvailabilityZone?: boolean;\n  /**\n   * Flag indicating whether the location is residency sensitive.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly isResidencyRestricted?: boolean;\n  /**\n   * The properties of available backup storage redundancies.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly backupStorageRedundancies?: BackupStorageRedundancy[];\n}\n\n/** List of managed Cassandra clusters. */\nexport interface ListClusters {\n  /** Container for the array of clusters. */\n  value?: ClusterResource[];\n}\n\n/** Properties of a managed Cassandra cluster. */\nexport interface ClusterResourceProperties {\n  /** The status of the resource at the time the operation was called. */\n  provisioningState?: ManagedCassandraProvisioningState;\n  /** To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup. */\n  restoreFromBackupId?: string;\n  /** Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>' */\n  delegatedManagementSubnetId?: string;\n  /** Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version. */\n  cassandraVersion?: string;\n  /** If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property. */\n  clusterNameOverride?: string;\n  /** Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'. */\n  authenticationMethod?: AuthenticationMethod;\n  /** Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is 'Cassandra'. */\n  initialCassandraAdminPassword?: string;\n  /** Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached. */\n  prometheusEndpoint?: SeedNode;\n  /** Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs. */\n  repairEnabled?: boolean;\n  /** List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property. */\n  clientCertificates?: Certificate[];\n  /** List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property. */\n  externalGossipCertificates?: Certificate[];\n  /**\n   * List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present TLS client certificates that are verifiable using one of the certificates provided in this property.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly gossipCertificates?: Certificate[];\n  /** List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes. */\n  externalSeedNodes?: SeedNode[];\n  /**\n   * List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged nodes.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly seedNodes?: SeedNode[];\n  /** Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0. */\n  hoursBetweenBackups?: number;\n  /** Whether the cluster and associated data centers has been deallocated. */\n  deallocated?: boolean;\n  /** Whether Cassandra audit logging is enabled */\n  cassandraAuditLoggingEnabled?: boolean;\n}\n\nexport interface SeedNode {\n  /** IP address of this seed node. */\n  ipAddress?: string;\n}\n\nexport interface Certificate {\n  /** PEM formatted public key. */\n  pem?: string;\n}\n\n/** The core properties of ARM resources. */\nexport interface ManagedCassandraARMResourceProperties {\n  /**\n   * The unique resource identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The location of the resource group to which the resource belongs. */\n  location?: string;\n  /** Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\". */\n  tags?: { [propertyName: string]: string };\n  /** Identity for the resource. */\n  identity?: ManagedCassandraManagedServiceIdentity;\n}\n\n/** Identity for the resource. */\nexport interface ManagedCassandraManagedServiceIdentity {\n  /**\n   * The object id of the identity resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly principalId?: string;\n  /**\n   * The tenant id of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly tenantId?: string;\n  /** The type of the resource. */\n  type?: ManagedCassandraResourceIdentityType;\n}\n\n/** Specification of which command to run where */\nexport interface CommandPostBody {\n  /** The command which should be run */\n  command: string;\n  /** The arguments for the command to be run */\n  arguments?: { [propertyName: string]: string };\n  /** IP address of the cassandra host to run the command on */\n  host: string;\n  /** If true, stops cassandra before executing the command and then start it again */\n  cassandraStopStart?: boolean;\n  /** If true, allows the command to *write* to the cassandra directory, otherwise read-only. */\n  readwrite?: boolean;\n}\n\n/** Response of /command api */\nexport interface CommandOutput {\n  /** Output of the command. */\n  commandOutput?: string;\n}\n\n/** List of managed Cassandra data centers and their properties. */\nexport interface ListDataCenters {\n  /**\n   * Container for array of data centers.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: DataCenterResource[];\n}\n\n/** Properties of a managed Cassandra data center. */\nexport interface DataCenterResourceProperties {\n  /** The status of the resource at the time the operation was called. */\n  provisioningState?: ManagedCassandraProvisioningState;\n  /** The region this data center should be created in. */\n  dataCenterLocation?: string;\n  /** Resource id of a subnet the nodes in this data center should have their network interfaces connected to. The subnet must be in the same region specified in 'dataCenterLocation' and must be able to route to the subnet specified in the cluster's 'delegatedManagementSubnetId' property. This resource id will be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'. */\n  delegatedSubnetId?: string;\n  /** The number of nodes the data center should have. This is the desired number. After it is set, it may take some time for the data center to be scaled to match. To monitor the number of nodes and their status, use the fetchNodeStatus method on the cluster. */\n  nodeCount?: number;\n  /**\n   * IP addresses for seed nodes in this data center. This is for reference. Generally you will want to use the seedNodes property on the cluster, which aggregates the seed nodes from all data centers in the cluster.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly seedNodes?: SeedNode[];\n  /** A fragment of a cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this data center. The fragment should be Base64 encoded, and only a subset of keys are allowed. */\n  base64EncodedCassandraYamlFragment?: string;\n  /** Key uri to use for encryption of managed disks. Ensure the system assigned identity of the cluster has been assigned appropriate permissions(key get/wrap/unwrap permissions) on the key. */\n  managedDiskCustomerKeyUri?: string;\n  /** Indicates the Key Uri of the customer key to use for encryption of the backup storage account. */\n  backupStorageCustomerKeyUri?: string;\n  /** Virtual Machine SKU used for data centers. Default value is Standard_DS14_v2 */\n  sku?: string;\n  /** Disk SKU used for data centers. Default value is P30. */\n  diskSku?: string;\n  /** Number of disk used for data centers. Default value is 4. */\n  diskCapacity?: number;\n  /** If the azure data center has Availability Zone support, apply it to the Virtual Machine ScaleSet that host the cassandra data center virtual machines. */\n  availabilityZone?: boolean;\n}\n\n/** Properties of a managed Cassandra cluster public status. */\nexport interface CassandraClusterPublicStatus {\n  eTag?: string;\n  reaperStatus?: ManagedCassandraReaperStatus;\n  /** List relevant information about any connection errors to the Datacenters. */\n  connectionErrors?: ConnectionError[];\n  /** List of the status of each datacenter in this cluster. */\n  dataCenters?: CassandraClusterPublicStatusDataCentersItem[];\n}\n\nexport interface ManagedCassandraReaperStatus {\n  healthy?: boolean;\n  /** Dictionary of <string> */\n  repairRunIds?: { [propertyName: string]: string };\n  /** Dictionary of <string> */\n  repairSchedules?: { [propertyName: string]: string };\n}\n\nexport interface ConnectionError {\n  /** The kind of connection error that occurred. */\n  connectionState?: ConnectionState;\n  /** The IP of host that originated the failed connection. */\n  iPFrom?: string;\n  /** The IP that the connection attempted to reach. */\n  iPTo?: string;\n  /** The TCP port the connection was attempted on. */\n  port?: number;\n  /** Detailed error message about the failed connection. */\n  exception?: string;\n}\n\nexport interface CassandraClusterPublicStatusDataCentersItem {\n  /** The name of this Datacenter. */\n  name?: string;\n  /** A list of all seed nodes in the cluster, managed and unmanaged. */\n  seedNodes?: string[];\n  nodes?: ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems[];\n}\n\nexport interface ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems {\n  /** The node's IP address. */\n  address?: string;\n  /** The state of the node in Cassandra ring. */\n  state?: NodeState;\n  status?: string;\n  /** The amount of file system data in the data directory (e.g., 47.66 kB), excluding all content in the snapshots subdirectories. Because all SSTable data files are included, any data that is not cleaned up (such as TTL-expired cells or tombstones) is counted. */\n  load?: string;\n  /** List of tokens this node covers. */\n  tokens?: string[];\n  size?: number;\n  /** The network ID of the node. */\n  hostID?: string;\n  /** The rack this node is part of. */\n  rack?: string;\n  /** The timestamp when these statistics were captured. */\n  timestamp?: string;\n  /** The amount of disk used, in kB, of the directory /var/lib/cassandra. */\n  diskUsedKB?: number;\n  /** The amount of disk free, in kB, of the directory /var/lib/cassandra. */\n  diskFreeKB?: number;\n  /** Used memory (calculated as total - free - buffers - cache), in kB. */\n  memoryUsedKB?: number;\n  /** Memory used by kernel buffers (Buffers in /proc/meminfo) and page cache and slabs (Cached and SReclaimable in /proc/meminfo), in kB. */\n  memoryBuffersAndCachedKB?: number;\n  /** Unused memory (MemFree and SwapFree in /proc/meminfo), in kB. */\n  memoryFreeKB?: number;\n  /** Total installed memory (MemTotal and SwapTotal in /proc/meminfo), in kB. */\n  memoryTotalKB?: number;\n  /** A float representing the current system-wide CPU utilization as a percentage. */\n  cpuUsage?: number;\n}\n\n/** The set of data plane operations permitted through this Role Definition. */\nexport interface Privilege {\n  /** An Azure Cosmos DB Mongo DB Resource. */\n  resource?: PrivilegeResource;\n  /** An array of actions that are allowed. */\n  actions?: string[];\n}\n\n/** An Azure Cosmos DB Mongo DB Resource. */\nexport interface PrivilegeResource {\n  /** The database name the role is applied. */\n  db?: string;\n  /** The collection name the role is applied. */\n  collection?: string;\n}\n\n/** The set of roles permitted through this Role Definition. */\nexport interface Role {\n  /** The database name the role is applied. */\n  db?: string;\n  /** The role name. */\n  role?: string;\n}\n\n/** Parameters to create and update an Azure Cosmos DB Mongo Role Definition. */\nexport interface MongoRoleDefinitionCreateUpdateParameters {\n  /** A user-friendly name for the Role Definition. Must be unique for the database account. */\n  roleName?: string;\n  /** Indicates whether the Role Definition was built-in or user created. */\n  type?: MongoRoleDefinitionType;\n  /** The database name for which access is being granted for this Role Definition. */\n  databaseName?: string;\n  /** A set of privileges contained by the Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Scopes higher than Database are not enforceable as privilege. */\n  privileges?: Privilege[];\n  /** The set of roles inherited by this Role Definition. */\n  roles?: Role[];\n}\n\n/** The relevant Mongo Role Definitions. */\nexport interface MongoRoleDefinitionListResult {\n  /**\n   * List of Mongo Role Definitions and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: MongoRoleDefinitionGetResults[];\n}\n\n/** Parameters to create and update an Azure Cosmos DB Mongo User Definition. */\nexport interface MongoUserDefinitionCreateUpdateParameters {\n  /** The user name for User Definition. */\n  userName?: string;\n  /** The password for User Definition. Response does not contain user password. */\n  password?: string;\n  /** The database name for which access is being granted for this User Definition. */\n  databaseName?: string;\n  /** A custom definition for the USer Definition. */\n  customData?: string;\n  /** The set of roles inherited by the User Definition. */\n  roles?: Role[];\n  /** The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256. */\n  mechanisms?: string;\n}\n\n/** The relevant User Definition. */\nexport interface MongoUserDefinitionListResult {\n  /**\n   * List of User Definition and their properties\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: MongoUserDefinitionGetResults[];\n}\n\n/** A list of notebook workspace resources */\nexport interface NotebookWorkspaceListResult {\n  /** Array of notebook workspace resources */\n  value?: NotebookWorkspace[];\n}\n\n/** The connection info for the given notebook workspace */\nexport interface NotebookWorkspaceConnectionInfoResult {\n  /**\n   * Specifies auth token used for connecting to Notebook server (uses token-based auth).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly authToken?: string;\n  /**\n   * Specifies the endpoint of Notebook server.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly notebookServerEndpoint?: string;\n}\n\n/** A list of private endpoint connections */\nexport interface PrivateEndpointConnectionListResult {\n  /** Array of private endpoint connections */\n  value?: PrivateEndpointConnection[];\n}\n\n/** A list of private link resources */\nexport interface PrivateLinkResourceListResult {\n  /** Array of private link resources */\n  value?: PrivateLinkResource[];\n}\n\n/** The set of data plane operations permitted through this Role Definition. */\nexport interface Permission {\n  /** An array of data actions that are allowed. */\n  dataActions?: string[];\n  /** An array of data actions that are denied. */\n  notDataActions?: string[];\n}\n\n/** Parameters to create and update an Azure Cosmos DB SQL Role Definition. */\nexport interface SqlRoleDefinitionCreateUpdateParameters {\n  /** A user-friendly name for the Role Definition. Must be unique for the database account. */\n  roleName?: string;\n  /** Indicates whether the Role Definition was built-in or user created. */\n  type?: RoleDefinitionType;\n  /** A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist. */\n  assignableScopes?: string[];\n  /** The set of operations allowed through this Role Definition. */\n  permissions?: Permission[];\n}\n\n/** The relevant Role Definitions. */\nexport interface SqlRoleDefinitionListResult {\n  /**\n   * List of Role Definitions and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: SqlRoleDefinitionGetResults[];\n}\n\n/** Parameters to create and update an Azure Cosmos DB SQL Role Assignment. */\nexport interface SqlRoleAssignmentCreateUpdateParameters {\n  /** The unique identifier for the associated Role Definition. */\n  roleDefinitionId?: string;\n  /** The data plane resource path for which access is being granted through this Role Assignment. */\n  scope?: string;\n  /** The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription. */\n  principalId?: string;\n}\n\n/** The relevant Role Assignments. */\nexport interface SqlRoleAssignmentListResult {\n  /**\n   * List of Role Assignments and their properties\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: SqlRoleAssignmentGetResults[];\n}\n\n/** The List operation response, that contains the restorable database accounts and their properties. */\nexport interface RestorableDatabaseAccountsListResult {\n  /**\n   * List of restorable database accounts and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableDatabaseAccountGetResult[];\n}\n\n/** A Azure Cosmos DB restorable database account. */\nexport interface RestorableDatabaseAccountGetResult {\n  /**\n   * The unique resource identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The location of the resource group to which the resource belongs. */\n  location?: string;\n  /** The name of the global database account */\n  accountName?: string;\n  /** The creation time of the restorable database account (ISO-8601 format). */\n  creationTime?: Date;\n  /** The time at which the restorable database account has been deleted (ISO-8601 format). */\n  deletionTime?: Date;\n  /**\n   * The API type of the restorable database account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly apiType?: ApiType;\n  /**\n   * List of regions where the of the database account can be restored from.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly restorableLocations?: RestorableLocationResource[];\n}\n\n/** Properties of the regional restorable account. */\nexport interface RestorableLocationResource {\n  /**\n   * The location of the regional restorable account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly locationName?: string;\n  /**\n   * The instance id of the regional restorable account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly regionalDatabaseAccountInstanceId?: string;\n  /**\n   * The creation time of the regional restorable database account (ISO-8601 format).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly creationTime?: Date;\n  /**\n   * The time at which the regional restorable database account has been deleted (ISO-8601 format).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly deletionTime?: Date;\n}\n\n/** Properties of the regional restorable account. */\nexport interface ContinuousBackupRestoreLocation {\n  /** The name of the continuous backup restore location. */\n  location?: string;\n}\n\n/** Backup information of a resource. */\nexport interface BackupInformation {\n  /**\n   * Information about the status of continuous backups.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly continuousBackupInformation?: ContinuousBackupInformation;\n}\n\n/** Information about the status of continuous backups. */\nexport interface ContinuousBackupInformation {\n  /** The latest restorable timestamp for a resource. */\n  latestRestorableTimestamp?: string;\n}\n\n/** The List operation response, that contains the SQL database events and their properties. */\nexport interface RestorableSqlDatabasesListResult {\n  /**\n   * List of SQL database events and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableSqlDatabaseGetResult[];\n}\n\n/** An Azure Cosmos DB SQL database event */\nexport interface RestorableSqlDatabaseGetResult {\n  /**\n   * The unique resource Identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The resource of an Azure Cosmos DB SQL database event */\n  resource?: RestorableSqlDatabasePropertiesResource;\n}\n\n/** The resource of an Azure Cosmos DB SQL database event */\nexport interface RestorableSqlDatabasePropertiesResource {\n  /**\n   * A system generated property. A unique identifier.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly rid?: string;\n  /**\n   * The operation type of this database event.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly operationType?: OperationType;\n  /**\n   * The time when this database event happened.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly eventTimestamp?: string;\n  /**\n   * The name of the SQL database.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerId?: string;\n  /**\n   * The resource ID of the SQL database.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerResourceId?: string;\n  /** Cosmos DB SQL database resource object */\n  database?: RestorableSqlDatabasePropertiesResourceDatabase;\n}\n\n/** The List operation response, that contains the SQL container events and their properties. */\nexport interface RestorableSqlContainersListResult {\n  /**\n   * List of SQL container events and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableSqlContainerGetResult[];\n}\n\n/** An Azure Cosmos DB SQL container event */\nexport interface RestorableSqlContainerGetResult {\n  /**\n   * The unique resource Identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The resource of an Azure Cosmos DB SQL container event */\n  resource?: RestorableSqlContainerPropertiesResource;\n}\n\n/** The resource of an Azure Cosmos DB SQL container event */\nexport interface RestorableSqlContainerPropertiesResource {\n  /**\n   * A system generated property. A unique identifier.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly rid?: string;\n  /**\n   * The operation type of this container event.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly operationType?: OperationType;\n  /**\n   * The when this container event happened.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly eventTimestamp?: string;\n  /**\n   * The name of this SQL container.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerId?: string;\n  /**\n   * The resource ID of this SQL container.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerResourceId?: string;\n  /** Cosmos DB SQL container resource object */\n  container?: RestorableSqlContainerPropertiesResourceContainer;\n}\n\n/** The List operation response, that contains the restorable SQL resources. */\nexport interface RestorableSqlResourcesListResult {\n  /**\n   * List of restorable SQL resources, including the database and collection names.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableSqlResourcesGetResult[];\n}\n\n/** Specific Databases to restore. */\nexport interface RestorableSqlResourcesGetResult {\n  /**\n   * The unique resource identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The name of the database available for restore. */\n  databaseName?: string;\n  /** The names of the collections available for restore. */\n  collectionNames?: string[];\n}\n\n/** The List operation response, that contains the MongoDB database events and their properties. */\nexport interface RestorableMongodbDatabasesListResult {\n  /**\n   * List of MongoDB database events and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableMongodbDatabaseGetResult[];\n}\n\n/** An Azure Cosmos DB MongoDB database event */\nexport interface RestorableMongodbDatabaseGetResult {\n  /**\n   * The unique resource Identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The resource of an Azure Cosmos DB MongoDB database event */\n  resource?: RestorableMongodbDatabasePropertiesResource;\n}\n\n/** The resource of an Azure Cosmos DB MongoDB database event */\nexport interface RestorableMongodbDatabasePropertiesResource {\n  /**\n   * A system generated property. A unique identifier.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly rid?: string;\n  /**\n   * The operation type of this database event.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly operationType?: OperationType;\n  /**\n   * The time when this database event happened.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly eventTimestamp?: string;\n  /**\n   * The name of this MongoDB database.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerId?: string;\n  /**\n   * The resource ID of this MongoDB database.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerResourceId?: string;\n}\n\n/** The List operation response, that contains the MongoDB collection events and their properties. */\nexport interface RestorableMongodbCollectionsListResult {\n  /**\n   * List of MongoDB collection events and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableMongodbCollectionGetResult[];\n}\n\n/** An Azure Cosmos DB MongoDB collection event */\nexport interface RestorableMongodbCollectionGetResult {\n  /**\n   * The unique resource Identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The resource of an Azure Cosmos DB MongoDB collection event */\n  resource?: RestorableMongodbCollectionPropertiesResource;\n}\n\n/** The resource of an Azure Cosmos DB MongoDB collection event */\nexport interface RestorableMongodbCollectionPropertiesResource {\n  /**\n   * A system generated property. A unique identifier.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly rid?: string;\n  /**\n   * The operation type of this collection event.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly operationType?: OperationType;\n  /**\n   * The time when this collection event happened.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly eventTimestamp?: string;\n  /**\n   * The name of this MongoDB collection.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerId?: string;\n  /**\n   * The resource ID of this MongoDB collection.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerResourceId?: string;\n}\n\n/** The List operation response, that contains the restorable MongoDB resources. */\nexport interface RestorableMongodbResourcesListResult {\n  /**\n   * List of restorable MongoDB resources, including the database and collection names.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableMongodbResourcesGetResult[];\n}\n\n/** Specific Databases to restore. */\nexport interface RestorableMongodbResourcesGetResult {\n  /**\n   * The unique resource identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The name of the database available for restore. */\n  databaseName?: string;\n  /** The names of the collections available for restore. */\n  collectionNames?: string[];\n}\n\n/** The List operation response, that contains the Gremlin database events and their properties. */\nexport interface RestorableGremlinDatabasesListResult {\n  /**\n   * List of Gremlin database events and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableGremlinDatabaseGetResult[];\n}\n\n/** An Azure Cosmos DB Gremlin database event */\nexport interface RestorableGremlinDatabaseGetResult {\n  /**\n   * The unique resource Identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The resource of an Azure Cosmos DB Gremlin database event */\n  resource?: RestorableGremlinDatabasePropertiesResource;\n}\n\n/** The resource of an Azure Cosmos DB Gremlin database event */\nexport interface RestorableGremlinDatabasePropertiesResource {\n  /**\n   * A system generated property. A unique identifier.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly rid?: string;\n  /**\n   * The operation type of this database event.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly operationType?: OperationType;\n  /**\n   * The time when this database event happened.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly eventTimestamp?: string;\n  /**\n   * The name of this Gremlin database.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerId?: string;\n  /**\n   * The resource ID of this Gremlin database.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerResourceId?: string;\n}\n\n/** The List operation response, that contains the Gremlin graph events and their properties. */\nexport interface RestorableGremlinGraphsListResult {\n  /**\n   * List of Gremlin graph events and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableGremlinGraphGetResult[];\n}\n\n/** An Azure Cosmos DB Gremlin graph event */\nexport interface RestorableGremlinGraphGetResult {\n  /**\n   * The unique resource Identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The resource of an Azure Cosmos DB Gremlin graph event */\n  resource?: RestorableGremlinGraphPropertiesResource;\n}\n\n/** The resource of an Azure Cosmos DB Gremlin graph event */\nexport interface RestorableGremlinGraphPropertiesResource {\n  /**\n   * A system generated property. A unique identifier.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly rid?: string;\n  /**\n   * The operation type of this graph event.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly operationType?: OperationType;\n  /**\n   * The time when this graph event happened.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly eventTimestamp?: string;\n  /**\n   * The name of this Gremlin graph.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerId?: string;\n  /**\n   * The resource ID of this Gremlin graph.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerResourceId?: string;\n}\n\n/** The List operation response, that contains the restorable Gremlin resources. */\nexport interface RestorableGremlinResourcesListResult {\n  /**\n   * List of restorable Gremlin resources, including the gremlin database and graph names.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableGremlinResourcesGetResult[];\n}\n\n/** Specific Databases to restore. */\nexport interface RestorableGremlinResourcesGetResult {\n  /**\n   * The unique resource identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The name of the gremlin database available for restore. */\n  databaseName?: string;\n  /** The names of the graphs available for restore. */\n  graphNames?: string[];\n}\n\n/** The List operation response, that contains the Table events and their properties. */\nexport interface RestorableTablesListResult {\n  /**\n   * List of Table events and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableTableGetResult[];\n}\n\n/** An Azure Cosmos DB Table event */\nexport interface RestorableTableGetResult {\n  /**\n   * The unique resource Identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The resource of an Azure Cosmos DB Table event */\n  resource?: RestorableTablePropertiesResource;\n}\n\n/** The resource of an Azure Cosmos DB Table event */\nexport interface RestorableTablePropertiesResource {\n  /**\n   * A system generated property. A unique identifier.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly rid?: string;\n  /**\n   * The operation type of this table event.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly operationType?: OperationType;\n  /**\n   * The time when this table event happened.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly eventTimestamp?: string;\n  /**\n   * The name of this Table.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerId?: string;\n  /**\n   * The resource ID of this Table.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ownerResourceId?: string;\n}\n\n/** List of restorable table names. */\nexport interface RestorableTableResourcesListResult {\n  /**\n   * List of restorable table names.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: RestorableTableResourcesGetResult[];\n}\n\n/** Specific Databases to restore. */\nexport interface RestorableTableResourcesGetResult {\n  /**\n   * The unique resource identifier of the ARM resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the Table.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of Azure resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n}\n\n/** The List operation response, that contains the Service Resource and their properties. */\nexport interface ServiceResourceListResult {\n  /**\n   * List of Service Resource and their properties.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: ServiceResource[];\n}\n\n/** Services response resource. */\nexport interface ServiceResourceProperties {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  serviceType:\n    | \"DataTransfer\"\n    | \"SqlDedicatedGateway\"\n    | \"GraphAPICompute\"\n    | \"MaterializedViewsBuilder\";\n  /** Describes unknown properties. The value of an unknown property can be of \"any\" type. */\n  [property: string]: any;\n  /**\n   * Time of the last state change (ISO-8601 format).\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly creationTime?: Date;\n  /** Instance type for the service. */\n  instanceSize?: ServiceSize;\n  /** Instance count for the service. */\n  instanceCount?: number;\n  /**\n   * Describes the status of a service.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly status?: ServiceStatus;\n}\n\n/** Parameters for Create or Update Request for ServiceResource */\nexport interface ServiceResourceCreateUpdateParameters {\n  /** Instance type for the service. */\n  instanceSize?: ServiceSize;\n  /** Instance count for the service. */\n  instanceCount?: number;\n  /** ServiceType for the service. */\n  serviceType?: ServiceType;\n}\n\n/** Configuration values for periodic mode backup */\nexport interface PeriodicModeProperties {\n  /** An integer representing the interval in minutes between two backups */\n  backupIntervalInMinutes?: number;\n  /** An integer representing the time (in hours) that each backup is retained */\n  backupRetentionIntervalInHours?: number;\n  /** Enum to indicate type of backup residency */\n  backupStorageRedundancy?: BackupStorageRedundancy;\n}\n\n/** Describes the service response property. */\nexport interface DataTransferServiceResource {\n  /** Properties for DataTransferServiceResource. */\n  properties?: DataTransferServiceResourceProperties;\n}\n\n/** Resource for a regional service location. */\nexport interface RegionalServiceResource {\n  /**\n   * The regional service name.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The location name.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly location?: string;\n  /**\n   * Describes the status of a service.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly status?: ServiceStatus;\n}\n\n/** Describes the service response property for SqlDedicatedGateway. */\nexport interface SqlDedicatedGatewayServiceResource {\n  /** Properties for SqlDedicatedGatewayServiceResource. */\n  properties?: SqlDedicatedGatewayServiceResourceProperties;\n}\n\n/** Describes the service response property for GraphAPICompute. */\nexport interface GraphAPIComputeServiceResource {\n  /** Properties for GraphAPIComputeServiceResource. */\n  properties?: GraphAPIComputeServiceResourceProperties;\n}\n\n/** Describes the service response property for MaterializedViewsBuilder. */\nexport interface MaterializedViewsBuilderServiceResource {\n  /** Properties for MaterializedViewsBuilderServiceResource. */\n  properties?: MaterializedViewsBuilderServiceResourceProperties;\n}\n\n/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */\nexport interface ProxyResource extends Resource {}\n\n/** The object representing periodic mode backup policy. */\nexport interface PeriodicModeBackupPolicy extends BackupPolicy {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"Periodic\";\n  /** Configuration values for periodic mode backup */\n  periodicModeProperties?: PeriodicModeProperties;\n}\n\n/** The object representing continuous mode backup policy. */\nexport interface ContinuousModeBackupPolicy extends BackupPolicy {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"Continuous\";\n}\n\n/** An Azure Cosmos DB database account. */\nexport interface DatabaseAccountGetResults extends ARMResourceProperties {\n  /** Indicates the type of database account. This can only be set at database account creation. */\n  kind?: DatabaseAccountKind;\n  /** Identity for the resource. */\n  identity?: ManagedServiceIdentity;\n  /**\n   * The system meta data relating to this resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /**\n   * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'DeletionFailed' – the Cosmos DB account deletion failed.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: string;\n  /**\n   * The connection endpoint for the Cosmos DB database account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly documentEndpoint?: string;\n  /**\n   * The offer type for the Cosmos DB database account. Default value: Standard.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly databaseAccountOfferType?: \"Standard\";\n  /** List of IpRules. */\n  ipRules?: IpAddressOrRange[];\n  /** Flag to indicate whether to enable/disable Virtual Network ACL rules. */\n  isVirtualNetworkFilterEnabled?: boolean;\n  /** Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account. */\n  enableAutomaticFailover?: boolean;\n  /** The consistency policy for the Cosmos DB database account. */\n  consistencyPolicy?: ConsistencyPolicy;\n  /** List of Cosmos DB capabilities for the account */\n  capabilities?: Capability[];\n  /**\n   * An array that contains the write location for the Cosmos DB account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly writeLocations?: Location[];\n  /**\n   * An array that contains of the read locations enabled for the Cosmos DB account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly readLocations?: Location[];\n  /**\n   * An array that contains all of the locations enabled for the Cosmos DB account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly locations?: Location[];\n  /**\n   * An array that contains the regions ordered by their failover priorities.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly failoverPolicies?: FailoverPolicy[];\n  /** List of Virtual Network ACL rules configured for the Cosmos DB account. */\n  virtualNetworkRules?: VirtualNetworkRule[];\n  /**\n   * List of Private Endpoint Connections configured for the Cosmos DB account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly privateEndpointConnections?: PrivateEndpointConnection[];\n  /** Enables the account to write in multiple locations */\n  enableMultipleWriteLocations?: boolean;\n  /** Enables the cassandra connector on the Cosmos DB C* account */\n  enableCassandraConnector?: boolean;\n  /** The cassandra connector offer type for the Cosmos DB database C* account. */\n  connectorOffer?: ConnectorOffer;\n  /** Disable write operations on metadata resources (databases, containers, throughput) via account keys */\n  disableKeyBasedMetadataWriteAccess?: boolean;\n  /** The URI of the key vault */\n  keyVaultKeyUri?: string;\n  /** The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be \"FirstPartyIdentity\", \"SystemAssignedIdentity\" and more. */\n  defaultIdentity?: string;\n  /** Whether requests from Public Network are allowed */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** Flag to indicate whether Free Tier is enabled. */\n  enableFreeTier?: boolean;\n  /** API specific properties. */\n  apiProperties?: ApiProperties;\n  /** Flag to indicate whether to enable storage analytics. */\n  enableAnalyticalStorage?: boolean;\n  /** Analytical storage specific properties. */\n  analyticalStorageConfiguration?: AnalyticalStorageConfiguration;\n  /**\n   * A unique identifier assigned to the database account\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly instanceId?: string;\n  /** Enum to indicate the mode of account creation. */\n  createMode?: CreateMode;\n  /** Parameters to indicate the information about the restore. */\n  restoreParameters?: RestoreParameters;\n  /** The object representing the policy for taking backups on an account. */\n  backupPolicy?: BackupPolicyUnion;\n  /** The CORS policy for the Cosmos DB database account. */\n  cors?: CorsPolicy[];\n  /** Indicates what services are allowed to bypass firewall checks. */\n  networkAclBypass?: NetworkAclBypass;\n  /** An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account. */\n  networkAclBypassResourceIds?: string[];\n  /** Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. */\n  disableLocalAuth?: boolean;\n  /** The object that represents all properties related to capacity enforcement on an account. */\n  capacity?: Capacity;\n  /**\n   * The object that represents the metadata for the Account Keys of the Cosmos DB account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly keysMetadata?: DatabaseAccountKeysMetadata;\n  /** Flag to indicate enabling/disabling of Partition Merge feature on the account */\n  enablePartitionMerge?: boolean;\n  /** Indicates the minimum allowed Tls version. The default is Tls 1.0, except for Cassandra and Mongo API's, which only work with Tls 1.2. */\n  minimalTlsVersion?: MinimalTlsVersion;\n}\n\n/** Parameters to create and update Cosmos DB database accounts. */\nexport interface DatabaseAccountCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** Indicates the type of database account. This can only be set at database account creation. */\n  kind?: DatabaseAccountKind;\n  /** Identity for the resource. */\n  identity?: ManagedServiceIdentity;\n  /** The consistency policy for the Cosmos DB account. */\n  consistencyPolicy?: ConsistencyPolicy;\n  /** An array that contains the georeplication locations enabled for the Cosmos DB account. */\n  locations: Location[];\n  /** The offer type for the database */\n  databaseAccountOfferType: \"Standard\";\n  /** List of IpRules. */\n  ipRules?: IpAddressOrRange[];\n  /** Flag to indicate whether to enable/disable Virtual Network ACL rules. */\n  isVirtualNetworkFilterEnabled?: boolean;\n  /** Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account. */\n  enableAutomaticFailover?: boolean;\n  /** List of Cosmos DB capabilities for the account */\n  capabilities?: Capability[];\n  /** List of Virtual Network ACL rules configured for the Cosmos DB account. */\n  virtualNetworkRules?: VirtualNetworkRule[];\n  /** Enables the account to write in multiple locations */\n  enableMultipleWriteLocations?: boolean;\n  /** Enables the cassandra connector on the Cosmos DB C* account */\n  enableCassandraConnector?: boolean;\n  /** The cassandra connector offer type for the Cosmos DB database C* account. */\n  connectorOffer?: ConnectorOffer;\n  /** Disable write operations on metadata resources (databases, containers, throughput) via account keys */\n  disableKeyBasedMetadataWriteAccess?: boolean;\n  /** The URI of the key vault */\n  keyVaultKeyUri?: string;\n  /** The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be \"FirstPartyIdentity\", \"SystemAssignedIdentity\" and more. */\n  defaultIdentity?: string;\n  /** Whether requests from Public Network are allowed */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** Flag to indicate whether Free Tier is enabled. */\n  enableFreeTier?: boolean;\n  /** API specific properties. Currently, supported only for MongoDB API. */\n  apiProperties?: ApiProperties;\n  /** Flag to indicate whether to enable storage analytics. */\n  enableAnalyticalStorage?: boolean;\n  /** Analytical storage specific properties. */\n  analyticalStorageConfiguration?: AnalyticalStorageConfiguration;\n  /** Enum to indicate the mode of account creation. */\n  createMode?: CreateMode;\n  /** The object representing the policy for taking backups on an account. */\n  backupPolicy?: BackupPolicyUnion;\n  /** The CORS policy for the Cosmos DB database account. */\n  cors?: CorsPolicy[];\n  /** Indicates what services are allowed to bypass firewall checks. */\n  networkAclBypass?: NetworkAclBypass;\n  /** An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account. */\n  networkAclBypassResourceIds?: string[];\n  /** Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. */\n  disableLocalAuth?: boolean;\n  /** Parameters to indicate the information about the restore. */\n  restoreParameters?: RestoreParameters;\n  /** The object that represents all properties related to capacity enforcement on an account. */\n  capacity?: Capacity;\n  /**\n   * This property is ignored during the update/create operation, as the metadata is read-only. The object represents the metadata for the Account Keys of the Cosmos DB account.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly keysMetadata?: DatabaseAccountKeysMetadata;\n  /** Flag to indicate enabling/disabling of Partition Merge feature on the account */\n  enablePartitionMerge?: boolean;\n  /** Indicates the minimum allowed Tls version. The default is Tls 1.0, except for Cassandra and Mongo API's, which only work with Tls 1.2. */\n  minimalTlsVersion?: MinimalTlsVersion;\n}\n\n/** An Azure Cosmos DB SQL database. */\nexport interface SqlDatabaseGetResults extends ARMResourceProperties {\n  resource?: SqlDatabaseGetPropertiesResource;\n  options?: SqlDatabaseGetPropertiesOptions;\n}\n\n/** Parameters to create and update Cosmos DB SQL database. */\nexport interface SqlDatabaseCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a SQL database */\n  resource: SqlDatabaseResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB resource throughput. */\nexport interface ThroughputSettingsGetResults extends ARMResourceProperties {\n  resource?: ThroughputSettingsGetPropertiesResource;\n}\n\n/** Parameters to update Cosmos DB resource throughput. */\nexport interface ThroughputSettingsUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a resource throughput */\n  resource: ThroughputSettingsResource;\n}\n\n/** An Azure Cosmos DB container. */\nexport interface SqlContainerGetResults extends ARMResourceProperties {\n  resource?: SqlContainerGetPropertiesResource;\n  options?: SqlContainerGetPropertiesOptions;\n}\n\n/** Parameters to create and update Cosmos DB container. */\nexport interface SqlContainerCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a container */\n  resource: SqlContainerResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB storedProcedure. */\nexport interface SqlStoredProcedureGetResults extends ARMResourceProperties {\n  resource?: SqlStoredProcedureGetPropertiesResource;\n}\n\n/** Parameters to create and update Cosmos DB storedProcedure. */\nexport interface SqlStoredProcedureCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a storedProcedure */\n  resource: SqlStoredProcedureResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB userDefinedFunction. */\nexport interface SqlUserDefinedFunctionGetResults\n  extends ARMResourceProperties {\n  resource?: SqlUserDefinedFunctionGetPropertiesResource;\n}\n\n/** Parameters to create and update Cosmos DB userDefinedFunction. */\nexport interface SqlUserDefinedFunctionCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a userDefinedFunction */\n  resource: SqlUserDefinedFunctionResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB trigger. */\nexport interface SqlTriggerGetResults extends ARMResourceProperties {\n  resource?: SqlTriggerGetPropertiesResource;\n}\n\n/** Parameters to create and update Cosmos DB trigger. */\nexport interface SqlTriggerCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a trigger */\n  resource: SqlTriggerResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB MongoDB database. */\nexport interface MongoDBDatabaseGetResults extends ARMResourceProperties {\n  resource?: MongoDBDatabaseGetPropertiesResource;\n  options?: MongoDBDatabaseGetPropertiesOptions;\n}\n\n/** Parameters to create and update Cosmos DB MongoDB database. */\nexport interface MongoDBDatabaseCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a MongoDB database */\n  resource: MongoDBDatabaseResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB MongoDB collection. */\nexport interface MongoDBCollectionGetResults extends ARMResourceProperties {\n  resource?: MongoDBCollectionGetPropertiesResource;\n  options?: MongoDBCollectionGetPropertiesOptions;\n}\n\n/** Parameters to create and update Cosmos DB MongoDB collection. */\nexport interface MongoDBCollectionCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a MongoDB collection */\n  resource: MongoDBCollectionResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB Table. */\nexport interface TableGetResults extends ARMResourceProperties {\n  resource?: TableGetPropertiesResource;\n  options?: TableGetPropertiesOptions;\n}\n\n/** Parameters to create and update Cosmos DB Table. */\nexport interface TableCreateUpdateParameters extends ARMResourceProperties {\n  /** The standard JSON format of a Table */\n  resource: TableResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB Cassandra keyspace. */\nexport interface CassandraKeyspaceGetResults extends ARMResourceProperties {\n  resource?: CassandraKeyspaceGetPropertiesResource;\n  options?: CassandraKeyspaceGetPropertiesOptions;\n}\n\n/** Parameters to create and update Cosmos DB Cassandra keyspace. */\nexport interface CassandraKeyspaceCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a Cassandra keyspace */\n  resource: CassandraKeyspaceResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB Cassandra table. */\nexport interface CassandraTableGetResults extends ARMResourceProperties {\n  resource?: CassandraTableGetPropertiesResource;\n  options?: CassandraTableGetPropertiesOptions;\n}\n\n/** Parameters to create and update Cosmos DB Cassandra table. */\nexport interface CassandraTableCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a Cassandra table */\n  resource: CassandraTableResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB Gremlin database. */\nexport interface GremlinDatabaseGetResults extends ARMResourceProperties {\n  resource?: GremlinDatabaseGetPropertiesResource;\n  options?: GremlinDatabaseGetPropertiesOptions;\n}\n\n/** Parameters to create and update Cosmos DB Gremlin database. */\nexport interface GremlinDatabaseCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a Gremlin database */\n  resource: GremlinDatabaseResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** An Azure Cosmos DB Gremlin graph. */\nexport interface GremlinGraphGetResults extends ARMResourceProperties {\n  resource?: GremlinGraphGetPropertiesResource;\n  options?: GremlinGraphGetPropertiesOptions;\n}\n\n/** Parameters to create and update Cosmos DB Gremlin graph. */\nexport interface GremlinGraphCreateUpdateParameters\n  extends ARMResourceProperties {\n  /** The standard JSON format of a Gremlin graph */\n  resource: GremlinGraphResource;\n  /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */\n  options?: CreateUpdateOptions;\n}\n\n/** The access keys for the given database account. */\nexport interface DatabaseAccountListKeysResult\n  extends DatabaseAccountListReadOnlyKeysResult {\n  /**\n   * Base 64 encoded value of the primary read-write key.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly primaryMasterKey?: string;\n  /**\n   * Base 64 encoded value of the secondary read-write key.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly secondaryMasterKey?: string;\n}\n\n/** The metric values for a single partition. */\nexport interface PartitionMetric extends Metric {\n  /**\n   * The partition id (GUID identifier) of the metric values.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly partitionId?: string;\n  /**\n   * The partition key range id (integer identifier) of the metric values.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly partitionKeyRangeId?: string;\n}\n\n/** Represents percentile metrics values. */\nexport interface PercentileMetricValue extends MetricValue {\n  /**\n   * The 10th percentile value for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly p10?: number;\n  /**\n   * The 25th percentile value for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly p25?: number;\n  /**\n   * The 50th percentile value for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly p50?: number;\n  /**\n   * The 75th percentile value for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly p75?: number;\n  /**\n   * The 90th percentile value for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly p90?: number;\n  /**\n   * The 95th percentile value for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly p95?: number;\n  /**\n   * The 99th percentile value for the metric.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly p99?: number;\n}\n\n/** The partition level usage data for a usage request. */\nexport interface PartitionUsage extends Usage {\n  /**\n   * The partition id (GUID identifier) of the usages.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly partitionId?: string;\n  /**\n   * The partition key range id (integer identifier) of the usages.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly partitionKeyRangeId?: string;\n}\n\nexport interface SqlDatabaseGetPropertiesResource\n  extends SqlDatabaseResource,\n    ExtendedResourceProperties {\n  /** A system generated property that specified the addressable path of the collections resource. */\n  colls?: string;\n  /** A system generated property that specifies the addressable path of the users resource. */\n  users?: string;\n}\n\n/** Cosmos DB SQL database resource object */\nexport interface RestorableSqlDatabasePropertiesResourceDatabase\n  extends SqlDatabaseResource,\n    ExtendedResourceProperties {\n  /**\n   * A system generated property that specified the addressable path of the collections resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly colls?: string;\n  /**\n   * A system generated property that specifies the addressable path of the users resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly users?: string;\n  /**\n   * A system generated property that specifies the addressable path of the database resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly self?: string;\n}\n\nexport interface ThroughputSettingsGetPropertiesResource\n  extends ThroughputSettingsResource,\n    ExtendedResourceProperties {}\n\nexport interface SqlContainerGetPropertiesResource\n  extends SqlContainerResource,\n    ExtendedResourceProperties {}\n\nexport interface ClientEncryptionKeyGetPropertiesResource\n  extends ClientEncryptionKeyResource,\n    ExtendedResourceProperties {}\n\nexport interface SqlStoredProcedureGetPropertiesResource\n  extends SqlStoredProcedureResource,\n    ExtendedResourceProperties {}\n\nexport interface SqlUserDefinedFunctionGetPropertiesResource\n  extends SqlUserDefinedFunctionResource,\n    ExtendedResourceProperties {}\n\nexport interface SqlTriggerGetPropertiesResource\n  extends SqlTriggerResource,\n    ExtendedResourceProperties {}\n\nexport interface MongoDBDatabaseGetPropertiesResource\n  extends MongoDBDatabaseResource,\n    ExtendedResourceProperties {}\n\nexport interface MongoDBCollectionGetPropertiesResource\n  extends MongoDBCollectionResource,\n    ExtendedResourceProperties {}\n\nexport interface TableGetPropertiesResource\n  extends TableResource,\n    ExtendedResourceProperties {}\n\nexport interface CassandraKeyspaceGetPropertiesResource\n  extends CassandraKeyspaceResource,\n    ExtendedResourceProperties {}\n\nexport interface CassandraTableGetPropertiesResource\n  extends CassandraTableResource,\n    ExtendedResourceProperties {}\n\nexport interface GremlinDatabaseGetPropertiesResource\n  extends GremlinDatabaseResource,\n    ExtendedResourceProperties {}\n\nexport interface GremlinGraphGetPropertiesResource\n  extends GremlinGraphResource,\n    ExtendedResourceProperties {}\n\n/** Cosmos DB SQL container resource object */\nexport interface RestorableSqlContainerPropertiesResourceContainer\n  extends SqlContainerResource,\n    ExtendedResourceProperties {\n  /**\n   * A system generated property that specifies the addressable path of the container resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly self?: string;\n}\n\nexport interface SqlDatabaseGetPropertiesOptions extends OptionsResource {}\n\nexport interface SqlContainerGetPropertiesOptions extends OptionsResource {}\n\nexport interface MongoDBDatabaseGetPropertiesOptions extends OptionsResource {}\n\nexport interface MongoDBCollectionGetPropertiesOptions\n  extends OptionsResource {}\n\nexport interface TableGetPropertiesOptions extends OptionsResource {}\n\nexport interface CassandraKeyspaceGetPropertiesOptions\n  extends OptionsResource {}\n\nexport interface CassandraTableGetPropertiesOptions extends OptionsResource {}\n\nexport interface GremlinDatabaseGetPropertiesOptions extends OptionsResource {}\n\nexport interface GremlinGraphGetPropertiesOptions extends OptionsResource {}\n\n/** Client Encryption Key. */\nexport interface ClientEncryptionKeyGetResults extends ARMProxyResource {\n  resource?: ClientEncryptionKeyGetPropertiesResource;\n}\n\n/** Cosmos DB location get result */\nexport interface LocationGetResult extends ARMProxyResource {\n  /** Cosmos DB location metadata */\n  properties?: LocationProperties;\n}\n\n/** A managed Cassandra data center. */\nexport interface DataCenterResource extends ARMProxyResource {\n  /** Properties of a managed Cassandra data center. */\n  properties?: DataCenterResourceProperties;\n}\n\n/** An Azure Cosmos DB Mongo Role Definition. */\nexport interface MongoRoleDefinitionGetResults extends ARMProxyResource {\n  /** A user-friendly name for the Role Definition. Must be unique for the database account. */\n  roleName?: string;\n  /** Indicates whether the Role Definition was built-in or user created. */\n  typePropertiesType?: MongoRoleDefinitionType;\n  /** The database name for which access is being granted for this Role Definition. */\n  databaseName?: string;\n  /** A set of privileges contained by the Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Scopes higher than Database are not enforceable as privilege. */\n  privileges?: Privilege[];\n  /** The set of roles inherited by this Role Definition. */\n  roles?: Role[];\n}\n\n/** An Azure Cosmos DB User Definition */\nexport interface MongoUserDefinitionGetResults extends ARMProxyResource {\n  /** The user name for User Definition. */\n  userName?: string;\n  /** The password for User Definition. Response does not contain user password. */\n  password?: string;\n  /** The database name for which access is being granted for this User Definition. */\n  databaseName?: string;\n  /** A custom definition for the USer Definition. */\n  customData?: string;\n  /** The set of roles inherited by the User Definition. */\n  roles?: Role[];\n  /** The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256. */\n  mechanisms?: string;\n}\n\n/** A notebook workspace resource */\nexport interface NotebookWorkspace extends ARMProxyResource {\n  /**\n   * Specifies the endpoint of Notebook server.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly notebookServerEndpoint?: string;\n  /**\n   * Status of the notebook workspace. Possible values are: Creating, Online, Deleting, Failed, Updating.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly status?: string;\n}\n\n/** Parameters to create a notebook workspace resource */\nexport interface NotebookWorkspaceCreateUpdateParameters\n  extends ARMProxyResource {}\n\n/** A private link resource */\nexport interface PrivateLinkResource extends ARMProxyResource {\n  /**\n   * The private link resource group id.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly groupId?: string;\n  /**\n   * The private link resource required member names.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly requiredMembers?: string[];\n  /**\n   * The private link resource required zone names.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly requiredZoneNames?: string[];\n}\n\n/** An Azure Cosmos DB SQL Role Definition. */\nexport interface SqlRoleDefinitionGetResults extends ARMProxyResource {\n  /** A user-friendly name for the Role Definition. Must be unique for the database account. */\n  roleName?: string;\n  /** Indicates whether the Role Definition was built-in or user created. */\n  typePropertiesType?: RoleDefinitionType;\n  /** A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist. */\n  assignableScopes?: string[];\n  /** The set of operations allowed through this Role Definition. */\n  permissions?: Permission[];\n}\n\n/** An Azure Cosmos DB Role Assignment */\nexport interface SqlRoleAssignmentGetResults extends ARMProxyResource {\n  /** The unique identifier for the associated Role Definition. */\n  roleDefinitionId?: string;\n  /** The data plane resource path for which access is being granted through this Role Assignment. */\n  scope?: string;\n  /** The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription. */\n  principalId?: string;\n}\n\n/** Properties for the database account. */\nexport interface ServiceResource extends ARMProxyResource {\n  /** Services response resource. */\n  properties?: ServiceResourcePropertiesUnion;\n}\n\n/** Representation of a managed Cassandra cluster. */\nexport interface ClusterResource extends ManagedCassandraARMResourceProperties {\n  /** Properties of a managed Cassandra cluster. */\n  properties?: ClusterResourceProperties;\n}\n\n/** Properties for DataTransferServiceResource. */\nexport interface DataTransferServiceResourceProperties\n  extends ServiceResourceProperties {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  serviceType: \"DataTransfer\";\n  /**\n   * An array that contains all of the locations for the service.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly locations?: DataTransferRegionalServiceResource[];\n}\n\n/** Properties for SqlDedicatedGatewayServiceResource. */\nexport interface SqlDedicatedGatewayServiceResourceProperties\n  extends ServiceResourceProperties {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  serviceType: \"SqlDedicatedGateway\";\n  /** SqlDedicatedGateway endpoint for the service. */\n  sqlDedicatedGatewayEndpoint?: string;\n  /**\n   * An array that contains all of the locations for the service.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly locations?: SqlDedicatedGatewayRegionalServiceResource[];\n}\n\n/** Properties for GraphAPIComputeServiceResource. */\nexport interface GraphAPIComputeServiceResourceProperties\n  extends ServiceResourceProperties {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  serviceType: \"GraphAPICompute\";\n  /** GraphAPICompute endpoint for the service. */\n  graphApiComputeEndpoint?: string;\n  /**\n   * An array that contains all of the locations for the service.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly locations?: GraphAPIComputeRegionalServiceResource[];\n}\n\n/** Properties for MaterializedViewsBuilderServiceResource. */\nexport interface MaterializedViewsBuilderServiceResourceProperties\n  extends ServiceResourceProperties {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  serviceType: \"MaterializedViewsBuilder\";\n  /**\n   * An array that contains all of the locations for the service.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly locations?: MaterializedViewsBuilderRegionalServiceResource[];\n}\n\n/** Resource for a regional service location. */\nexport interface DataTransferRegionalServiceResource\n  extends RegionalServiceResource {}\n\n/** Resource for a regional service location. */\nexport interface SqlDedicatedGatewayRegionalServiceResource\n  extends RegionalServiceResource {\n  /**\n   * The regional endpoint for SqlDedicatedGateway.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly sqlDedicatedGatewayEndpoint?: string;\n}\n\n/** Resource for a regional service location. */\nexport interface GraphAPIComputeRegionalServiceResource\n  extends RegionalServiceResource {\n  /**\n   * The regional endpoint for GraphAPICompute.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly graphApiComputeEndpoint?: string;\n}\n\n/** Resource for a regional service location. */\nexport interface MaterializedViewsBuilderRegionalServiceResource\n  extends RegionalServiceResource {}\n\n/** A private endpoint connection */\nexport interface PrivateEndpointConnection extends ProxyResource {\n  /** Private endpoint which the connection belongs to. */\n  privateEndpoint?: PrivateEndpointProperty;\n  /** Connection State of the Private Endpoint Connection. */\n  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionStateProperty;\n  /** Group id of the private endpoint. */\n  groupId?: string;\n  /** Provisioning state of the private endpoint. */\n  provisioningState?: string;\n}\n\n/** Defines headers for DatabaseAccounts_delete operation. */\nexport interface DatabaseAccountsDeleteHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for DatabaseAccounts_failoverPriorityChange operation. */\nexport interface DatabaseAccountsFailoverPriorityChangeHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for DatabaseAccounts_offlineRegion operation. */\nexport interface DatabaseAccountsOfflineRegionHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for DatabaseAccounts_onlineRegion operation. */\nexport interface DatabaseAccountsOnlineRegionHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for DatabaseAccounts_regenerateKey operation. */\nexport interface DatabaseAccountsRegenerateKeyHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_createUpdateSqlDatabase operation. */\nexport interface SqlResourcesCreateUpdateSqlDatabaseHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_deleteSqlDatabase operation. */\nexport interface SqlResourcesDeleteSqlDatabaseHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_updateSqlDatabaseThroughput operation. */\nexport interface SqlResourcesUpdateSqlDatabaseThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_migrateSqlDatabaseToAutoscale operation. */\nexport interface SqlResourcesMigrateSqlDatabaseToAutoscaleHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_migrateSqlDatabaseToManualThroughput operation. */\nexport interface SqlResourcesMigrateSqlDatabaseToManualThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_createUpdateSqlContainer operation. */\nexport interface SqlResourcesCreateUpdateSqlContainerHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_deleteSqlContainer operation. */\nexport interface SqlResourcesDeleteSqlContainerHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_updateSqlContainerThroughput operation. */\nexport interface SqlResourcesUpdateSqlContainerThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_migrateSqlContainerToAutoscale operation. */\nexport interface SqlResourcesMigrateSqlContainerToAutoscaleHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_migrateSqlContainerToManualThroughput operation. */\nexport interface SqlResourcesMigrateSqlContainerToManualThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_createUpdateClientEncryptionKey operation. */\nexport interface SqlResourcesCreateUpdateClientEncryptionKeyHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_createUpdateSqlStoredProcedure operation. */\nexport interface SqlResourcesCreateUpdateSqlStoredProcedureHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_deleteSqlStoredProcedure operation. */\nexport interface SqlResourcesDeleteSqlStoredProcedureHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_createUpdateSqlUserDefinedFunction operation. */\nexport interface SqlResourcesCreateUpdateSqlUserDefinedFunctionHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_deleteSqlUserDefinedFunction operation. */\nexport interface SqlResourcesDeleteSqlUserDefinedFunctionHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_createUpdateSqlTrigger operation. */\nexport interface SqlResourcesCreateUpdateSqlTriggerHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for SqlResources_deleteSqlTrigger operation. */\nexport interface SqlResourcesDeleteSqlTriggerHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for MongoDBResources_createUpdateMongoDBDatabase operation. */\nexport interface MongoDBResourcesCreateUpdateMongoDBDatabaseHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for MongoDBResources_deleteMongoDBDatabase operation. */\nexport interface MongoDBResourcesDeleteMongoDBDatabaseHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for MongoDBResources_updateMongoDBDatabaseThroughput operation. */\nexport interface MongoDBResourcesUpdateMongoDBDatabaseThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for MongoDBResources_migrateMongoDBDatabaseToAutoscale operation. */\nexport interface MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for MongoDBResources_migrateMongoDBDatabaseToManualThroughput operation. */\nexport interface MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for MongoDBResources_createUpdateMongoDBCollection operation. */\nexport interface MongoDBResourcesCreateUpdateMongoDBCollectionHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for MongoDBResources_deleteMongoDBCollection operation. */\nexport interface MongoDBResourcesDeleteMongoDBCollectionHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for MongoDBResources_updateMongoDBCollectionThroughput operation. */\nexport interface MongoDBResourcesUpdateMongoDBCollectionThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for MongoDBResources_migrateMongoDBCollectionToAutoscale operation. */\nexport interface MongoDBResourcesMigrateMongoDBCollectionToAutoscaleHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for MongoDBResources_migrateMongoDBCollectionToManualThroughput operation. */\nexport interface MongoDBResourcesMigrateMongoDBCollectionToManualThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for TableResources_createUpdateTable operation. */\nexport interface TableResourcesCreateUpdateTableHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for TableResources_deleteTable operation. */\nexport interface TableResourcesDeleteTableHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for TableResources_updateTableThroughput operation. */\nexport interface TableResourcesUpdateTableThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for TableResources_migrateTableToAutoscale operation. */\nexport interface TableResourcesMigrateTableToAutoscaleHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for TableResources_migrateTableToManualThroughput operation. */\nexport interface TableResourcesMigrateTableToManualThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for CassandraResources_createUpdateCassandraKeyspace operation. */\nexport interface CassandraResourcesCreateUpdateCassandraKeyspaceHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for CassandraResources_deleteCassandraKeyspace operation. */\nexport interface CassandraResourcesDeleteCassandraKeyspaceHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for CassandraResources_updateCassandraKeyspaceThroughput operation. */\nexport interface CassandraResourcesUpdateCassandraKeyspaceThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for CassandraResources_migrateCassandraKeyspaceToAutoscale operation. */\nexport interface CassandraResourcesMigrateCassandraKeyspaceToAutoscaleHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for CassandraResources_migrateCassandraKeyspaceToManualThroughput operation. */\nexport interface CassandraResourcesMigrateCassandraKeyspaceToManualThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for CassandraResources_createUpdateCassandraTable operation. */\nexport interface CassandraResourcesCreateUpdateCassandraTableHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for CassandraResources_deleteCassandraTable operation. */\nexport interface CassandraResourcesDeleteCassandraTableHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for CassandraResources_updateCassandraTableThroughput operation. */\nexport interface CassandraResourcesUpdateCassandraTableThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for CassandraResources_migrateCassandraTableToAutoscale operation. */\nexport interface CassandraResourcesMigrateCassandraTableToAutoscaleHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for CassandraResources_migrateCassandraTableToManualThroughput operation. */\nexport interface CassandraResourcesMigrateCassandraTableToManualThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for GremlinResources_createUpdateGremlinDatabase operation. */\nexport interface GremlinResourcesCreateUpdateGremlinDatabaseHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for GremlinResources_deleteGremlinDatabase operation. */\nexport interface GremlinResourcesDeleteGremlinDatabaseHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for GremlinResources_updateGremlinDatabaseThroughput operation. */\nexport interface GremlinResourcesUpdateGremlinDatabaseThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for GremlinResources_migrateGremlinDatabaseToAutoscale operation. */\nexport interface GremlinResourcesMigrateGremlinDatabaseToAutoscaleHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for GremlinResources_migrateGremlinDatabaseToManualThroughput operation. */\nexport interface GremlinResourcesMigrateGremlinDatabaseToManualThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for GremlinResources_createUpdateGremlinGraph operation. */\nexport interface GremlinResourcesCreateUpdateGremlinGraphHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for GremlinResources_deleteGremlinGraph operation. */\nexport interface GremlinResourcesDeleteGremlinGraphHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for GremlinResources_updateGremlinGraphThroughput operation. */\nexport interface GremlinResourcesUpdateGremlinGraphThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for GremlinResources_migrateGremlinGraphToAutoscale operation. */\nexport interface GremlinResourcesMigrateGremlinGraphToAutoscaleHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for GremlinResources_migrateGremlinGraphToManualThroughput operation. */\nexport interface GremlinResourcesMigrateGremlinGraphToManualThroughputHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for Service_create operation. */\nexport interface ServiceCreateHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Defines headers for Service_delete operation. */\nexport interface ServiceDeleteHeaders {\n  /** URI to poll for completion status. */\n  azureAsyncOperation?: string;\n  /** URI to poll for completion status. */\n  location?: string;\n}\n\n/** Known values of {@link DatabaseAccountKind} that the service accepts. */\nexport enum KnownDatabaseAccountKind {\n  /** GlobalDocumentDB */\n  GlobalDocumentDB = \"GlobalDocumentDB\",\n  /** MongoDB */\n  MongoDB = \"MongoDB\",\n  /** Parse */\n  Parse = \"Parse\"\n}\n\n/**\n * Defines values for DatabaseAccountKind. \\\n * {@link KnownDatabaseAccountKind} can be used interchangeably with DatabaseAccountKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **GlobalDocumentDB** \\\n * **MongoDB** \\\n * **Parse**\n */\nexport type DatabaseAccountKind = string;\n\n/** Known values of {@link ConnectorOffer} that the service accepts. */\nexport enum KnownConnectorOffer {\n  /** Small */\n  Small = \"Small\"\n}\n\n/**\n * Defines values for ConnectorOffer. \\\n * {@link KnownConnectorOffer} can be used interchangeably with ConnectorOffer,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Small**\n */\nexport type ConnectorOffer = string;\n\n/** Known values of {@link PublicNetworkAccess} that the service accepts. */\nexport enum KnownPublicNetworkAccess {\n  /** Enabled */\n  Enabled = \"Enabled\",\n  /** Disabled */\n  Disabled = \"Disabled\"\n}\n\n/**\n * Defines values for PublicNetworkAccess. \\\n * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Enabled** \\\n * **Disabled**\n */\nexport type PublicNetworkAccess = string;\n\n/** Known values of {@link ServerVersion} that the service accepts. */\nexport enum KnownServerVersion {\n  /** Three2 */\n  Three2 = \"3.2\",\n  /** Three6 */\n  Three6 = \"3.6\",\n  /** Four0 */\n  Four0 = \"4.0\",\n  /** Four2 */\n  Four2 = \"4.2\"\n}\n\n/**\n * Defines values for ServerVersion. \\\n * {@link KnownServerVersion} can be used interchangeably with ServerVersion,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **3.2** \\\n * **3.6** \\\n * **4.0** \\\n * **4.2**\n */\nexport type ServerVersion = string;\n\n/** Known values of {@link AnalyticalStorageSchemaType} that the service accepts. */\nexport enum KnownAnalyticalStorageSchemaType {\n  /** WellDefined */\n  WellDefined = \"WellDefined\",\n  /** FullFidelity */\n  FullFidelity = \"FullFidelity\"\n}\n\n/**\n * Defines values for AnalyticalStorageSchemaType. \\\n * {@link KnownAnalyticalStorageSchemaType} can be used interchangeably with AnalyticalStorageSchemaType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **WellDefined** \\\n * **FullFidelity**\n */\nexport type AnalyticalStorageSchemaType = string;\n\n/** Known values of {@link CreateMode} that the service accepts. */\nexport enum KnownCreateMode {\n  /** Default */\n  Default = \"Default\",\n  /** Restore */\n  Restore = \"Restore\"\n}\n\n/**\n * Defines values for CreateMode. \\\n * {@link KnownCreateMode} can be used interchangeably with CreateMode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Default** \\\n * **Restore**\n */\nexport type CreateMode = string;\n\n/** Known values of {@link RestoreMode} that the service accepts. */\nexport enum KnownRestoreMode {\n  /** PointInTime */\n  PointInTime = \"PointInTime\"\n}\n\n/**\n * Defines values for RestoreMode. \\\n * {@link KnownRestoreMode} can be used interchangeably with RestoreMode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **PointInTime**\n */\nexport type RestoreMode = string;\n\n/** Known values of {@link BackupPolicyType} that the service accepts. */\nexport enum KnownBackupPolicyType {\n  /** Periodic */\n  Periodic = \"Periodic\",\n  /** Continuous */\n  Continuous = \"Continuous\"\n}\n\n/**\n * Defines values for BackupPolicyType. \\\n * {@link KnownBackupPolicyType} can be used interchangeably with BackupPolicyType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Periodic** \\\n * **Continuous**\n */\nexport type BackupPolicyType = string;\n\n/** Known values of {@link BackupPolicyMigrationStatus} that the service accepts. */\nexport enum KnownBackupPolicyMigrationStatus {\n  /** Invalid */\n  Invalid = \"Invalid\",\n  /** InProgress */\n  InProgress = \"InProgress\",\n  /** Completed */\n  Completed = \"Completed\",\n  /** Failed */\n  Failed = \"Failed\"\n}\n\n/**\n * Defines values for BackupPolicyMigrationStatus. \\\n * {@link KnownBackupPolicyMigrationStatus} can be used interchangeably with BackupPolicyMigrationStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Invalid** \\\n * **InProgress** \\\n * **Completed** \\\n * **Failed**\n */\nexport type BackupPolicyMigrationStatus = string;\n\n/** Known values of {@link MinimalTlsVersion} that the service accepts. */\nexport enum KnownMinimalTlsVersion {\n  /** Tls */\n  Tls = \"Tls\",\n  /** Tls11 */\n  Tls11 = \"Tls11\",\n  /** Tls12 */\n  Tls12 = \"Tls12\"\n}\n\n/**\n * Defines values for MinimalTlsVersion. \\\n * {@link KnownMinimalTlsVersion} can be used interchangeably with MinimalTlsVersion,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Tls** \\\n * **Tls11** \\\n * **Tls12**\n */\nexport type MinimalTlsVersion = string;\n\n/** Known values of {@link CreatedByType} that the service accepts. */\nexport enum KnownCreatedByType {\n  /** User */\n  User = \"User\",\n  /** Application */\n  Application = \"Application\",\n  /** ManagedIdentity */\n  ManagedIdentity = \"ManagedIdentity\",\n  /** Key */\n  Key = \"Key\"\n}\n\n/**\n * Defines values for CreatedByType. \\\n * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **User** \\\n * **Application** \\\n * **ManagedIdentity** \\\n * **Key**\n */\nexport type CreatedByType = string;\n\n/** Known values of {@link KeyKind} that the service accepts. */\nexport enum KnownKeyKind {\n  /** Primary */\n  Primary = \"primary\",\n  /** Secondary */\n  Secondary = \"secondary\",\n  /** PrimaryReadonly */\n  PrimaryReadonly = \"primaryReadonly\",\n  /** SecondaryReadonly */\n  SecondaryReadonly = \"secondaryReadonly\"\n}\n\n/**\n * Defines values for KeyKind. \\\n * {@link KnownKeyKind} can be used interchangeably with KeyKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **primary** \\\n * **secondary** \\\n * **primaryReadonly** \\\n * **secondaryReadonly**\n */\nexport type KeyKind = string;\n\n/** Known values of {@link UnitType} that the service accepts. */\nexport enum KnownUnitType {\n  /** Count */\n  Count = \"Count\",\n  /** Bytes */\n  Bytes = \"Bytes\",\n  /** Seconds */\n  Seconds = \"Seconds\",\n  /** Percent */\n  Percent = \"Percent\",\n  /** CountPerSecond */\n  CountPerSecond = \"CountPerSecond\",\n  /** BytesPerSecond */\n  BytesPerSecond = \"BytesPerSecond\",\n  /** Milliseconds */\n  Milliseconds = \"Milliseconds\"\n}\n\n/**\n * Defines values for UnitType. \\\n * {@link KnownUnitType} can be used interchangeably with UnitType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Count** \\\n * **Bytes** \\\n * **Seconds** \\\n * **Percent** \\\n * **CountPerSecond** \\\n * **BytesPerSecond** \\\n * **Milliseconds**\n */\nexport type UnitType = string;\n\n/** Known values of {@link PrimaryAggregationType} that the service accepts. */\nexport enum KnownPrimaryAggregationType {\n  /** None */\n  None = \"None\",\n  /** Average */\n  Average = \"Average\",\n  /** Total */\n  Total = \"Total\",\n  /** Minimum */\n  Minimum = \"Minimum\",\n  /** Maximum */\n  Maximum = \"Maximum\",\n  /** Last */\n  Last = \"Last\"\n}\n\n/**\n * Defines values for PrimaryAggregationType. \\\n * {@link KnownPrimaryAggregationType} can be used interchangeably with PrimaryAggregationType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **None** \\\n * **Average** \\\n * **Total** \\\n * **Minimum** \\\n * **Maximum** \\\n * **Last**\n */\nexport type PrimaryAggregationType = string;\n\n/** Known values of {@link IndexingMode} that the service accepts. */\nexport enum KnownIndexingMode {\n  /** Consistent */\n  Consistent = \"consistent\",\n  /** Lazy */\n  Lazy = \"lazy\",\n  /** None */\n  None = \"none\"\n}\n\n/**\n * Defines values for IndexingMode. \\\n * {@link KnownIndexingMode} can be used interchangeably with IndexingMode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **consistent** \\\n * **lazy** \\\n * **none**\n */\nexport type IndexingMode = string;\n\n/** Known values of {@link DataType} that the service accepts. */\nexport enum KnownDataType {\n  /** String */\n  String = \"String\",\n  /** Number */\n  Number = \"Number\",\n  /** Point */\n  Point = \"Point\",\n  /** Polygon */\n  Polygon = \"Polygon\",\n  /** LineString */\n  LineString = \"LineString\",\n  /** MultiPolygon */\n  MultiPolygon = \"MultiPolygon\"\n}\n\n/**\n * Defines values for DataType. \\\n * {@link KnownDataType} can be used interchangeably with DataType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **String** \\\n * **Number** \\\n * **Point** \\\n * **Polygon** \\\n * **LineString** \\\n * **MultiPolygon**\n */\nexport type DataType = string;\n\n/** Known values of {@link IndexKind} that the service accepts. */\nexport enum KnownIndexKind {\n  /** Hash */\n  Hash = \"Hash\",\n  /** Range */\n  Range = \"Range\",\n  /** Spatial */\n  Spatial = \"Spatial\"\n}\n\n/**\n * Defines values for IndexKind. \\\n * {@link KnownIndexKind} can be used interchangeably with IndexKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Hash** \\\n * **Range** \\\n * **Spatial**\n */\nexport type IndexKind = string;\n\n/** Known values of {@link CompositePathSortOrder} that the service accepts. */\nexport enum KnownCompositePathSortOrder {\n  /** Ascending */\n  Ascending = \"ascending\",\n  /** Descending */\n  Descending = \"descending\"\n}\n\n/**\n * Defines values for CompositePathSortOrder. \\\n * {@link KnownCompositePathSortOrder} can be used interchangeably with CompositePathSortOrder,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **ascending** \\\n * **descending**\n */\nexport type CompositePathSortOrder = string;\n\n/** Known values of {@link SpatialType} that the service accepts. */\nexport enum KnownSpatialType {\n  /** Point */\n  Point = \"Point\",\n  /** LineString */\n  LineString = \"LineString\",\n  /** Polygon */\n  Polygon = \"Polygon\",\n  /** MultiPolygon */\n  MultiPolygon = \"MultiPolygon\"\n}\n\n/**\n * Defines values for SpatialType. \\\n * {@link KnownSpatialType} can be used interchangeably with SpatialType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Point** \\\n * **LineString** \\\n * **Polygon** \\\n * **MultiPolygon**\n */\nexport type SpatialType = string;\n\n/** Known values of {@link PartitionKind} that the service accepts. */\nexport enum KnownPartitionKind {\n  /** Hash */\n  Hash = \"Hash\",\n  /** Range */\n  Range = \"Range\",\n  /** MultiHash */\n  MultiHash = \"MultiHash\"\n}\n\n/**\n * Defines values for PartitionKind. \\\n * {@link KnownPartitionKind} can be used interchangeably with PartitionKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Hash** \\\n * **Range** \\\n * **MultiHash**\n */\nexport type PartitionKind = string;\n\n/** Known values of {@link ConflictResolutionMode} that the service accepts. */\nexport enum KnownConflictResolutionMode {\n  /** LastWriterWins */\n  LastWriterWins = \"LastWriterWins\",\n  /** Custom */\n  Custom = \"Custom\"\n}\n\n/**\n * Defines values for ConflictResolutionMode. \\\n * {@link KnownConflictResolutionMode} can be used interchangeably with ConflictResolutionMode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **LastWriterWins** \\\n * **Custom**\n */\nexport type ConflictResolutionMode = string;\n\n/** Known values of {@link TriggerType} that the service accepts. */\nexport enum KnownTriggerType {\n  /** Pre */\n  Pre = \"Pre\",\n  /** Post */\n  Post = \"Post\"\n}\n\n/**\n * Defines values for TriggerType. \\\n * {@link KnownTriggerType} can be used interchangeably with TriggerType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Pre** \\\n * **Post**\n */\nexport type TriggerType = string;\n\n/** Known values of {@link TriggerOperation} that the service accepts. */\nexport enum KnownTriggerOperation {\n  /** All */\n  All = \"All\",\n  /** Create */\n  Create = \"Create\",\n  /** Update */\n  Update = \"Update\",\n  /** Delete */\n  Delete = \"Delete\",\n  /** Replace */\n  Replace = \"Replace\"\n}\n\n/**\n * Defines values for TriggerOperation. \\\n * {@link KnownTriggerOperation} can be used interchangeably with TriggerOperation,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **All** \\\n * **Create** \\\n * **Update** \\\n * **Delete** \\\n * **Replace**\n */\nexport type TriggerOperation = string;\n\n/** Known values of {@link BackupStorageRedundancy} that the service accepts. */\nexport enum KnownBackupStorageRedundancy {\n  /** Geo */\n  Geo = \"Geo\",\n  /** Local */\n  Local = \"Local\",\n  /** Zone */\n  Zone = \"Zone\"\n}\n\n/**\n * Defines values for BackupStorageRedundancy. \\\n * {@link KnownBackupStorageRedundancy} can be used interchangeably with BackupStorageRedundancy,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Geo** \\\n * **Local** \\\n * **Zone**\n */\nexport type BackupStorageRedundancy = string;\n\n/** Known values of {@link ManagedCassandraProvisioningState} that the service accepts. */\nexport enum KnownManagedCassandraProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Failed */\n  Failed = \"Failed\",\n  /** Canceled */\n  Canceled = \"Canceled\"\n}\n\n/**\n * Defines values for ManagedCassandraProvisioningState. \\\n * {@link KnownManagedCassandraProvisioningState} can be used interchangeably with ManagedCassandraProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Failed** \\\n * **Canceled**\n */\nexport type ManagedCassandraProvisioningState = string;\n\n/** Known values of {@link AuthenticationMethod} that the service accepts. */\nexport enum KnownAuthenticationMethod {\n  /** None */\n  None = \"None\",\n  /** Cassandra */\n  Cassandra = \"Cassandra\"\n}\n\n/**\n * Defines values for AuthenticationMethod. \\\n * {@link KnownAuthenticationMethod} can be used interchangeably with AuthenticationMethod,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **None** \\\n * **Cassandra**\n */\nexport type AuthenticationMethod = string;\n\n/** Known values of {@link ManagedCassandraResourceIdentityType} that the service accepts. */\nexport enum KnownManagedCassandraResourceIdentityType {\n  /** SystemAssigned */\n  SystemAssigned = \"SystemAssigned\",\n  /** None */\n  None = \"None\"\n}\n\n/**\n * Defines values for ManagedCassandraResourceIdentityType. \\\n * {@link KnownManagedCassandraResourceIdentityType} can be used interchangeably with ManagedCassandraResourceIdentityType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SystemAssigned** \\\n * **None**\n */\nexport type ManagedCassandraResourceIdentityType = string;\n\n/** Known values of {@link ConnectionState} that the service accepts. */\nexport enum KnownConnectionState {\n  /** Unknown */\n  Unknown = \"Unknown\",\n  /** OK */\n  OK = \"OK\",\n  /** OperatorToDataCenterNetworkError */\n  OperatorToDataCenterNetworkError = \"OperatorToDataCenterNetworkError\",\n  /** DatacenterToDatacenterNetworkError */\n  DatacenterToDatacenterNetworkError = \"DatacenterToDatacenterNetworkError\",\n  /** InternalOperatorToDataCenterCertificateError */\n  InternalOperatorToDataCenterCertificateError = \"InternalOperatorToDataCenterCertificateError\",\n  /** InternalError */\n  InternalError = \"InternalError\"\n}\n\n/**\n * Defines values for ConnectionState. \\\n * {@link KnownConnectionState} can be used interchangeably with ConnectionState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Unknown** \\\n * **OK** \\\n * **OperatorToDataCenterNetworkError** \\\n * **DatacenterToDatacenterNetworkError** \\\n * **InternalOperatorToDataCenterCertificateError** \\\n * **InternalError**\n */\nexport type ConnectionState = string;\n\n/** Known values of {@link NodeState} that the service accepts. */\nexport enum KnownNodeState {\n  /** Normal */\n  Normal = \"Normal\",\n  /** Leaving */\n  Leaving = \"Leaving\",\n  /** Joining */\n  Joining = \"Joining\",\n  /** Moving */\n  Moving = \"Moving\",\n  /** Stopped */\n  Stopped = \"Stopped\"\n}\n\n/**\n * Defines values for NodeState. \\\n * {@link KnownNodeState} can be used interchangeably with NodeState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Normal** \\\n * **Leaving** \\\n * **Joining** \\\n * **Moving** \\\n * **Stopped**\n */\nexport type NodeState = string;\n\n/** Known values of {@link NotebookWorkspaceName} that the service accepts. */\nexport enum KnownNotebookWorkspaceName {\n  /** Default */\n  Default = \"default\"\n}\n\n/**\n * Defines values for NotebookWorkspaceName. \\\n * {@link KnownNotebookWorkspaceName} can be used interchangeably with NotebookWorkspaceName,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **default**\n */\nexport type NotebookWorkspaceName = string;\n\n/** Known values of {@link ApiType} that the service accepts. */\nexport enum KnownApiType {\n  /** MongoDB */\n  MongoDB = \"MongoDB\",\n  /** Gremlin */\n  Gremlin = \"Gremlin\",\n  /** Cassandra */\n  Cassandra = \"Cassandra\",\n  /** Table */\n  Table = \"Table\",\n  /** Sql */\n  Sql = \"Sql\",\n  /** GremlinV2 */\n  GremlinV2 = \"GremlinV2\"\n}\n\n/**\n * Defines values for ApiType. \\\n * {@link KnownApiType} can be used interchangeably with ApiType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **MongoDB** \\\n * **Gremlin** \\\n * **Cassandra** \\\n * **Table** \\\n * **Sql** \\\n * **GremlinV2**\n */\nexport type ApiType = string;\n\n/** Known values of {@link OperationType} that the service accepts. */\nexport enum KnownOperationType {\n  /** Create */\n  Create = \"Create\",\n  /** Replace */\n  Replace = \"Replace\",\n  /** Delete */\n  Delete = \"Delete\",\n  /** SystemOperation */\n  SystemOperation = \"SystemOperation\"\n}\n\n/**\n * Defines values for OperationType. \\\n * {@link KnownOperationType} can be used interchangeably with OperationType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Create** \\\n * **Replace** \\\n * **Delete** \\\n * **SystemOperation**\n */\nexport type OperationType = string;\n\n/** Known values of {@link ServiceSize} that the service accepts. */\nexport enum KnownServiceSize {\n  /** CosmosD4S */\n  CosmosD4S = \"Cosmos.D4s\",\n  /** CosmosD8S */\n  CosmosD8S = \"Cosmos.D8s\",\n  /** CosmosD16S */\n  CosmosD16S = \"Cosmos.D16s\"\n}\n\n/**\n * Defines values for ServiceSize. \\\n * {@link KnownServiceSize} can be used interchangeably with ServiceSize,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Cosmos.D4s** \\\n * **Cosmos.D8s** \\\n * **Cosmos.D16s**\n */\nexport type ServiceSize = string;\n\n/** Known values of {@link ServiceType} that the service accepts. */\nexport enum KnownServiceType {\n  /** SqlDedicatedGateway */\n  SqlDedicatedGateway = \"SqlDedicatedGateway\",\n  /** DataTransfer */\n  DataTransfer = \"DataTransfer\",\n  /** GraphAPICompute */\n  GraphAPICompute = \"GraphAPICompute\",\n  /** MaterializedViewsBuilder */\n  MaterializedViewsBuilder = \"MaterializedViewsBuilder\"\n}\n\n/**\n * Defines values for ServiceType. \\\n * {@link KnownServiceType} can be used interchangeably with ServiceType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SqlDedicatedGateway** \\\n * **DataTransfer** \\\n * **GraphAPICompute** \\\n * **MaterializedViewsBuilder**\n */\nexport type ServiceType = string;\n\n/** Known values of {@link ServiceStatus} that the service accepts. */\nexport enum KnownServiceStatus {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Running */\n  Running = \"Running\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Error */\n  Error = \"Error\",\n  /** Stopped */\n  Stopped = \"Stopped\"\n}\n\n/**\n * Defines values for ServiceStatus. \\\n * {@link KnownServiceStatus} can be used interchangeably with ServiceStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Running** \\\n * **Updating** \\\n * **Deleting** \\\n * **Error** \\\n * **Stopped**\n */\nexport type ServiceStatus = string;\n\n/** Known values of {@link NodeStatus} that the service accepts. */\nexport enum KnownNodeStatus {\n  /** Up */\n  Up = \"Up\",\n  /** Down */\n  Down = \"Down\"\n}\n\n/**\n * Defines values for NodeStatus. \\\n * {@link KnownNodeStatus} can be used interchangeably with NodeStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Up** \\\n * **Down**\n */\nexport type NodeStatus = string;\n/** Defines values for ResourceIdentityType. */\nexport type ResourceIdentityType =\n  | \"SystemAssigned\"\n  | \"UserAssigned\"\n  | \"SystemAssigned,UserAssigned\"\n  | \"None\";\n/** Defines values for DefaultConsistencyLevel. */\nexport type DefaultConsistencyLevel =\n  | \"Eventual\"\n  | \"Session\"\n  | \"BoundedStaleness\"\n  | \"Strong\"\n  | \"ConsistentPrefix\";\n/** Defines values for NetworkAclBypass. */\nexport type NetworkAclBypass = \"None\" | \"AzureServices\";\n/** Defines values for MongoRoleDefinitionType. */\nexport type MongoRoleDefinitionType = \"BuiltInRole\" | \"CustomRole\";\n/** Defines values for RoleDefinitionType. */\nexport type RoleDefinitionType = \"BuiltInRole\" | \"CustomRole\";\n\n/** Optional parameters. */\nexport interface DatabaseAccountsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type DatabaseAccountsGetResponse = DatabaseAccountGetResults;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type DatabaseAccountsUpdateResponse = DatabaseAccountGetResults;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type DatabaseAccountsCreateOrUpdateResponse = DatabaseAccountGetResults;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the delete operation. */\nexport type DatabaseAccountsDeleteResponse = DatabaseAccountsDeleteHeaders;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsFailoverPriorityChangeOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the failoverPriorityChange operation. */\nexport type DatabaseAccountsFailoverPriorityChangeResponse = DatabaseAccountsFailoverPriorityChangeHeaders;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type DatabaseAccountsListResponse = DatabaseAccountsListResult;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type DatabaseAccountsListByResourceGroupResponse = DatabaseAccountsListResult;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsListKeysOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listKeys operation. */\nexport type DatabaseAccountsListKeysResponse = DatabaseAccountListKeysResult;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsListConnectionStringsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listConnectionStrings operation. */\nexport type DatabaseAccountsListConnectionStringsResponse = DatabaseAccountListConnectionStringsResult;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsOfflineRegionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface DatabaseAccountsOnlineRegionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface DatabaseAccountsGetReadOnlyKeysOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getReadOnlyKeys operation. */\nexport type DatabaseAccountsGetReadOnlyKeysResponse = DatabaseAccountListReadOnlyKeysResult;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsListReadOnlyKeysOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listReadOnlyKeys operation. */\nexport type DatabaseAccountsListReadOnlyKeysResponse = DatabaseAccountListReadOnlyKeysResult;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsRegenerateKeyOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface DatabaseAccountsCheckNameExistsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the checkNameExists operation. */\nexport type DatabaseAccountsCheckNameExistsResponse = {\n  body: boolean;\n};\n\n/** Optional parameters. */\nexport interface DatabaseAccountsListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type DatabaseAccountsListMetricsResponse = MetricListResult;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsListUsagesOptionalParams\n  extends coreClient.OperationOptions {\n  /** An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). */\n  filter?: string;\n}\n\n/** Contains response data for the listUsages operation. */\nexport type DatabaseAccountsListUsagesResponse = UsagesResult;\n\n/** Optional parameters. */\nexport interface DatabaseAccountsListMetricDefinitionsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetricDefinitions operation. */\nexport type DatabaseAccountsListMetricDefinitionsResponse = MetricDefinitionsListResult;\n\n/** Optional parameters. */\nexport interface OperationsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type OperationsListResponse = OperationListResult;\n\n/** Optional parameters. */\nexport interface OperationsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type OperationsListNextResponse = OperationListResult;\n\n/** Optional parameters. */\nexport interface DatabaseListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type DatabaseListMetricsResponse = MetricListResult;\n\n/** Optional parameters. */\nexport interface DatabaseListUsagesOptionalParams\n  extends coreClient.OperationOptions {\n  /** An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). */\n  filter?: string;\n}\n\n/** Contains response data for the listUsages operation. */\nexport type DatabaseListUsagesResponse = UsagesResult;\n\n/** Optional parameters. */\nexport interface DatabaseListMetricDefinitionsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetricDefinitions operation. */\nexport type DatabaseListMetricDefinitionsResponse = MetricDefinitionsListResult;\n\n/** Optional parameters. */\nexport interface CollectionListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type CollectionListMetricsResponse = MetricListResult;\n\n/** Optional parameters. */\nexport interface CollectionListUsagesOptionalParams\n  extends coreClient.OperationOptions {\n  /** An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). */\n  filter?: string;\n}\n\n/** Contains response data for the listUsages operation. */\nexport type CollectionListUsagesResponse = UsagesResult;\n\n/** Optional parameters. */\nexport interface CollectionListMetricDefinitionsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetricDefinitions operation. */\nexport type CollectionListMetricDefinitionsResponse = MetricDefinitionsListResult;\n\n/** Optional parameters. */\nexport interface CollectionRegionListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type CollectionRegionListMetricsResponse = MetricListResult;\n\n/** Optional parameters. */\nexport interface DatabaseAccountRegionListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type DatabaseAccountRegionListMetricsResponse = MetricListResult;\n\n/** Optional parameters. */\nexport interface PercentileSourceTargetListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type PercentileSourceTargetListMetricsResponse = PercentileMetricListResult;\n\n/** Optional parameters. */\nexport interface PercentileTargetListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type PercentileTargetListMetricsResponse = PercentileMetricListResult;\n\n/** Optional parameters. */\nexport interface PercentileListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type PercentileListMetricsResponse = PercentileMetricListResult;\n\n/** Optional parameters. */\nexport interface CollectionPartitionRegionListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type CollectionPartitionRegionListMetricsResponse = PartitionMetricListResult;\n\n/** Optional parameters. */\nexport interface CollectionPartitionListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type CollectionPartitionListMetricsResponse = PartitionMetricListResult;\n\n/** Optional parameters. */\nexport interface CollectionPartitionListUsagesOptionalParams\n  extends coreClient.OperationOptions {\n  /** An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). */\n  filter?: string;\n}\n\n/** Contains response data for the listUsages operation. */\nexport type CollectionPartitionListUsagesResponse = PartitionUsagesResult;\n\n/** Optional parameters. */\nexport interface PartitionKeyRangeIdListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type PartitionKeyRangeIdListMetricsResponse = PartitionMetricListResult;\n\n/** Optional parameters. */\nexport interface PartitionKeyRangeIdRegionListMetricsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMetrics operation. */\nexport type PartitionKeyRangeIdRegionListMetricsResponse = PartitionMetricListResult;\n\n/** Optional parameters. */\nexport interface SqlResourcesListSqlDatabasesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listSqlDatabases operation. */\nexport type SqlResourcesListSqlDatabasesResponse = SqlDatabaseListResult;\n\n/** Optional parameters. */\nexport interface SqlResourcesGetSqlDatabaseOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSqlDatabase operation. */\nexport type SqlResourcesGetSqlDatabaseResponse = SqlDatabaseGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesCreateUpdateSqlDatabaseOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateSqlDatabase operation. */\nexport type SqlResourcesCreateUpdateSqlDatabaseResponse = SqlDatabaseGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesDeleteSqlDatabaseOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteSqlDatabase operation. */\nexport type SqlResourcesDeleteSqlDatabaseResponse = SqlResourcesDeleteSqlDatabaseHeaders;\n\n/** Optional parameters. */\nexport interface SqlResourcesGetSqlDatabaseThroughputOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSqlDatabaseThroughput operation. */\nexport type SqlResourcesGetSqlDatabaseThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesUpdateSqlDatabaseThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the updateSqlDatabaseThroughput operation. */\nexport type SqlResourcesUpdateSqlDatabaseThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateSqlDatabaseToAutoscale operation. */\nexport type SqlResourcesMigrateSqlDatabaseToAutoscaleResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateSqlDatabaseToManualThroughput operation. */\nexport type SqlResourcesMigrateSqlDatabaseToManualThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesListSqlContainersOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listSqlContainers operation. */\nexport type SqlResourcesListSqlContainersResponse = SqlContainerListResult;\n\n/** Optional parameters. */\nexport interface SqlResourcesGetSqlContainerOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSqlContainer operation. */\nexport type SqlResourcesGetSqlContainerResponse = SqlContainerGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesCreateUpdateSqlContainerOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateSqlContainer operation. */\nexport type SqlResourcesCreateUpdateSqlContainerResponse = SqlContainerGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesDeleteSqlContainerOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteSqlContainer operation. */\nexport type SqlResourcesDeleteSqlContainerResponse = SqlResourcesDeleteSqlContainerHeaders;\n\n/** Optional parameters. */\nexport interface SqlResourcesGetSqlContainerThroughputOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSqlContainerThroughput operation. */\nexport type SqlResourcesGetSqlContainerThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesUpdateSqlContainerThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the updateSqlContainerThroughput operation. */\nexport type SqlResourcesUpdateSqlContainerThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateSqlContainerToAutoscale operation. */\nexport type SqlResourcesMigrateSqlContainerToAutoscaleResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateSqlContainerToManualThroughput operation. */\nexport type SqlResourcesMigrateSqlContainerToManualThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesListClientEncryptionKeysOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listClientEncryptionKeys operation. */\nexport type SqlResourcesListClientEncryptionKeysResponse = ClientEncryptionKeysListResult;\n\n/** Optional parameters. */\nexport interface SqlResourcesGetClientEncryptionKeyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getClientEncryptionKey operation. */\nexport type SqlResourcesGetClientEncryptionKeyResponse = ClientEncryptionKeyGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesCreateUpdateClientEncryptionKeyOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateClientEncryptionKey operation. */\nexport type SqlResourcesCreateUpdateClientEncryptionKeyResponse = ClientEncryptionKeyGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesListSqlStoredProceduresOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listSqlStoredProcedures operation. */\nexport type SqlResourcesListSqlStoredProceduresResponse = SqlStoredProcedureListResult;\n\n/** Optional parameters. */\nexport interface SqlResourcesGetSqlStoredProcedureOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSqlStoredProcedure operation. */\nexport type SqlResourcesGetSqlStoredProcedureResponse = SqlStoredProcedureGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateSqlStoredProcedure operation. */\nexport type SqlResourcesCreateUpdateSqlStoredProcedureResponse = SqlStoredProcedureGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesDeleteSqlStoredProcedureOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteSqlStoredProcedure operation. */\nexport type SqlResourcesDeleteSqlStoredProcedureResponse = SqlResourcesDeleteSqlStoredProcedureHeaders;\n\n/** Optional parameters. */\nexport interface SqlResourcesListSqlUserDefinedFunctionsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listSqlUserDefinedFunctions operation. */\nexport type SqlResourcesListSqlUserDefinedFunctionsResponse = SqlUserDefinedFunctionListResult;\n\n/** Optional parameters. */\nexport interface SqlResourcesGetSqlUserDefinedFunctionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSqlUserDefinedFunction operation. */\nexport type SqlResourcesGetSqlUserDefinedFunctionResponse = SqlUserDefinedFunctionGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateSqlUserDefinedFunction operation. */\nexport type SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse = SqlUserDefinedFunctionGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteSqlUserDefinedFunction operation. */\nexport type SqlResourcesDeleteSqlUserDefinedFunctionResponse = SqlResourcesDeleteSqlUserDefinedFunctionHeaders;\n\n/** Optional parameters. */\nexport interface SqlResourcesListSqlTriggersOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listSqlTriggers operation. */\nexport type SqlResourcesListSqlTriggersResponse = SqlTriggerListResult;\n\n/** Optional parameters. */\nexport interface SqlResourcesGetSqlTriggerOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSqlTrigger operation. */\nexport type SqlResourcesGetSqlTriggerResponse = SqlTriggerGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesCreateUpdateSqlTriggerOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateSqlTrigger operation. */\nexport type SqlResourcesCreateUpdateSqlTriggerResponse = SqlTriggerGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesDeleteSqlTriggerOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteSqlTrigger operation. */\nexport type SqlResourcesDeleteSqlTriggerResponse = SqlResourcesDeleteSqlTriggerHeaders;\n\n/** Optional parameters. */\nexport interface SqlResourcesGetSqlRoleDefinitionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSqlRoleDefinition operation. */\nexport type SqlResourcesGetSqlRoleDefinitionResponse = SqlRoleDefinitionGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateSqlRoleDefinition operation. */\nexport type SqlResourcesCreateUpdateSqlRoleDefinitionResponse = SqlRoleDefinitionGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesDeleteSqlRoleDefinitionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface SqlResourcesListSqlRoleDefinitionsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listSqlRoleDefinitions operation. */\nexport type SqlResourcesListSqlRoleDefinitionsResponse = SqlRoleDefinitionListResult;\n\n/** Optional parameters. */\nexport interface SqlResourcesGetSqlRoleAssignmentOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSqlRoleAssignment operation. */\nexport type SqlResourcesGetSqlRoleAssignmentResponse = SqlRoleAssignmentGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateSqlRoleAssignment operation. */\nexport type SqlResourcesCreateUpdateSqlRoleAssignmentResponse = SqlRoleAssignmentGetResults;\n\n/** Optional parameters. */\nexport interface SqlResourcesDeleteSqlRoleAssignmentOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface SqlResourcesListSqlRoleAssignmentsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listSqlRoleAssignments operation. */\nexport type SqlResourcesListSqlRoleAssignmentsResponse = SqlRoleAssignmentListResult;\n\n/** Optional parameters. */\nexport interface SqlResourcesRetrieveContinuousBackupInformationOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the retrieveContinuousBackupInformation operation. */\nexport type SqlResourcesRetrieveContinuousBackupInformationResponse = BackupInformation;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesListMongoDBDatabasesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMongoDBDatabases operation. */\nexport type MongoDBResourcesListMongoDBDatabasesResponse = MongoDBDatabaseListResult;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesGetMongoDBDatabaseOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getMongoDBDatabase operation. */\nexport type MongoDBResourcesGetMongoDBDatabaseResponse = MongoDBDatabaseGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateMongoDBDatabase operation. */\nexport type MongoDBResourcesCreateUpdateMongoDBDatabaseResponse = MongoDBDatabaseGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesDeleteMongoDBDatabaseOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteMongoDBDatabase operation. */\nexport type MongoDBResourcesDeleteMongoDBDatabaseResponse = MongoDBResourcesDeleteMongoDBDatabaseHeaders;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesGetMongoDBDatabaseThroughputOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getMongoDBDatabaseThroughput operation. */\nexport type MongoDBResourcesGetMongoDBDatabaseThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the updateMongoDBDatabaseThroughput operation. */\nexport type MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateMongoDBDatabaseToAutoscale operation. */\nexport type MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateMongoDBDatabaseToManualThroughput operation. */\nexport type MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesListMongoDBCollectionsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMongoDBCollections operation. */\nexport type MongoDBResourcesListMongoDBCollectionsResponse = MongoDBCollectionListResult;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesGetMongoDBCollectionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getMongoDBCollection operation. */\nexport type MongoDBResourcesGetMongoDBCollectionResponse = MongoDBCollectionGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateMongoDBCollection operation. */\nexport type MongoDBResourcesCreateUpdateMongoDBCollectionResponse = MongoDBCollectionGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesDeleteMongoDBCollectionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteMongoDBCollection operation. */\nexport type MongoDBResourcesDeleteMongoDBCollectionResponse = MongoDBResourcesDeleteMongoDBCollectionHeaders;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesGetMongoDBCollectionThroughputOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getMongoDBCollectionThroughput operation. */\nexport type MongoDBResourcesGetMongoDBCollectionThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the updateMongoDBCollectionThroughput operation. */\nexport type MongoDBResourcesUpdateMongoDBCollectionThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateMongoDBCollectionToAutoscale operation. */\nexport type MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateMongoDBCollectionToManualThroughput operation. */\nexport type MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesGetMongoRoleDefinitionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getMongoRoleDefinition operation. */\nexport type MongoDBResourcesGetMongoRoleDefinitionResponse = MongoRoleDefinitionGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateMongoRoleDefinition operation. */\nexport type MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse = MongoRoleDefinitionGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface MongoDBResourcesListMongoRoleDefinitionsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMongoRoleDefinitions operation. */\nexport type MongoDBResourcesListMongoRoleDefinitionsResponse = MongoRoleDefinitionListResult;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesGetMongoUserDefinitionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getMongoUserDefinition operation. */\nexport type MongoDBResourcesGetMongoUserDefinitionResponse = MongoUserDefinitionGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateMongoUserDefinition operation. */\nexport type MongoDBResourcesCreateUpdateMongoUserDefinitionResponse = MongoUserDefinitionGetResults;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesDeleteMongoUserDefinitionOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface MongoDBResourcesListMongoUserDefinitionsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listMongoUserDefinitions operation. */\nexport type MongoDBResourcesListMongoUserDefinitionsResponse = MongoUserDefinitionListResult;\n\n/** Optional parameters. */\nexport interface MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the retrieveContinuousBackupInformation operation. */\nexport type MongoDBResourcesRetrieveContinuousBackupInformationResponse = BackupInformation;\n\n/** Optional parameters. */\nexport interface TableResourcesListTablesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listTables operation. */\nexport type TableResourcesListTablesResponse = TableListResult;\n\n/** Optional parameters. */\nexport interface TableResourcesGetTableOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getTable operation. */\nexport type TableResourcesGetTableResponse = TableGetResults;\n\n/** Optional parameters. */\nexport interface TableResourcesCreateUpdateTableOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateTable operation. */\nexport type TableResourcesCreateUpdateTableResponse = TableGetResults;\n\n/** Optional parameters. */\nexport interface TableResourcesDeleteTableOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteTable operation. */\nexport type TableResourcesDeleteTableResponse = TableResourcesDeleteTableHeaders;\n\n/** Optional parameters. */\nexport interface TableResourcesGetTableThroughputOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getTableThroughput operation. */\nexport type TableResourcesGetTableThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface TableResourcesUpdateTableThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the updateTableThroughput operation. */\nexport type TableResourcesUpdateTableThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface TableResourcesMigrateTableToAutoscaleOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateTableToAutoscale operation. */\nexport type TableResourcesMigrateTableToAutoscaleResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface TableResourcesMigrateTableToManualThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateTableToManualThroughput operation. */\nexport type TableResourcesMigrateTableToManualThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface TableResourcesRetrieveContinuousBackupInformationOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the retrieveContinuousBackupInformation operation. */\nexport type TableResourcesRetrieveContinuousBackupInformationResponse = BackupInformation;\n\n/** Optional parameters. */\nexport interface CassandraResourcesListCassandraKeyspacesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listCassandraKeyspaces operation. */\nexport type CassandraResourcesListCassandraKeyspacesResponse = CassandraKeyspaceListResult;\n\n/** Optional parameters. */\nexport interface CassandraResourcesGetCassandraKeyspaceOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCassandraKeyspace operation. */\nexport type CassandraResourcesGetCassandraKeyspaceResponse = CassandraKeyspaceGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesCreateUpdateCassandraKeyspaceOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateCassandraKeyspace operation. */\nexport type CassandraResourcesCreateUpdateCassandraKeyspaceResponse = CassandraKeyspaceGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesDeleteCassandraKeyspaceOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteCassandraKeyspace operation. */\nexport type CassandraResourcesDeleteCassandraKeyspaceResponse = CassandraResourcesDeleteCassandraKeyspaceHeaders;\n\n/** Optional parameters. */\nexport interface CassandraResourcesGetCassandraKeyspaceThroughputOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCassandraKeyspaceThroughput operation. */\nexport type CassandraResourcesGetCassandraKeyspaceThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesUpdateCassandraKeyspaceThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the updateCassandraKeyspaceThroughput operation. */\nexport type CassandraResourcesUpdateCassandraKeyspaceThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateCassandraKeyspaceToAutoscale operation. */\nexport type CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateCassandraKeyspaceToManualThroughput operation. */\nexport type CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesListCassandraTablesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listCassandraTables operation. */\nexport type CassandraResourcesListCassandraTablesResponse = CassandraTableListResult;\n\n/** Optional parameters. */\nexport interface CassandraResourcesGetCassandraTableOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCassandraTable operation. */\nexport type CassandraResourcesGetCassandraTableResponse = CassandraTableGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesCreateUpdateCassandraTableOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateCassandraTable operation. */\nexport type CassandraResourcesCreateUpdateCassandraTableResponse = CassandraTableGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesDeleteCassandraTableOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteCassandraTable operation. */\nexport type CassandraResourcesDeleteCassandraTableResponse = CassandraResourcesDeleteCassandraTableHeaders;\n\n/** Optional parameters. */\nexport interface CassandraResourcesGetCassandraTableThroughputOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCassandraTableThroughput operation. */\nexport type CassandraResourcesGetCassandraTableThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesUpdateCassandraTableThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the updateCassandraTableThroughput operation. */\nexport type CassandraResourcesUpdateCassandraTableThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesMigrateCassandraTableToAutoscaleOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateCassandraTableToAutoscale operation. */\nexport type CassandraResourcesMigrateCassandraTableToAutoscaleResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface CassandraResourcesMigrateCassandraTableToManualThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateCassandraTableToManualThroughput operation. */\nexport type CassandraResourcesMigrateCassandraTableToManualThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesListGremlinDatabasesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listGremlinDatabases operation. */\nexport type GremlinResourcesListGremlinDatabasesResponse = GremlinDatabaseListResult;\n\n/** Optional parameters. */\nexport interface GremlinResourcesGetGremlinDatabaseOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getGremlinDatabase operation. */\nexport type GremlinResourcesGetGremlinDatabaseResponse = GremlinDatabaseGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateGremlinDatabase operation. */\nexport type GremlinResourcesCreateUpdateGremlinDatabaseResponse = GremlinDatabaseGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesDeleteGremlinDatabaseOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteGremlinDatabase operation. */\nexport type GremlinResourcesDeleteGremlinDatabaseResponse = GremlinResourcesDeleteGremlinDatabaseHeaders;\n\n/** Optional parameters. */\nexport interface GremlinResourcesGetGremlinDatabaseThroughputOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getGremlinDatabaseThroughput operation. */\nexport type GremlinResourcesGetGremlinDatabaseThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the updateGremlinDatabaseThroughput operation. */\nexport type GremlinResourcesUpdateGremlinDatabaseThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesMigrateGremlinDatabaseToAutoscaleOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateGremlinDatabaseToAutoscale operation. */\nexport type GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesMigrateGremlinDatabaseToManualThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateGremlinDatabaseToManualThroughput operation. */\nexport type GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesListGremlinGraphsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listGremlinGraphs operation. */\nexport type GremlinResourcesListGremlinGraphsResponse = GremlinGraphListResult;\n\n/** Optional parameters. */\nexport interface GremlinResourcesGetGremlinGraphOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getGremlinGraph operation. */\nexport type GremlinResourcesGetGremlinGraphResponse = GremlinGraphGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesCreateUpdateGremlinGraphOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdateGremlinGraph operation. */\nexport type GremlinResourcesCreateUpdateGremlinGraphResponse = GremlinGraphGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesDeleteGremlinGraphOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the deleteGremlinGraph operation. */\nexport type GremlinResourcesDeleteGremlinGraphResponse = GremlinResourcesDeleteGremlinGraphHeaders;\n\n/** Optional parameters. */\nexport interface GremlinResourcesGetGremlinGraphThroughputOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getGremlinGraphThroughput operation. */\nexport type GremlinResourcesGetGremlinGraphThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesUpdateGremlinGraphThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the updateGremlinGraphThroughput operation. */\nexport type GremlinResourcesUpdateGremlinGraphThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesMigrateGremlinGraphToAutoscaleOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateGremlinGraphToAutoscale operation. */\nexport type GremlinResourcesMigrateGremlinGraphToAutoscaleResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesMigrateGremlinGraphToManualThroughputOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the migrateGremlinGraphToManualThroughput operation. */\nexport type GremlinResourcesMigrateGremlinGraphToManualThroughputResponse = ThroughputSettingsGetResults;\n\n/** Optional parameters. */\nexport interface GremlinResourcesRetrieveContinuousBackupInformationOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the retrieveContinuousBackupInformation operation. */\nexport type GremlinResourcesRetrieveContinuousBackupInformationResponse = BackupInformation;\n\n/** Optional parameters. */\nexport interface LocationsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type LocationsListResponse = LocationListResult;\n\n/** Optional parameters. */\nexport interface LocationsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type LocationsGetResponse = LocationGetResult;\n\n/** Optional parameters. */\nexport interface CassandraClustersListBySubscriptionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBySubscription operation. */\nexport type CassandraClustersListBySubscriptionResponse = ListClusters;\n\n/** Optional parameters. */\nexport interface CassandraClustersListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type CassandraClustersListByResourceGroupResponse = ListClusters;\n\n/** Optional parameters. */\nexport interface CassandraClustersGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type CassandraClustersGetResponse = ClusterResource;\n\n/** Optional parameters. */\nexport interface CassandraClustersDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface CassandraClustersCreateUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdate operation. */\nexport type CassandraClustersCreateUpdateResponse = ClusterResource;\n\n/** Optional parameters. */\nexport interface CassandraClustersUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type CassandraClustersUpdateResponse = ClusterResource;\n\n/** Optional parameters. */\nexport interface CassandraClustersInvokeCommandOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the invokeCommand operation. */\nexport type CassandraClustersInvokeCommandResponse = CommandOutput;\n\n/** Optional parameters. */\nexport interface CassandraClustersDeallocateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface CassandraClustersStartOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface CassandraClustersStatusOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the status operation. */\nexport type CassandraClustersStatusResponse = CassandraClusterPublicStatus;\n\n/** Optional parameters. */\nexport interface CassandraDataCentersListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type CassandraDataCentersListResponse = ListDataCenters;\n\n/** Optional parameters. */\nexport interface CassandraDataCentersGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type CassandraDataCentersGetResponse = DataCenterResource;\n\n/** Optional parameters. */\nexport interface CassandraDataCentersDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface CassandraDataCentersCreateUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createUpdate operation. */\nexport type CassandraDataCentersCreateUpdateResponse = DataCenterResource;\n\n/** Optional parameters. */\nexport interface CassandraDataCentersUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type CassandraDataCentersUpdateResponse = DataCenterResource;\n\n/** Optional parameters. */\nexport interface NotebookWorkspacesListByDatabaseAccountOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByDatabaseAccount operation. */\nexport type NotebookWorkspacesListByDatabaseAccountResponse = NotebookWorkspaceListResult;\n\n/** Optional parameters. */\nexport interface NotebookWorkspacesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type NotebookWorkspacesGetResponse = NotebookWorkspace;\n\n/** Optional parameters. */\nexport interface NotebookWorkspacesCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type NotebookWorkspacesCreateOrUpdateResponse = NotebookWorkspace;\n\n/** Optional parameters. */\nexport interface NotebookWorkspacesDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface NotebookWorkspacesListConnectionInfoOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listConnectionInfo operation. */\nexport type NotebookWorkspacesListConnectionInfoResponse = NotebookWorkspaceConnectionInfoResult;\n\n/** Optional parameters. */\nexport interface NotebookWorkspacesRegenerateAuthTokenOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface NotebookWorkspacesStartOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsListByDatabaseAccountOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByDatabaseAccount operation. */\nexport type PrivateEndpointConnectionsListByDatabaseAccountResponse = PrivateEndpointConnectionListResult;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PrivateLinkResourcesListByDatabaseAccountOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByDatabaseAccount operation. */\nexport type PrivateLinkResourcesListByDatabaseAccountResponse = PrivateLinkResourceListResult;\n\n/** Optional parameters. */\nexport interface PrivateLinkResourcesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PrivateLinkResourcesGetResponse = PrivateLinkResource;\n\n/** Optional parameters. */\nexport interface RestorableDatabaseAccountsListByLocationOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByLocation operation. */\nexport type RestorableDatabaseAccountsListByLocationResponse = RestorableDatabaseAccountsListResult;\n\n/** Optional parameters. */\nexport interface RestorableDatabaseAccountsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type RestorableDatabaseAccountsListResponse = RestorableDatabaseAccountsListResult;\n\n/** Optional parameters. */\nexport interface RestorableDatabaseAccountsGetByLocationOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getByLocation operation. */\nexport type RestorableDatabaseAccountsGetByLocationResponse = RestorableDatabaseAccountGetResult;\n\n/** Optional parameters. */\nexport interface RestorableSqlDatabasesListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type RestorableSqlDatabasesListResponse = RestorableSqlDatabasesListResult;\n\n/** Optional parameters. */\nexport interface RestorableSqlContainersListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The resource ID of the SQL database. */\n  restorableSqlDatabaseRid?: string;\n  /** Restorable Sql containers event feed start time. */\n  startTime?: string;\n  /** Restorable Sql containers event feed end time. */\n  endTime?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type RestorableSqlContainersListResponse = RestorableSqlContainersListResult;\n\n/** Optional parameters. */\nexport interface RestorableSqlResourcesListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The location where the restorable resources are located. */\n  restoreLocation?: string;\n  /** The timestamp when the restorable resources existed. */\n  restoreTimestampInUtc?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type RestorableSqlResourcesListResponse = RestorableSqlResourcesListResult;\n\n/** Optional parameters. */\nexport interface RestorableMongodbDatabasesListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type RestorableMongodbDatabasesListResponse = RestorableMongodbDatabasesListResult;\n\n/** Optional parameters. */\nexport interface RestorableMongodbCollectionsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** Restorable MongoDB collections event feed start time. */\n  startTime?: string;\n  /** Restorable MongoDB collections event feed end time. */\n  endTime?: string;\n  /** The resource ID of the MongoDB database. */\n  restorableMongodbDatabaseRid?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type RestorableMongodbCollectionsListResponse = RestorableMongodbCollectionsListResult;\n\n/** Optional parameters. */\nexport interface RestorableMongodbResourcesListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The location where the restorable resources are located. */\n  restoreLocation?: string;\n  /** The timestamp when the restorable resources existed. */\n  restoreTimestampInUtc?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type RestorableMongodbResourcesListResponse = RestorableMongodbResourcesListResult;\n\n/** Optional parameters. */\nexport interface RestorableGremlinDatabasesListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type RestorableGremlinDatabasesListResponse = RestorableGremlinDatabasesListResult;\n\n/** Optional parameters. */\nexport interface RestorableGremlinGraphsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** Restorable Gremlin graphs event feed start time. */\n  startTime?: string;\n  /** Restorable Gremlin graphs event feed end time. */\n  endTime?: string;\n  /** The resource ID of the Gremlin database. */\n  restorableGremlinDatabaseRid?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type RestorableGremlinGraphsListResponse = RestorableGremlinGraphsListResult;\n\n/** Optional parameters. */\nexport interface RestorableGremlinResourcesListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The location where the restorable resources are located. */\n  restoreLocation?: string;\n  /** The timestamp when the restorable resources existed. */\n  restoreTimestampInUtc?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type RestorableGremlinResourcesListResponse = RestorableGremlinResourcesListResult;\n\n/** Optional parameters. */\nexport interface RestorableTablesListOptionalParams\n  extends coreClient.OperationOptions {\n  /** Restorable Tables event feed start time. */\n  startTime?: string;\n  /** Restorable Tables event feed end time. */\n  endTime?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type RestorableTablesListResponse = RestorableTablesListResult;\n\n/** Optional parameters. */\nexport interface RestorableTableResourcesListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The location where the restorable resources are located. */\n  restoreLocation?: string;\n  /** The timestamp when the restorable resources existed. */\n  restoreTimestampInUtc?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type RestorableTableResourcesListResponse = RestorableTableResourcesListResult;\n\n/** Optional parameters. */\nexport interface ServiceListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type ServiceListResponse = ServiceResourceListResult;\n\n/** Optional parameters. */\nexport interface ServiceCreateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type ServiceCreateResponse = ServiceResource;\n\n/** Optional parameters. */\nexport interface ServiceGetOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type ServiceGetResponse = ServiceResource;\n\n/** Optional parameters. */\nexport interface ServiceDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface CosmosDBManagementClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** server parameter */\n  $host?: string;\n  /** Api Version */\n  apiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const ManagedServiceIdentity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ManagedServiceIdentity\",\n    modelProperties: {\n      principalId: {\n        serializedName: \"principalId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tenantId: {\n        serializedName: \"tenantId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SystemAssigned\",\n            \"UserAssigned\",\n            \"SystemAssigned,UserAssigned\",\n            \"None\"\n          ]\n        }\n      },\n      userAssignedIdentities: {\n        serializedName: \"userAssignedIdentities\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"Composite\",\n              className:\n                \"Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties\",\n    modelProperties: {\n      principalId: {\n        serializedName: \"principalId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      clientId: {\n        serializedName: \"clientId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IpAddressOrRange: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IpAddressOrRange\",\n    modelProperties: {\n      ipAddressOrRange: {\n        serializedName: \"ipAddressOrRange\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ConsistencyPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ConsistencyPolicy\",\n    modelProperties: {\n      defaultConsistencyLevel: {\n        serializedName: \"defaultConsistencyLevel\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Eventual\",\n            \"Session\",\n            \"BoundedStaleness\",\n            \"Strong\",\n            \"ConsistentPrefix\"\n          ]\n        }\n      },\n      maxStalenessPrefix: {\n        constraints: {\n          InclusiveMaximum: 2147483647,\n          InclusiveMinimum: 1\n        },\n        serializedName: \"maxStalenessPrefix\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxIntervalInSeconds: {\n        constraints: {\n          InclusiveMaximum: 86400,\n          InclusiveMinimum: 5\n        },\n        serializedName: \"maxIntervalInSeconds\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Capability: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Capability\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Location: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Location\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      locationName: {\n        serializedName: \"locationName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      documentEndpoint: {\n        serializedName: \"documentEndpoint\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      failoverPriority: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"failoverPriority\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isZoneRedundant: {\n        serializedName: \"isZoneRedundant\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const FailoverPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FailoverPolicy\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      locationName: {\n        serializedName: \"locationName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      failoverPriority: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"failoverPriority\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const VirtualNetworkRule: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"VirtualNetworkRule\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ignoreMissingVNetServiceEndpoint: {\n        serializedName: \"ignoreMissingVNetServiceEndpoint\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateEndpointProperty: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpointProperty\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateLinkServiceConnectionStateProperty: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateLinkServiceConnectionStateProperty\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      actionsRequired: {\n        serializedName: \"actionsRequired\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Resource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Resource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ApiProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiProperties\",\n    modelProperties: {\n      serverVersion: {\n        serializedName: \"serverVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyticalStorageConfiguration: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyticalStorageConfiguration\",\n    modelProperties: {\n      schemaType: {\n        serializedName: \"schemaType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestoreParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestoreParameters\",\n    modelProperties: {\n      restoreMode: {\n        serializedName: \"restoreMode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      restoreSource: {\n        serializedName: \"restoreSource\",\n        type: {\n          name: \"String\"\n        }\n      },\n      restoreTimestampInUtc: {\n        serializedName: \"restoreTimestampInUtc\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      databasesToRestore: {\n        serializedName: \"databasesToRestore\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DatabaseRestoreResource\"\n            }\n          }\n        }\n      },\n      gremlinDatabasesToRestore: {\n        serializedName: \"gremlinDatabasesToRestore\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"GremlinDatabaseRestoreResource\"\n            }\n          }\n        }\n      },\n      tablesToRestore: {\n        serializedName: \"tablesToRestore\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseRestoreResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseRestoreResource\",\n    modelProperties: {\n      databaseName: {\n        serializedName: \"databaseName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      collectionNames: {\n        serializedName: \"collectionNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinDatabaseRestoreResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinDatabaseRestoreResource\",\n    modelProperties: {\n      databaseName: {\n        serializedName: \"databaseName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      graphNames: {\n        serializedName: \"graphNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BackupPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BackupPolicy\",\n    uberParent: \"BackupPolicy\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      migrationState: {\n        serializedName: \"migrationState\",\n        type: {\n          name: \"Composite\",\n          className: \"BackupPolicyMigrationState\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupPolicyMigrationState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BackupPolicyMigrationState\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      targetType: {\n        serializedName: \"targetType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      startTime: {\n        serializedName: \"startTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const CorsPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CorsPolicy\",\n    modelProperties: {\n      allowedOrigins: {\n        serializedName: \"allowedOrigins\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedMethods: {\n        serializedName: \"allowedMethods\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedHeaders: {\n        serializedName: \"allowedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      exposedHeaders: {\n        serializedName: \"exposedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxAgeInSeconds: {\n        constraints: {\n          InclusiveMaximum: 2147483647,\n          InclusiveMinimum: 1\n        },\n        serializedName: \"maxAgeInSeconds\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Capacity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Capacity\",\n    modelProperties: {\n      totalThroughputLimit: {\n        constraints: {\n          InclusiveMinimum: -1\n        },\n        serializedName: \"totalThroughputLimit\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountKeysMetadata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountKeysMetadata\",\n    modelProperties: {\n      primaryMasterKey: {\n        serializedName: \"primaryMasterKey\",\n        type: {\n          name: \"Composite\",\n          className: \"AccountKeyMetadata\"\n        }\n      },\n      secondaryMasterKey: {\n        serializedName: \"secondaryMasterKey\",\n        type: {\n          name: \"Composite\",\n          className: \"AccountKeyMetadata\"\n        }\n      },\n      primaryReadonlyMasterKey: {\n        serializedName: \"primaryReadonlyMasterKey\",\n        type: {\n          name: \"Composite\",\n          className: \"AccountKeyMetadata\"\n        }\n      },\n      secondaryReadonlyMasterKey: {\n        serializedName: \"secondaryReadonlyMasterKey\",\n        type: {\n          name: \"Composite\",\n          className: \"AccountKeyMetadata\"\n        }\n      }\n    }\n  }\n};\n\nexport const AccountKeyMetadata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AccountKeyMetadata\",\n    modelProperties: {\n      generationTime: {\n        serializedName: \"generationTime\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SystemData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SystemData\",\n    modelProperties: {\n      createdBy: {\n        serializedName: \"createdBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdByType: {\n        serializedName: \"createdByType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdAt: {\n        serializedName: \"createdAt\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastModifiedBy: {\n        serializedName: \"lastModifiedBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModifiedByType: {\n        serializedName: \"lastModifiedByType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModifiedAt: {\n        serializedName: \"lastModifiedAt\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const ARMResourceProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ARMResourceProperties\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"ManagedServiceIdentity\"\n        }\n      },\n      consistencyPolicy: {\n        serializedName: \"properties.consistencyPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"ConsistencyPolicy\"\n        }\n      },\n      locations: {\n        serializedName: \"properties.locations\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Location\"\n            }\n          }\n        }\n      },\n      ipRules: {\n        serializedName: \"properties.ipRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IpAddressOrRange\"\n            }\n          }\n        }\n      },\n      isVirtualNetworkFilterEnabled: {\n        serializedName: \"properties.isVirtualNetworkFilterEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      enableAutomaticFailover: {\n        serializedName: \"properties.enableAutomaticFailover\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      capabilities: {\n        serializedName: \"properties.capabilities\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Capability\"\n            }\n          }\n        }\n      },\n      virtualNetworkRules: {\n        serializedName: \"properties.virtualNetworkRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"VirtualNetworkRule\"\n            }\n          }\n        }\n      },\n      enableMultipleWriteLocations: {\n        serializedName: \"properties.enableMultipleWriteLocations\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      enableCassandraConnector: {\n        serializedName: \"properties.enableCassandraConnector\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      connectorOffer: {\n        serializedName: \"properties.connectorOffer\",\n        type: {\n          name: \"String\"\n        }\n      },\n      disableKeyBasedMetadataWriteAccess: {\n        serializedName: \"properties.disableKeyBasedMetadataWriteAccess\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      keyVaultKeyUri: {\n        serializedName: \"properties.keyVaultKeyUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      defaultIdentity: {\n        serializedName: \"properties.defaultIdentity\",\n        type: {\n          name: \"String\"\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      enableFreeTier: {\n        serializedName: \"properties.enableFreeTier\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      apiProperties: {\n        serializedName: \"properties.apiProperties\",\n        type: {\n          name: \"Composite\",\n          className: \"ApiProperties\"\n        }\n      },\n      enableAnalyticalStorage: {\n        serializedName: \"properties.enableAnalyticalStorage\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      analyticalStorageConfiguration: {\n        serializedName: \"properties.analyticalStorageConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"AnalyticalStorageConfiguration\"\n        }\n      },\n      backupPolicy: {\n        serializedName: \"properties.backupPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"BackupPolicy\"\n        }\n      },\n      cors: {\n        serializedName: \"properties.cors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CorsPolicy\"\n            }\n          }\n        }\n      },\n      networkAclBypass: {\n        serializedName: \"properties.networkAclBypass\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"None\", \"AzureServices\"]\n        }\n      },\n      networkAclBypassResourceIds: {\n        serializedName: \"properties.networkAclBypassResourceIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      disableLocalAuth: {\n        serializedName: \"properties.disableLocalAuth\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      capacity: {\n        serializedName: \"properties.capacity\",\n        type: {\n          name: \"Composite\",\n          className: \"Capacity\"\n        }\n      },\n      keysMetadata: {\n        serializedName: \"properties.keysMetadata\",\n        type: {\n          name: \"Composite\",\n          className: \"DatabaseAccountKeysMetadata\"\n        }\n      },\n      enablePartitionMerge: {\n        serializedName: \"properties.enablePartitionMerge\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      minimalTlsVersion: {\n        serializedName: \"properties.minimalTlsVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FailoverPolicies: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FailoverPolicies\",\n    modelProperties: {\n      failoverPolicies: {\n        serializedName: \"failoverPolicies\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FailoverPolicy\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DatabaseAccountGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountListReadOnlyKeysResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountListReadOnlyKeysResult\",\n    modelProperties: {\n      primaryReadonlyMasterKey: {\n        serializedName: \"primaryReadonlyMasterKey\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      secondaryReadonlyMasterKey: {\n        serializedName: \"secondaryReadonlyMasterKey\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountListConnectionStringsResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountListConnectionStringsResult\",\n    modelProperties: {\n      connectionStrings: {\n        serializedName: \"connectionStrings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DatabaseAccountConnectionString\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountConnectionString: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountConnectionString\",\n    modelProperties: {\n      connectionString: {\n        serializedName: \"connectionString\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegionForOnlineOffline: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegionForOnlineOffline\",\n    modelProperties: {\n      region: {\n        serializedName: \"region\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountRegenerateKeyParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountRegenerateKeyParameters\",\n    modelProperties: {\n      keyKind: {\n        serializedName: \"keyKind\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Operation\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Operation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Operation\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      display: {\n        serializedName: \"display\",\n        type: {\n          name: \"Composite\",\n          className: \"OperationDisplay\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationDisplay: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationDisplay\",\n    modelProperties: {\n      provider: {\n        serializedName: \"Provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"Resource\",\n        type: {\n          name: \"String\"\n        }\n      },\n      operation: {\n        serializedName: \"Operation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"Description\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MetricListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MetricListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Metric\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Metric: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Metric\",\n    modelProperties: {\n      startTime: {\n        serializedName: \"startTime\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      endTime: {\n        serializedName: \"endTime\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      timeGrain: {\n        serializedName: \"timeGrain\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      unit: {\n        serializedName: \"unit\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"Composite\",\n          className: \"MetricName\"\n        }\n      },\n      metricValues: {\n        serializedName: \"metricValues\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MetricValue\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MetricName: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MetricName\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      localizedValue: {\n        serializedName: \"localizedValue\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MetricValue: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MetricValue\",\n    modelProperties: {\n      count: {\n        serializedName: \"_count\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      average: {\n        serializedName: \"average\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      maximum: {\n        serializedName: \"maximum\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      minimum: {\n        serializedName: \"minimum\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      timestamp: {\n        serializedName: \"timestamp\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PercentileMetricListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PercentileMetricListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PercentileMetric\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PercentileMetric: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PercentileMetric\",\n    modelProperties: {\n      startTime: {\n        serializedName: \"startTime\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      endTime: {\n        serializedName: \"endTime\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      timeGrain: {\n        serializedName: \"timeGrain\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      unit: {\n        serializedName: \"unit\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"Composite\",\n          className: \"MetricName\"\n        }\n      },\n      metricValues: {\n        serializedName: \"metricValues\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PercentileMetricValue\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PartitionMetricListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartitionMetricListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PartitionMetric\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const UsagesResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UsagesResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Usage\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Usage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Usage\",\n    modelProperties: {\n      unit: {\n        serializedName: \"unit\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"Composite\",\n          className: \"MetricName\"\n        }\n      },\n      quotaPeriod: {\n        serializedName: \"quotaPeriod\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      limit: {\n        serializedName: \"limit\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      currentValue: {\n        serializedName: \"currentValue\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartitionUsagesResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartitionUsagesResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PartitionUsage\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MetricDefinitionsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MetricDefinitionsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MetricDefinition\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MetricDefinition: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MetricDefinition\",\n    modelProperties: {\n      metricAvailabilities: {\n        serializedName: \"metricAvailabilities\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MetricAvailability\"\n            }\n          }\n        }\n      },\n      primaryAggregationType: {\n        serializedName: \"primaryAggregationType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      unit: {\n        serializedName: \"unit\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceUri: {\n        serializedName: \"resourceUri\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"Composite\",\n          className: \"MetricName\"\n        }\n      }\n    }\n  }\n};\n\nexport const MetricAvailability: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MetricAvailability\",\n    modelProperties: {\n      timeGrain: {\n        serializedName: \"timeGrain\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      retention: {\n        serializedName: \"retention\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlDatabaseListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlDatabaseListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SqlDatabaseGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlDatabaseResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlDatabaseResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtendedResourceProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtendedResourceProperties\",\n    modelProperties: {\n      rid: {\n        serializedName: \"_rid\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ts: {\n        serializedName: \"_ts\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      etag: {\n        serializedName: \"_etag\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OptionsResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OptionsResource\",\n    modelProperties: {\n      throughput: {\n        serializedName: \"throughput\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      autoscaleSettings: {\n        serializedName: \"autoscaleSettings\",\n        type: {\n          name: \"Composite\",\n          className: \"AutoscaleSettings\"\n        }\n      }\n    }\n  }\n};\n\nexport const AutoscaleSettings: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AutoscaleSettings\",\n    modelProperties: {\n      maxThroughput: {\n        serializedName: \"maxThroughput\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CreateUpdateOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateUpdateOptions\",\n    modelProperties: {\n      throughput: {\n        serializedName: \"throughput\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      autoscaleSettings: {\n        serializedName: \"autoscaleSettings\",\n        type: {\n          name: \"Composite\",\n          className: \"AutoscaleSettings\"\n        }\n      }\n    }\n  }\n};\n\nexport const ThroughputSettingsResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ThroughputSettingsResource\",\n    modelProperties: {\n      throughput: {\n        serializedName: \"throughput\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      autoscaleSettings: {\n        serializedName: \"autoscaleSettings\",\n        type: {\n          name: \"Composite\",\n          className: \"AutoscaleSettingsResource\"\n        }\n      },\n      minimumThroughput: {\n        serializedName: \"minimumThroughput\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      offerReplacePending: {\n        serializedName: \"offerReplacePending\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AutoscaleSettingsResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AutoscaleSettingsResource\",\n    modelProperties: {\n      maxThroughput: {\n        serializedName: \"maxThroughput\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      autoUpgradePolicy: {\n        serializedName: \"autoUpgradePolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"AutoUpgradePolicyResource\"\n        }\n      },\n      targetMaxThroughput: {\n        serializedName: \"targetMaxThroughput\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AutoUpgradePolicyResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AutoUpgradePolicyResource\",\n    modelProperties: {\n      throughputPolicy: {\n        serializedName: \"throughputPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"ThroughputPolicyResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const ThroughputPolicyResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ThroughputPolicyResource\",\n    modelProperties: {\n      isEnabled: {\n        serializedName: \"isEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      incrementPercent: {\n        serializedName: \"incrementPercent\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CloudError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CloudError\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorResponse\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlContainerListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlContainerListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SqlContainerGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlContainerResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlContainerResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      indexingPolicy: {\n        serializedName: \"indexingPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"IndexingPolicy\"\n        }\n      },\n      partitionKey: {\n        serializedName: \"partitionKey\",\n        type: {\n          name: \"Composite\",\n          className: \"ContainerPartitionKey\"\n        }\n      },\n      defaultTtl: {\n        serializedName: \"defaultTtl\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      uniqueKeyPolicy: {\n        serializedName: \"uniqueKeyPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"UniqueKeyPolicy\"\n        }\n      },\n      conflictResolutionPolicy: {\n        serializedName: \"conflictResolutionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"ConflictResolutionPolicy\"\n        }\n      },\n      clientEncryptionPolicy: {\n        serializedName: \"clientEncryptionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"ClientEncryptionPolicy\"\n        }\n      },\n      analyticalStorageTtl: {\n        serializedName: \"analyticalStorageTtl\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const IndexingPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexingPolicy\",\n    modelProperties: {\n      automatic: {\n        serializedName: \"automatic\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      indexingMode: {\n        defaultValue: \"consistent\",\n        serializedName: \"indexingMode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      includedPaths: {\n        serializedName: \"includedPaths\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IncludedPath\"\n            }\n          }\n        }\n      },\n      excludedPaths: {\n        serializedName: \"excludedPaths\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExcludedPath\"\n            }\n          }\n        }\n      },\n      compositeIndexes: {\n        serializedName: \"compositeIndexes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Sequence\",\n              element: {\n                type: {\n                  name: \"Composite\",\n                  className: \"CompositePath\"\n                }\n              }\n            }\n          }\n        }\n      },\n      spatialIndexes: {\n        serializedName: \"spatialIndexes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SpatialSpec\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IncludedPath: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IncludedPath\",\n    modelProperties: {\n      path: {\n        serializedName: \"path\",\n        type: {\n          name: \"String\"\n        }\n      },\n      indexes: {\n        serializedName: \"indexes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Indexes\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Indexes: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Indexes\",\n    modelProperties: {\n      dataType: {\n        defaultValue: \"String\",\n        serializedName: \"dataType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      precision: {\n        serializedName: \"precision\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      kind: {\n        defaultValue: \"Hash\",\n        serializedName: \"kind\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExcludedPath: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExcludedPath\",\n    modelProperties: {\n      path: {\n        serializedName: \"path\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompositePath: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompositePath\",\n    modelProperties: {\n      path: {\n        serializedName: \"path\",\n        type: {\n          name: \"String\"\n        }\n      },\n      order: {\n        serializedName: \"order\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SpatialSpec: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpatialSpec\",\n    modelProperties: {\n      path: {\n        serializedName: \"path\",\n        type: {\n          name: \"String\"\n        }\n      },\n      types: {\n        serializedName: \"types\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerPartitionKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerPartitionKey\",\n    modelProperties: {\n      paths: {\n        serializedName: \"paths\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      kind: {\n        defaultValue: \"Hash\",\n        serializedName: \"kind\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 2,\n          InclusiveMinimum: 1\n        },\n        serializedName: \"version\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      systemKey: {\n        serializedName: \"systemKey\",\n        readOnly: true,\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const UniqueKeyPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UniqueKeyPolicy\",\n    modelProperties: {\n      uniqueKeys: {\n        serializedName: \"uniqueKeys\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"UniqueKey\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const UniqueKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UniqueKey\",\n    modelProperties: {\n      paths: {\n        serializedName: \"paths\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ConflictResolutionPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ConflictResolutionPolicy\",\n    modelProperties: {\n      mode: {\n        defaultValue: \"LastWriterWins\",\n        serializedName: \"mode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      conflictResolutionPath: {\n        serializedName: \"conflictResolutionPath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      conflictResolutionProcedure: {\n        serializedName: \"conflictResolutionProcedure\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClientEncryptionPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClientEncryptionPolicy\",\n    modelProperties: {\n      includedPaths: {\n        serializedName: \"includedPaths\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ClientEncryptionIncludedPath\"\n            }\n          }\n        }\n      },\n      policyFormatVersion: {\n        constraints: {\n          InclusiveMaximum: 2,\n          InclusiveMinimum: 1\n        },\n        serializedName: \"policyFormatVersion\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClientEncryptionIncludedPath: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClientEncryptionIncludedPath\",\n    modelProperties: {\n      path: {\n        serializedName: \"path\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      clientEncryptionKeyId: {\n        serializedName: \"clientEncryptionKeyId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionType: {\n        serializedName: \"encryptionType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionAlgorithm: {\n        serializedName: \"encryptionAlgorithm\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClientEncryptionKeysListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClientEncryptionKeysListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ClientEncryptionKeyGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ClientEncryptionKeyResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClientEncryptionKeyResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionAlgorithm: {\n        serializedName: \"encryptionAlgorithm\",\n        type: {\n          name: \"String\"\n        }\n      },\n      wrappedDataEncryptionKey: {\n        serializedName: \"wrappedDataEncryptionKey\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      keyWrapMetadata: {\n        serializedName: \"keyWrapMetadata\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyWrapMetadata\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyWrapMetadata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyWrapMetadata\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      algorithm: {\n        serializedName: \"algorithm\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ARMProxyResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ARMProxyResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClientEncryptionKeyCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClientEncryptionKeyCreateUpdateParameters\",\n    modelProperties: {\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"ClientEncryptionKeyResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlStoredProcedureListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlStoredProcedureListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SqlStoredProcedureGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlStoredProcedureResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlStoredProcedureResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      body: {\n        serializedName: \"body\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlUserDefinedFunctionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlUserDefinedFunctionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SqlUserDefinedFunctionGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlUserDefinedFunctionResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlUserDefinedFunctionResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      body: {\n        serializedName: \"body\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlTriggerListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlTriggerListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SqlTriggerGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlTriggerResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlTriggerResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      body: {\n        serializedName: \"body\",\n        type: {\n          name: \"String\"\n        }\n      },\n      triggerType: {\n        serializedName: \"triggerType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      triggerOperation: {\n        serializedName: \"triggerOperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBDatabaseListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBDatabaseListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MongoDBDatabaseGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBDatabaseResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBDatabaseResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBCollectionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBCollectionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MongoDBCollectionGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBCollectionResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBCollectionResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      shardKey: {\n        serializedName: \"shardKey\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      indexes: {\n        serializedName: \"indexes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MongoIndex\"\n            }\n          }\n        }\n      },\n      analyticalStorageTtl: {\n        serializedName: \"analyticalStorageTtl\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoIndex: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoIndex\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        type: {\n          name: \"Composite\",\n          className: \"MongoIndexKeys\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"MongoIndexOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoIndexKeys: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoIndexKeys\",\n    modelProperties: {\n      keys: {\n        serializedName: \"keys\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MongoIndexOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoIndexOptions\",\n    modelProperties: {\n      expireAfterSeconds: {\n        serializedName: \"expireAfterSeconds\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      unique: {\n        serializedName: \"unique\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TableGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TableResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraKeyspaceListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraKeyspaceListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CassandraKeyspaceGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraKeyspaceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraKeyspaceResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraTableListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraTableListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CassandraTableGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraTableResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraTableResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      defaultTtl: {\n        serializedName: \"defaultTtl\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      schema: {\n        serializedName: \"schema\",\n        type: {\n          name: \"Composite\",\n          className: \"CassandraSchema\"\n        }\n      },\n      analyticalStorageTtl: {\n        serializedName: \"analyticalStorageTtl\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraSchema: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraSchema\",\n    modelProperties: {\n      columns: {\n        serializedName: \"columns\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Column\"\n            }\n          }\n        }\n      },\n      partitionKeys: {\n        serializedName: \"partitionKeys\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CassandraPartitionKey\"\n            }\n          }\n        }\n      },\n      clusterKeys: {\n        serializedName: \"clusterKeys\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ClusterKey\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Column: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Column\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraPartitionKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraPartitionKey\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClusterKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClusterKey\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      orderBy: {\n        serializedName: \"orderBy\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinDatabaseListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinDatabaseListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"GremlinDatabaseGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinDatabaseResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinDatabaseResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinGraphListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinGraphListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"GremlinGraphGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinGraphResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinGraphResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      indexingPolicy: {\n        serializedName: \"indexingPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"IndexingPolicy\"\n        }\n      },\n      partitionKey: {\n        serializedName: \"partitionKey\",\n        type: {\n          name: \"Composite\",\n          className: \"ContainerPartitionKey\"\n        }\n      },\n      defaultTtl: {\n        serializedName: \"defaultTtl\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      uniqueKeyPolicy: {\n        serializedName: \"uniqueKeyPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"UniqueKeyPolicy\"\n        }\n      },\n      conflictResolutionPolicy: {\n        serializedName: \"conflictResolutionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"ConflictResolutionPolicy\"\n        }\n      },\n      analyticalStorageTtl: {\n        serializedName: \"analyticalStorageTtl\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const LocationListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LocationListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LocationGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const LocationProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LocationProperties\",\n    modelProperties: {\n      supportsAvailabilityZone: {\n        serializedName: \"supportsAvailabilityZone\",\n        readOnly: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      isResidencyRestricted: {\n        serializedName: \"isResidencyRestricted\",\n        readOnly: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      backupStorageRedundancies: {\n        serializedName: \"backupStorageRedundancies\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListClusters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ListClusters\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ClusterResource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ClusterResourceProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClusterResourceProperties\",\n    modelProperties: {\n      provisioningState: {\n        serializedName: \"provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      },\n      restoreFromBackupId: {\n        serializedName: \"restoreFromBackupId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      delegatedManagementSubnetId: {\n        serializedName: \"delegatedManagementSubnetId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cassandraVersion: {\n        serializedName: \"cassandraVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clusterNameOverride: {\n        serializedName: \"clusterNameOverride\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authenticationMethod: {\n        serializedName: \"authenticationMethod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initialCassandraAdminPassword: {\n        serializedName: \"initialCassandraAdminPassword\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prometheusEndpoint: {\n        serializedName: \"prometheusEndpoint\",\n        type: {\n          name: \"Composite\",\n          className: \"SeedNode\"\n        }\n      },\n      repairEnabled: {\n        serializedName: \"repairEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      clientCertificates: {\n        serializedName: \"clientCertificates\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Certificate\"\n            }\n          }\n        }\n      },\n      externalGossipCertificates: {\n        serializedName: \"externalGossipCertificates\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Certificate\"\n            }\n          }\n        }\n      },\n      gossipCertificates: {\n        serializedName: \"gossipCertificates\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Certificate\"\n            }\n          }\n        }\n      },\n      externalSeedNodes: {\n        serializedName: \"externalSeedNodes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SeedNode\"\n            }\n          }\n        }\n      },\n      seedNodes: {\n        serializedName: \"seedNodes\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SeedNode\"\n            }\n          }\n        }\n      },\n      hoursBetweenBackups: {\n        serializedName: \"hoursBetweenBackups\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      deallocated: {\n        serializedName: \"deallocated\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      cassandraAuditLoggingEnabled: {\n        serializedName: \"cassandraAuditLoggingEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const SeedNode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SeedNode\",\n    modelProperties: {\n      ipAddress: {\n        serializedName: \"ipAddress\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Certificate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Certificate\",\n    modelProperties: {\n      pem: {\n        serializedName: \"pem\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ManagedCassandraARMResourceProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ManagedCassandraARMResourceProperties\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"ManagedCassandraManagedServiceIdentity\"\n        }\n      }\n    }\n  }\n};\n\nexport const ManagedCassandraManagedServiceIdentity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ManagedCassandraManagedServiceIdentity\",\n    modelProperties: {\n      principalId: {\n        serializedName: \"principalId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tenantId: {\n        serializedName: \"tenantId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommandPostBody: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommandPostBody\",\n    modelProperties: {\n      command: {\n        serializedName: \"command\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      cassandraStopStart: {\n        serializedName: \"cassandra-stop-start\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      readwrite: {\n        serializedName: \"readwrite\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommandOutput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommandOutput\",\n    modelProperties: {\n      commandOutput: {\n        serializedName: \"commandOutput\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ListDataCenters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ListDataCenters\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DataCenterResource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DataCenterResourceProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataCenterResourceProperties\",\n    modelProperties: {\n      provisioningState: {\n        serializedName: \"provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dataCenterLocation: {\n        serializedName: \"dataCenterLocation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      delegatedSubnetId: {\n        serializedName: \"delegatedSubnetId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeCount: {\n        serializedName: \"nodeCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      seedNodes: {\n        serializedName: \"seedNodes\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SeedNode\"\n            }\n          }\n        }\n      },\n      base64EncodedCassandraYamlFragment: {\n        serializedName: \"base64EncodedCassandraYamlFragment\",\n        type: {\n          name: \"String\"\n        }\n      },\n      managedDiskCustomerKeyUri: {\n        serializedName: \"managedDiskCustomerKeyUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      backupStorageCustomerKeyUri: {\n        serializedName: \"backupStorageCustomerKeyUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sku: {\n        serializedName: \"sku\",\n        type: {\n          name: \"String\"\n        }\n      },\n      diskSku: {\n        serializedName: \"diskSku\",\n        type: {\n          name: \"String\"\n        }\n      },\n      diskCapacity: {\n        serializedName: \"diskCapacity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      availabilityZone: {\n        serializedName: \"availabilityZone\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraClusterPublicStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraClusterPublicStatus\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"eTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      reaperStatus: {\n        serializedName: \"reaperStatus\",\n        type: {\n          name: \"Composite\",\n          className: \"ManagedCassandraReaperStatus\"\n        }\n      },\n      connectionErrors: {\n        serializedName: \"connectionErrors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ConnectionError\"\n            }\n          }\n        }\n      },\n      dataCenters: {\n        serializedName: \"dataCenters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CassandraClusterPublicStatusDataCentersItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ManagedCassandraReaperStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ManagedCassandraReaperStatus\",\n    modelProperties: {\n      healthy: {\n        serializedName: \"healthy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      repairRunIds: {\n        serializedName: \"repairRunIds\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      repairSchedules: {\n        serializedName: \"repairSchedules\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const ConnectionError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ConnectionError\",\n    modelProperties: {\n      connectionState: {\n        serializedName: \"connectionState\",\n        type: {\n          name: \"String\"\n        }\n      },\n      iPFrom: {\n        serializedName: \"iPFrom\",\n        type: {\n          name: \"String\"\n        }\n      },\n      iPTo: {\n        serializedName: \"iPTo\",\n        type: {\n          name: \"String\"\n        }\n      },\n      port: {\n        serializedName: \"port\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      exception: {\n        serializedName: \"exception\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraClusterPublicStatusDataCentersItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraClusterPublicStatusDataCentersItem\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      seedNodes: {\n        serializedName: \"seedNodes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nodes: {\n        serializedName: \"nodes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className:\n                \"ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        type: {\n          name: \"String\"\n        }\n      },\n      state: {\n        serializedName: \"state\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      load: {\n        serializedName: \"load\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tokens: {\n        serializedName: \"tokens\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      size: {\n        serializedName: \"size\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      hostID: {\n        serializedName: \"hostID\",\n        type: {\n          name: \"String\"\n        }\n      },\n      rack: {\n        serializedName: \"rack\",\n        type: {\n          name: \"String\"\n        }\n      },\n      timestamp: {\n        serializedName: \"timestamp\",\n        type: {\n          name: \"String\"\n        }\n      },\n      diskUsedKB: {\n        serializedName: \"diskUsedKB\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      diskFreeKB: {\n        serializedName: \"diskFreeKB\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      memoryUsedKB: {\n        serializedName: \"memoryUsedKB\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      memoryBuffersAndCachedKB: {\n        serializedName: \"memoryBuffersAndCachedKB\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      memoryFreeKB: {\n        serializedName: \"memoryFreeKB\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      memoryTotalKB: {\n        serializedName: \"memoryTotalKB\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      cpuUsage: {\n        serializedName: \"cpuUsage\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Privilege: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Privilege\",\n    modelProperties: {\n      resource: {\n        serializedName: \"resource\",\n        type: {\n          name: \"Composite\",\n          className: \"PrivilegeResource\"\n        }\n      },\n      actions: {\n        serializedName: \"actions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PrivilegeResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivilegeResource\",\n    modelProperties: {\n      db: {\n        serializedName: \"db\",\n        type: {\n          name: \"String\"\n        }\n      },\n      collection: {\n        serializedName: \"collection\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Role: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Role\",\n    modelProperties: {\n      db: {\n        serializedName: \"db\",\n        type: {\n          name: \"String\"\n        }\n      },\n      role: {\n        serializedName: \"role\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoRoleDefinitionCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoRoleDefinitionCreateUpdateParameters\",\n    modelProperties: {\n      roleName: {\n        serializedName: \"properties.roleName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"properties.type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"BuiltInRole\", \"CustomRole\"]\n        }\n      },\n      databaseName: {\n        serializedName: \"properties.databaseName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      privileges: {\n        serializedName: \"properties.privileges\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Privilege\"\n            }\n          }\n        }\n      },\n      roles: {\n        serializedName: \"properties.roles\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Role\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MongoRoleDefinitionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoRoleDefinitionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MongoRoleDefinitionGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MongoUserDefinitionCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoUserDefinitionCreateUpdateParameters\",\n    modelProperties: {\n      userName: {\n        serializedName: \"properties.userName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      password: {\n        serializedName: \"properties.password\",\n        type: {\n          name: \"String\"\n        }\n      },\n      databaseName: {\n        serializedName: \"properties.databaseName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      customData: {\n        serializedName: \"properties.customData\",\n        type: {\n          name: \"String\"\n        }\n      },\n      roles: {\n        serializedName: \"properties.roles\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Role\"\n            }\n          }\n        }\n      },\n      mechanisms: {\n        serializedName: \"properties.mechanisms\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoUserDefinitionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoUserDefinitionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MongoUserDefinitionGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const NotebookWorkspaceListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NotebookWorkspaceListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NotebookWorkspace\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const NotebookWorkspaceConnectionInfoResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NotebookWorkspaceConnectionInfoResult\",\n    modelProperties: {\n      authToken: {\n        serializedName: \"authToken\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      notebookServerEndpoint: {\n        serializedName: \"notebookServerEndpoint\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpointConnectionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateEndpointConnection\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateLinkResourceListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateLinkResourceListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateLinkResource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Permission: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Permission\",\n    modelProperties: {\n      dataActions: {\n        serializedName: \"dataActions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      notDataActions: {\n        serializedName: \"notDataActions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlRoleDefinitionCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlRoleDefinitionCreateUpdateParameters\",\n    modelProperties: {\n      roleName: {\n        serializedName: \"properties.roleName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"properties.type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"BuiltInRole\", \"CustomRole\"]\n        }\n      },\n      assignableScopes: {\n        serializedName: \"properties.assignableScopes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      permissions: {\n        serializedName: \"properties.permissions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Permission\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlRoleDefinitionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlRoleDefinitionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SqlRoleDefinitionGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlRoleAssignmentCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlRoleAssignmentCreateUpdateParameters\",\n    modelProperties: {\n      roleDefinitionId: {\n        serializedName: \"properties.roleDefinitionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scope: {\n        serializedName: \"properties.scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      principalId: {\n        serializedName: \"properties.principalId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlRoleAssignmentListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlRoleAssignmentListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SqlRoleAssignmentGetResults\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableDatabaseAccountsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableDatabaseAccountsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableDatabaseAccountGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableDatabaseAccountGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableDatabaseAccountGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountName: {\n        serializedName: \"properties.accountName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      creationTime: {\n        serializedName: \"properties.creationTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      deletionTime: {\n        serializedName: \"properties.deletionTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      apiType: {\n        serializedName: \"properties.apiType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      restorableLocations: {\n        serializedName: \"properties.restorableLocations\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableLocationResource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableLocationResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableLocationResource\",\n    modelProperties: {\n      locationName: {\n        serializedName: \"locationName\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      regionalDatabaseAccountInstanceId: {\n        serializedName: \"regionalDatabaseAccountInstanceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      creationTime: {\n        serializedName: \"creationTime\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      deletionTime: {\n        serializedName: \"deletionTime\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContinuousBackupRestoreLocation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContinuousBackupRestoreLocation\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupInformation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BackupInformation\",\n    modelProperties: {\n      continuousBackupInformation: {\n        serializedName: \"continuousBackupInformation\",\n        type: {\n          name: \"Composite\",\n          className: \"ContinuousBackupInformation\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContinuousBackupInformation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContinuousBackupInformation\",\n    modelProperties: {\n      latestRestorableTimestamp: {\n        serializedName: \"latestRestorableTimestamp\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableSqlDatabasesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableSqlDatabasesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableSqlDatabaseGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableSqlDatabaseGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableSqlDatabaseGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"RestorableSqlDatabasePropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableSqlDatabasePropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableSqlDatabasePropertiesResource\",\n    modelProperties: {\n      rid: {\n        serializedName: \"_rid\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operationType: {\n        serializedName: \"operationType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      eventTimestamp: {\n        serializedName: \"eventTimestamp\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"ownerId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerResourceId: {\n        serializedName: \"ownerResourceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      database: {\n        serializedName: \"database\",\n        type: {\n          name: \"Composite\",\n          className: \"RestorableSqlDatabasePropertiesResourceDatabase\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableSqlContainersListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableSqlContainersListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableSqlContainerGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableSqlContainerGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableSqlContainerGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"RestorableSqlContainerPropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableSqlContainerPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableSqlContainerPropertiesResource\",\n    modelProperties: {\n      rid: {\n        serializedName: \"_rid\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operationType: {\n        serializedName: \"operationType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      eventTimestamp: {\n        serializedName: \"eventTimestamp\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"ownerId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerResourceId: {\n        serializedName: \"ownerResourceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      container: {\n        serializedName: \"container\",\n        type: {\n          name: \"Composite\",\n          className: \"RestorableSqlContainerPropertiesResourceContainer\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableSqlResourcesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableSqlResourcesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableSqlResourcesGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableSqlResourcesGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableSqlResourcesGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      databaseName: {\n        serializedName: \"databaseName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      collectionNames: {\n        serializedName: \"collectionNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableMongodbDatabasesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableMongodbDatabasesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableMongodbDatabaseGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableMongodbDatabaseGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableMongodbDatabaseGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"RestorableMongodbDatabasePropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableMongodbDatabasePropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableMongodbDatabasePropertiesResource\",\n    modelProperties: {\n      rid: {\n        serializedName: \"_rid\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operationType: {\n        serializedName: \"operationType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      eventTimestamp: {\n        serializedName: \"eventTimestamp\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"ownerId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerResourceId: {\n        serializedName: \"ownerResourceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableMongodbCollectionsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableMongodbCollectionsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableMongodbCollectionGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableMongodbCollectionGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableMongodbCollectionGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"RestorableMongodbCollectionPropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableMongodbCollectionPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableMongodbCollectionPropertiesResource\",\n    modelProperties: {\n      rid: {\n        serializedName: \"_rid\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operationType: {\n        serializedName: \"operationType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      eventTimestamp: {\n        serializedName: \"eventTimestamp\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"ownerId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerResourceId: {\n        serializedName: \"ownerResourceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableMongodbResourcesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableMongodbResourcesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableMongodbResourcesGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableMongodbResourcesGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableMongodbResourcesGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      databaseName: {\n        serializedName: \"databaseName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      collectionNames: {\n        serializedName: \"collectionNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableGremlinDatabasesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableGremlinDatabasesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableGremlinDatabaseGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableGremlinDatabaseGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableGremlinDatabaseGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"RestorableGremlinDatabasePropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableGremlinDatabasePropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableGremlinDatabasePropertiesResource\",\n    modelProperties: {\n      rid: {\n        serializedName: \"_rid\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operationType: {\n        serializedName: \"operationType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      eventTimestamp: {\n        serializedName: \"eventTimestamp\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"ownerId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerResourceId: {\n        serializedName: \"ownerResourceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableGremlinGraphsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableGremlinGraphsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableGremlinGraphGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableGremlinGraphGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableGremlinGraphGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"RestorableGremlinGraphPropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableGremlinGraphPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableGremlinGraphPropertiesResource\",\n    modelProperties: {\n      rid: {\n        serializedName: \"_rid\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operationType: {\n        serializedName: \"operationType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      eventTimestamp: {\n        serializedName: \"eventTimestamp\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"ownerId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerResourceId: {\n        serializedName: \"ownerResourceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableGremlinResourcesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableGremlinResourcesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableGremlinResourcesGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableGremlinResourcesGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableGremlinResourcesGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      databaseName: {\n        serializedName: \"databaseName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      graphNames: {\n        serializedName: \"graphNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableTablesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableTablesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableTableGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableTableGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableTableGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"RestorableTablePropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableTablePropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableTablePropertiesResource\",\n    modelProperties: {\n      rid: {\n        serializedName: \"_rid\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operationType: {\n        serializedName: \"operationType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      eventTimestamp: {\n        serializedName: \"eventTimestamp\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"ownerId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerResourceId: {\n        serializedName: \"ownerResourceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableTableResourcesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableTableResourcesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RestorableTableResourcesGetResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableTableResourcesGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableTableResourcesGetResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceResourceListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ServiceResourceListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ServiceResource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceResourceProperties: coreClient.CompositeMapper = {\n  serializedName: \"ServiceResourceProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceResourceProperties\",\n    uberParent: \"ServiceResourceProperties\",\n    additionalProperties: { type: { name: \"Object\" } },\n    polymorphicDiscriminator: {\n      serializedName: \"serviceType\",\n      clientName: \"serviceType\"\n    },\n    modelProperties: {\n      creationTime: {\n        serializedName: \"creationTime\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      instanceSize: {\n        serializedName: \"instanceSize\",\n        type: {\n          name: \"String\"\n        }\n      },\n      instanceCount: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"instanceCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      serviceType: {\n        serializedName: \"serviceType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceResourceCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ServiceResourceCreateUpdateParameters\",\n    modelProperties: {\n      instanceSize: {\n        serializedName: \"properties.instanceSize\",\n        type: {\n          name: \"String\"\n        }\n      },\n      instanceCount: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"properties.instanceCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      serviceType: {\n        serializedName: \"properties.serviceType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeriodicModeProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeriodicModeProperties\",\n    modelProperties: {\n      backupIntervalInMinutes: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"backupIntervalInMinutes\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      backupRetentionIntervalInHours: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"backupRetentionIntervalInHours\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      backupStorageRedundancy: {\n        serializedName: \"backupStorageRedundancy\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DataTransferServiceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataTransferServiceResource\",\n    modelProperties: {\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Composite\",\n          className: \"DataTransferServiceResourceProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegionalServiceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegionalServiceResource\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlDedicatedGatewayServiceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlDedicatedGatewayServiceResource\",\n    modelProperties: {\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlDedicatedGatewayServiceResourceProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const GraphAPIComputeServiceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GraphAPIComputeServiceResource\",\n    modelProperties: {\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Composite\",\n          className: \"GraphAPIComputeServiceResourceProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const MaterializedViewsBuilderServiceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MaterializedViewsBuilderServiceResource\",\n    modelProperties: {\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Composite\",\n          className: \"MaterializedViewsBuilderServiceResourceProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const ProxyResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ProxyResource\",\n    modelProperties: {\n      ...Resource.type.modelProperties\n    }\n  }\n};\n\nexport const PeriodicModeBackupPolicy: coreClient.CompositeMapper = {\n  serializedName: \"Periodic\",\n  type: {\n    name: \"Composite\",\n    className: \"PeriodicModeBackupPolicy\",\n    uberParent: \"BackupPolicy\",\n    polymorphicDiscriminator: BackupPolicy.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...BackupPolicy.type.modelProperties,\n      periodicModeProperties: {\n        serializedName: \"periodicModeProperties\",\n        type: {\n          name: \"Composite\",\n          className: \"PeriodicModeProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContinuousModeBackupPolicy: coreClient.CompositeMapper = {\n  serializedName: \"Continuous\",\n  type: {\n    name: \"Composite\",\n    className: \"ContinuousModeBackupPolicy\",\n    uberParent: \"BackupPolicy\",\n    polymorphicDiscriminator: BackupPolicy.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...BackupPolicy.type.modelProperties\n    }\n  }\n};\n\nexport const DatabaseAccountGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"String\"\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"ManagedServiceIdentity\"\n        }\n      },\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      documentEndpoint: {\n        serializedName: \"properties.documentEndpoint\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      databaseAccountOfferType: {\n        defaultValue: \"Standard\",\n        isConstant: true,\n        serializedName: \"properties.databaseAccountOfferType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ipRules: {\n        serializedName: \"properties.ipRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IpAddressOrRange\"\n            }\n          }\n        }\n      },\n      isVirtualNetworkFilterEnabled: {\n        serializedName: \"properties.isVirtualNetworkFilterEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      enableAutomaticFailover: {\n        serializedName: \"properties.enableAutomaticFailover\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      consistencyPolicy: {\n        serializedName: \"properties.consistencyPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"ConsistencyPolicy\"\n        }\n      },\n      capabilities: {\n        serializedName: \"properties.capabilities\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Capability\"\n            }\n          }\n        }\n      },\n      writeLocations: {\n        serializedName: \"properties.writeLocations\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Location\"\n            }\n          }\n        }\n      },\n      readLocations: {\n        serializedName: \"properties.readLocations\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Location\"\n            }\n          }\n        }\n      },\n      locations: {\n        serializedName: \"properties.locations\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Location\"\n            }\n          }\n        }\n      },\n      failoverPolicies: {\n        serializedName: \"properties.failoverPolicies\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FailoverPolicy\"\n            }\n          }\n        }\n      },\n      virtualNetworkRules: {\n        serializedName: \"properties.virtualNetworkRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"VirtualNetworkRule\"\n            }\n          }\n        }\n      },\n      privateEndpointConnections: {\n        serializedName: \"properties.privateEndpointConnections\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateEndpointConnection\"\n            }\n          }\n        }\n      },\n      enableMultipleWriteLocations: {\n        serializedName: \"properties.enableMultipleWriteLocations\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      enableCassandraConnector: {\n        serializedName: \"properties.enableCassandraConnector\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      connectorOffer: {\n        serializedName: \"properties.connectorOffer\",\n        type: {\n          name: \"String\"\n        }\n      },\n      disableKeyBasedMetadataWriteAccess: {\n        serializedName: \"properties.disableKeyBasedMetadataWriteAccess\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      keyVaultKeyUri: {\n        serializedName: \"properties.keyVaultKeyUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      defaultIdentity: {\n        serializedName: \"properties.defaultIdentity\",\n        type: {\n          name: \"String\"\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      enableFreeTier: {\n        serializedName: \"properties.enableFreeTier\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      apiProperties: {\n        serializedName: \"properties.apiProperties\",\n        type: {\n          name: \"Composite\",\n          className: \"ApiProperties\"\n        }\n      },\n      enableAnalyticalStorage: {\n        serializedName: \"properties.enableAnalyticalStorage\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      analyticalStorageConfiguration: {\n        serializedName: \"properties.analyticalStorageConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"AnalyticalStorageConfiguration\"\n        }\n      },\n      instanceId: {\n        serializedName: \"properties.instanceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      createMode: {\n        defaultValue: \"Default\",\n        serializedName: \"properties.createMode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      restoreParameters: {\n        serializedName: \"properties.restoreParameters\",\n        type: {\n          name: \"Composite\",\n          className: \"RestoreParameters\"\n        }\n      },\n      backupPolicy: {\n        serializedName: \"properties.backupPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"BackupPolicy\"\n        }\n      },\n      cors: {\n        serializedName: \"properties.cors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CorsPolicy\"\n            }\n          }\n        }\n      },\n      networkAclBypass: {\n        serializedName: \"properties.networkAclBypass\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"None\", \"AzureServices\"]\n        }\n      },\n      networkAclBypassResourceIds: {\n        serializedName: \"properties.networkAclBypassResourceIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      disableLocalAuth: {\n        serializedName: \"properties.disableLocalAuth\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      capacity: {\n        serializedName: \"properties.capacity\",\n        type: {\n          name: \"Composite\",\n          className: \"Capacity\"\n        }\n      },\n      keysMetadata: {\n        serializedName: \"properties.keysMetadata\",\n        type: {\n          name: \"Composite\",\n          className: \"DatabaseAccountKeysMetadata\"\n        }\n      },\n      enablePartitionMerge: {\n        serializedName: \"properties.enablePartitionMerge\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      minimalTlsVersion: {\n        serializedName: \"properties.minimalTlsVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"String\"\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"ManagedServiceIdentity\"\n        }\n      },\n      consistencyPolicy: {\n        serializedName: \"properties.consistencyPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"ConsistencyPolicy\"\n        }\n      },\n      locations: {\n        serializedName: \"properties.locations\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Location\"\n            }\n          }\n        }\n      },\n      databaseAccountOfferType: {\n        defaultValue: \"Standard\",\n        isConstant: true,\n        serializedName: \"properties.databaseAccountOfferType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ipRules: {\n        serializedName: \"properties.ipRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IpAddressOrRange\"\n            }\n          }\n        }\n      },\n      isVirtualNetworkFilterEnabled: {\n        serializedName: \"properties.isVirtualNetworkFilterEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      enableAutomaticFailover: {\n        serializedName: \"properties.enableAutomaticFailover\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      capabilities: {\n        serializedName: \"properties.capabilities\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Capability\"\n            }\n          }\n        }\n      },\n      virtualNetworkRules: {\n        serializedName: \"properties.virtualNetworkRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"VirtualNetworkRule\"\n            }\n          }\n        }\n      },\n      enableMultipleWriteLocations: {\n        serializedName: \"properties.enableMultipleWriteLocations\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      enableCassandraConnector: {\n        serializedName: \"properties.enableCassandraConnector\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      connectorOffer: {\n        serializedName: \"properties.connectorOffer\",\n        type: {\n          name: \"String\"\n        }\n      },\n      disableKeyBasedMetadataWriteAccess: {\n        serializedName: \"properties.disableKeyBasedMetadataWriteAccess\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      keyVaultKeyUri: {\n        serializedName: \"properties.keyVaultKeyUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      defaultIdentity: {\n        serializedName: \"properties.defaultIdentity\",\n        type: {\n          name: \"String\"\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      enableFreeTier: {\n        serializedName: \"properties.enableFreeTier\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      apiProperties: {\n        serializedName: \"properties.apiProperties\",\n        type: {\n          name: \"Composite\",\n          className: \"ApiProperties\"\n        }\n      },\n      enableAnalyticalStorage: {\n        serializedName: \"properties.enableAnalyticalStorage\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      analyticalStorageConfiguration: {\n        serializedName: \"properties.analyticalStorageConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"AnalyticalStorageConfiguration\"\n        }\n      },\n      createMode: {\n        defaultValue: \"Default\",\n        serializedName: \"properties.createMode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      backupPolicy: {\n        serializedName: \"properties.backupPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"BackupPolicy\"\n        }\n      },\n      cors: {\n        serializedName: \"properties.cors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CorsPolicy\"\n            }\n          }\n        }\n      },\n      networkAclBypass: {\n        serializedName: \"properties.networkAclBypass\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"None\", \"AzureServices\"]\n        }\n      },\n      networkAclBypassResourceIds: {\n        serializedName: \"properties.networkAclBypassResourceIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      disableLocalAuth: {\n        serializedName: \"properties.disableLocalAuth\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      restoreParameters: {\n        serializedName: \"properties.restoreParameters\",\n        type: {\n          name: \"Composite\",\n          className: \"RestoreParameters\"\n        }\n      },\n      capacity: {\n        serializedName: \"properties.capacity\",\n        type: {\n          name: \"Composite\",\n          className: \"Capacity\"\n        }\n      },\n      keysMetadata: {\n        serializedName: \"properties.keysMetadata\",\n        type: {\n          name: \"Composite\",\n          className: \"DatabaseAccountKeysMetadata\"\n        }\n      },\n      enablePartitionMerge: {\n        serializedName: \"properties.enablePartitionMerge\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      minimalTlsVersion: {\n        serializedName: \"properties.minimalTlsVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlDatabaseGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlDatabaseGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlDatabaseGetPropertiesResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlDatabaseGetPropertiesOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlDatabaseCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlDatabaseCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlDatabaseResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const ThroughputSettingsGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ThroughputSettingsGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"ThroughputSettingsGetPropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const ThroughputSettingsUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ThroughputSettingsUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"ThroughputSettingsResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlContainerGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlContainerGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlContainerGetPropertiesResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlContainerGetPropertiesOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlContainerCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlContainerCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlContainerResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlStoredProcedureGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlStoredProcedureGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlStoredProcedureGetPropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlStoredProcedureCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlStoredProcedureCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlStoredProcedureResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlUserDefinedFunctionGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlUserDefinedFunctionGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlUserDefinedFunctionGetPropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlUserDefinedFunctionCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlUserDefinedFunctionCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlUserDefinedFunctionResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlTriggerGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlTriggerGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlTriggerGetPropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlTriggerCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlTriggerCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"SqlTriggerResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBDatabaseGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBDatabaseGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"MongoDBDatabaseGetPropertiesResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"MongoDBDatabaseGetPropertiesOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBDatabaseCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBDatabaseCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"MongoDBDatabaseResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBCollectionGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBCollectionGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"MongoDBCollectionGetPropertiesResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"MongoDBCollectionGetPropertiesOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBCollectionCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBCollectionCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"MongoDBCollectionResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"TableGetPropertiesResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"TableGetPropertiesOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"TableResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraKeyspaceGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraKeyspaceGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"CassandraKeyspaceGetPropertiesResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CassandraKeyspaceGetPropertiesOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraKeyspaceCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraKeyspaceCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"CassandraKeyspaceResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraTableGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraTableGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"CassandraTableGetPropertiesResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CassandraTableGetPropertiesOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraTableCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraTableCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"CassandraTableResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinDatabaseGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinDatabaseGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"GremlinDatabaseGetPropertiesResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"GremlinDatabaseGetPropertiesOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinDatabaseCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinDatabaseCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"GremlinDatabaseResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinGraphGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinGraphGetResults\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"GremlinGraphGetPropertiesResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"GremlinGraphGetPropertiesOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinGraphCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinGraphCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMResourceProperties.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"GremlinGraphResource\"\n        }\n      },\n      options: {\n        serializedName: \"properties.options\",\n        type: {\n          name: \"Composite\",\n          className: \"CreateUpdateOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountListKeysResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountListKeysResult\",\n    modelProperties: {\n      ...DatabaseAccountListReadOnlyKeysResult.type.modelProperties,\n      primaryMasterKey: {\n        serializedName: \"primaryMasterKey\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      secondaryMasterKey: {\n        serializedName: \"secondaryMasterKey\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartitionMetric: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartitionMetric\",\n    modelProperties: {\n      ...Metric.type.modelProperties,\n      partitionId: {\n        serializedName: \"partitionId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      partitionKeyRangeId: {\n        serializedName: \"partitionKeyRangeId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PercentileMetricValue: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PercentileMetricValue\",\n    modelProperties: {\n      ...MetricValue.type.modelProperties,\n      p10: {\n        serializedName: \"P10\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      p25: {\n        serializedName: \"P25\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      p50: {\n        serializedName: \"P50\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      p75: {\n        serializedName: \"P75\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      p90: {\n        serializedName: \"P90\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      p95: {\n        serializedName: \"P95\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      p99: {\n        serializedName: \"P99\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartitionUsage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartitionUsage\",\n    modelProperties: {\n      ...Usage.type.modelProperties,\n      partitionId: {\n        serializedName: \"partitionId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      partitionKeyRangeId: {\n        serializedName: \"partitionKeyRangeId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlDatabaseGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlDatabaseGetPropertiesResource\",\n    modelProperties: {\n      ...SqlDatabaseResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties,\n      colls: {\n        serializedName: \"_colls\",\n        type: {\n          name: \"String\"\n        }\n      },\n      users: {\n        serializedName: \"_users\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RestorableSqlDatabasePropertiesResourceDatabase: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableSqlDatabasePropertiesResourceDatabase\",\n    modelProperties: {\n      ...SqlDatabaseResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties,\n      colls: {\n        serializedName: \"_colls\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      users: {\n        serializedName: \"_users\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      self: {\n        serializedName: \"_self\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ThroughputSettingsGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ThroughputSettingsGetPropertiesResource\",\n    modelProperties: {\n      ...ThroughputSettingsResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const SqlContainerGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlContainerGetPropertiesResource\",\n    modelProperties: {\n      ...SqlContainerResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const ClientEncryptionKeyGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClientEncryptionKeyGetPropertiesResource\",\n    modelProperties: {\n      ...ClientEncryptionKeyResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const SqlStoredProcedureGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlStoredProcedureGetPropertiesResource\",\n    modelProperties: {\n      ...SqlStoredProcedureResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const SqlUserDefinedFunctionGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlUserDefinedFunctionGetPropertiesResource\",\n    modelProperties: {\n      ...SqlUserDefinedFunctionResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const SqlTriggerGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlTriggerGetPropertiesResource\",\n    modelProperties: {\n      ...SqlTriggerResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const MongoDBDatabaseGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBDatabaseGetPropertiesResource\",\n    modelProperties: {\n      ...MongoDBDatabaseResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const MongoDBCollectionGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBCollectionGetPropertiesResource\",\n    modelProperties: {\n      ...MongoDBCollectionResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const TableGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableGetPropertiesResource\",\n    modelProperties: {\n      ...TableResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const CassandraKeyspaceGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraKeyspaceGetPropertiesResource\",\n    modelProperties: {\n      ...CassandraKeyspaceResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const CassandraTableGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraTableGetPropertiesResource\",\n    modelProperties: {\n      ...CassandraTableResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const GremlinDatabaseGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinDatabaseGetPropertiesResource\",\n    modelProperties: {\n      ...GremlinDatabaseResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const GremlinGraphGetPropertiesResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinGraphGetPropertiesResource\",\n    modelProperties: {\n      ...GremlinGraphResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties\n    }\n  }\n};\n\nexport const RestorableSqlContainerPropertiesResourceContainer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RestorableSqlContainerPropertiesResourceContainer\",\n    modelProperties: {\n      ...SqlContainerResource.type.modelProperties,\n      ...ExtendedResourceProperties.type.modelProperties,\n      self: {\n        serializedName: \"_self\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlDatabaseGetPropertiesOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlDatabaseGetPropertiesOptions\",\n    modelProperties: {\n      ...OptionsResource.type.modelProperties\n    }\n  }\n};\n\nexport const SqlContainerGetPropertiesOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlContainerGetPropertiesOptions\",\n    modelProperties: {\n      ...OptionsResource.type.modelProperties\n    }\n  }\n};\n\nexport const MongoDBDatabaseGetPropertiesOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBDatabaseGetPropertiesOptions\",\n    modelProperties: {\n      ...OptionsResource.type.modelProperties\n    }\n  }\n};\n\nexport const MongoDBCollectionGetPropertiesOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBCollectionGetPropertiesOptions\",\n    modelProperties: {\n      ...OptionsResource.type.modelProperties\n    }\n  }\n};\n\nexport const TableGetPropertiesOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableGetPropertiesOptions\",\n    modelProperties: {\n      ...OptionsResource.type.modelProperties\n    }\n  }\n};\n\nexport const CassandraKeyspaceGetPropertiesOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraKeyspaceGetPropertiesOptions\",\n    modelProperties: {\n      ...OptionsResource.type.modelProperties\n    }\n  }\n};\n\nexport const CassandraTableGetPropertiesOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraTableGetPropertiesOptions\",\n    modelProperties: {\n      ...OptionsResource.type.modelProperties\n    }\n  }\n};\n\nexport const GremlinDatabaseGetPropertiesOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinDatabaseGetPropertiesOptions\",\n    modelProperties: {\n      ...OptionsResource.type.modelProperties\n    }\n  }\n};\n\nexport const GremlinGraphGetPropertiesOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinGraphGetPropertiesOptions\",\n    modelProperties: {\n      ...OptionsResource.type.modelProperties\n    }\n  }\n};\n\nexport const ClientEncryptionKeyGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClientEncryptionKeyGetResults\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties,\n      resource: {\n        serializedName: \"properties.resource\",\n        type: {\n          name: \"Composite\",\n          className: \"ClientEncryptionKeyGetPropertiesResource\"\n        }\n      }\n    }\n  }\n};\n\nexport const LocationGetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LocationGetResult\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties,\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Composite\",\n          className: \"LocationProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const DataCenterResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataCenterResource\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties,\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Composite\",\n          className: \"DataCenterResourceProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoRoleDefinitionGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoRoleDefinitionGetResults\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties,\n      roleName: {\n        serializedName: \"properties.roleName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      typePropertiesType: {\n        serializedName: \"properties.type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"BuiltInRole\", \"CustomRole\"]\n        }\n      },\n      databaseName: {\n        serializedName: \"properties.databaseName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      privileges: {\n        serializedName: \"properties.privileges\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Privilege\"\n            }\n          }\n        }\n      },\n      roles: {\n        serializedName: \"properties.roles\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Role\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MongoUserDefinitionGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoUserDefinitionGetResults\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties,\n      userName: {\n        serializedName: \"properties.userName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      password: {\n        serializedName: \"properties.password\",\n        type: {\n          name: \"String\"\n        }\n      },\n      databaseName: {\n        serializedName: \"properties.databaseName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      customData: {\n        serializedName: \"properties.customData\",\n        type: {\n          name: \"String\"\n        }\n      },\n      roles: {\n        serializedName: \"properties.roles\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Role\"\n            }\n          }\n        }\n      },\n      mechanisms: {\n        serializedName: \"properties.mechanisms\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NotebookWorkspace: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NotebookWorkspace\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties,\n      notebookServerEndpoint: {\n        serializedName: \"properties.notebookServerEndpoint\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"properties.status\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NotebookWorkspaceCreateUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NotebookWorkspaceCreateUpdateParameters\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties\n    }\n  }\n};\n\nexport const PrivateLinkResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateLinkResource\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties,\n      groupId: {\n        serializedName: \"properties.groupId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      requiredMembers: {\n        serializedName: \"properties.requiredMembers\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      requiredZoneNames: {\n        serializedName: \"properties.requiredZoneNames\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlRoleDefinitionGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlRoleDefinitionGetResults\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties,\n      roleName: {\n        serializedName: \"properties.roleName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      typePropertiesType: {\n        serializedName: \"properties.type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"BuiltInRole\", \"CustomRole\"]\n        }\n      },\n      assignableScopes: {\n        serializedName: \"properties.assignableScopes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      permissions: {\n        serializedName: \"properties.permissions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Permission\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlRoleAssignmentGetResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlRoleAssignmentGetResults\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties,\n      roleDefinitionId: {\n        serializedName: \"properties.roleDefinitionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scope: {\n        serializedName: \"properties.scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      principalId: {\n        serializedName: \"properties.principalId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ServiceResource\",\n    modelProperties: {\n      ...ARMProxyResource.type.modelProperties,\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Composite\",\n          className: \"ServiceResourceProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClusterResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClusterResource\",\n    modelProperties: {\n      ...ManagedCassandraARMResourceProperties.type.modelProperties,\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Composite\",\n          className: \"ClusterResourceProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const DataTransferServiceResourceProperties: coreClient.CompositeMapper = {\n  serializedName: \"DataTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"DataTransferServiceResourceProperties\",\n    uberParent: \"ServiceResourceProperties\",\n    additionalProperties: { type: { name: \"Object\" } },\n    polymorphicDiscriminator:\n      ServiceResourceProperties.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...ServiceResourceProperties.type.modelProperties,\n      locations: {\n        serializedName: \"locations\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DataTransferRegionalServiceResource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SqlDedicatedGatewayServiceResourceProperties: coreClient.CompositeMapper = {\n  serializedName: \"SqlDedicatedGateway\",\n  type: {\n    name: \"Composite\",\n    className: \"SqlDedicatedGatewayServiceResourceProperties\",\n    uberParent: \"ServiceResourceProperties\",\n    additionalProperties: { type: { name: \"Object\" } },\n    polymorphicDiscriminator:\n      ServiceResourceProperties.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...ServiceResourceProperties.type.modelProperties,\n      sqlDedicatedGatewayEndpoint: {\n        serializedName: \"sqlDedicatedGatewayEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      locations: {\n        serializedName: \"locations\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SqlDedicatedGatewayRegionalServiceResource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const GraphAPIComputeServiceResourceProperties: coreClient.CompositeMapper = {\n  serializedName: \"GraphAPICompute\",\n  type: {\n    name: \"Composite\",\n    className: \"GraphAPIComputeServiceResourceProperties\",\n    uberParent: \"ServiceResourceProperties\",\n    additionalProperties: { type: { name: \"Object\" } },\n    polymorphicDiscriminator:\n      ServiceResourceProperties.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...ServiceResourceProperties.type.modelProperties,\n      graphApiComputeEndpoint: {\n        serializedName: \"graphApiComputeEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      locations: {\n        serializedName: \"locations\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"GraphAPIComputeRegionalServiceResource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MaterializedViewsBuilderServiceResourceProperties: coreClient.CompositeMapper = {\n  serializedName: \"MaterializedViewsBuilder\",\n  type: {\n    name: \"Composite\",\n    className: \"MaterializedViewsBuilderServiceResourceProperties\",\n    uberParent: \"ServiceResourceProperties\",\n    additionalProperties: { type: { name: \"Object\" } },\n    polymorphicDiscriminator:\n      ServiceResourceProperties.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...ServiceResourceProperties.type.modelProperties,\n      locations: {\n        serializedName: \"locations\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MaterializedViewsBuilderRegionalServiceResource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DataTransferRegionalServiceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataTransferRegionalServiceResource\",\n    modelProperties: {\n      ...RegionalServiceResource.type.modelProperties\n    }\n  }\n};\n\nexport const SqlDedicatedGatewayRegionalServiceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlDedicatedGatewayRegionalServiceResource\",\n    modelProperties: {\n      ...RegionalServiceResource.type.modelProperties,\n      sqlDedicatedGatewayEndpoint: {\n        serializedName: \"sqlDedicatedGatewayEndpoint\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GraphAPIComputeRegionalServiceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GraphAPIComputeRegionalServiceResource\",\n    modelProperties: {\n      ...RegionalServiceResource.type.modelProperties,\n      graphApiComputeEndpoint: {\n        serializedName: \"graphApiComputeEndpoint\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MaterializedViewsBuilderRegionalServiceResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MaterializedViewsBuilderRegionalServiceResource\",\n    modelProperties: {\n      ...RegionalServiceResource.type.modelProperties\n    }\n  }\n};\n\nexport const PrivateEndpointConnection: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpointConnection\",\n    modelProperties: {\n      ...ProxyResource.type.modelProperties,\n      privateEndpoint: {\n        serializedName: \"properties.privateEndpoint\",\n        type: {\n          name: \"Composite\",\n          className: \"PrivateEndpointProperty\"\n        }\n      },\n      privateLinkServiceConnectionState: {\n        serializedName: \"properties.privateLinkServiceConnectionState\",\n        type: {\n          name: \"Composite\",\n          className: \"PrivateLinkServiceConnectionStateProperty\"\n        }\n      },\n      groupId: {\n        serializedName: \"properties.groupId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountsDeleteHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountsDeleteHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountsFailoverPriorityChangeHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountsFailoverPriorityChangeHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountsOfflineRegionHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountsOfflineRegionHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountsOnlineRegionHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountsOnlineRegionHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DatabaseAccountsRegenerateKeyHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DatabaseAccountsRegenerateKeyHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesCreateUpdateSqlDatabaseHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesCreateUpdateSqlDatabaseHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesDeleteSqlDatabaseHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesDeleteSqlDatabaseHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesUpdateSqlDatabaseThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesUpdateSqlDatabaseThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesMigrateSqlDatabaseToAutoscaleHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesMigrateSqlDatabaseToAutoscaleHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesMigrateSqlDatabaseToManualThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesMigrateSqlDatabaseToManualThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesCreateUpdateSqlContainerHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesCreateUpdateSqlContainerHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesDeleteSqlContainerHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesDeleteSqlContainerHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesUpdateSqlContainerThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesUpdateSqlContainerThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesMigrateSqlContainerToAutoscaleHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesMigrateSqlContainerToAutoscaleHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesMigrateSqlContainerToManualThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesMigrateSqlContainerToManualThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesCreateUpdateClientEncryptionKeyHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesCreateUpdateClientEncryptionKeyHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesCreateUpdateSqlStoredProcedureHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesCreateUpdateSqlStoredProcedureHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesDeleteSqlStoredProcedureHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesDeleteSqlStoredProcedureHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesCreateUpdateSqlUserDefinedFunctionHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesCreateUpdateSqlUserDefinedFunctionHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesDeleteSqlUserDefinedFunctionHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesDeleteSqlUserDefinedFunctionHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesCreateUpdateSqlTriggerHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesCreateUpdateSqlTriggerHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlResourcesDeleteSqlTriggerHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SqlResourcesDeleteSqlTriggerHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBResourcesCreateUpdateMongoDBDatabaseHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBResourcesCreateUpdateMongoDBDatabaseHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBResourcesDeleteMongoDBDatabaseHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBResourcesDeleteMongoDBDatabaseHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBResourcesUpdateMongoDBDatabaseThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBResourcesUpdateMongoDBDatabaseThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBResourcesCreateUpdateMongoDBCollectionHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBResourcesCreateUpdateMongoDBCollectionHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBResourcesDeleteMongoDBCollectionHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBResourcesDeleteMongoDBCollectionHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBResourcesUpdateMongoDBCollectionThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBResourcesUpdateMongoDBCollectionThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBResourcesMigrateMongoDBCollectionToAutoscaleHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MongoDBResourcesMigrateMongoDBCollectionToAutoscaleHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MongoDBResourcesMigrateMongoDBCollectionToManualThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"MongoDBResourcesMigrateMongoDBCollectionToManualThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableResourcesCreateUpdateTableHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableResourcesCreateUpdateTableHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableResourcesDeleteTableHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableResourcesDeleteTableHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableResourcesUpdateTableThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableResourcesUpdateTableThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableResourcesMigrateTableToAutoscaleHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableResourcesMigrateTableToAutoscaleHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableResourcesMigrateTableToManualThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TableResourcesMigrateTableToManualThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraResourcesCreateUpdateCassandraKeyspaceHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraResourcesCreateUpdateCassandraKeyspaceHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraResourcesDeleteCassandraKeyspaceHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraResourcesDeleteCassandraKeyspaceHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraResourcesUpdateCassandraKeyspaceThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraResourcesUpdateCassandraKeyspaceThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraResourcesMigrateCassandraKeyspaceToAutoscaleHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraResourcesMigrateCassandraKeyspaceToAutoscaleHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraResourcesMigrateCassandraKeyspaceToManualThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"CassandraResourcesMigrateCassandraKeyspaceToManualThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraResourcesCreateUpdateCassandraTableHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraResourcesCreateUpdateCassandraTableHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraResourcesDeleteCassandraTableHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraResourcesDeleteCassandraTableHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraResourcesUpdateCassandraTableThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraResourcesUpdateCassandraTableThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraResourcesMigrateCassandraTableToAutoscaleHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CassandraResourcesMigrateCassandraTableToAutoscaleHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CassandraResourcesMigrateCassandraTableToManualThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"CassandraResourcesMigrateCassandraTableToManualThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinResourcesCreateUpdateGremlinDatabaseHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinResourcesCreateUpdateGremlinDatabaseHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinResourcesDeleteGremlinDatabaseHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinResourcesDeleteGremlinDatabaseHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinResourcesUpdateGremlinDatabaseThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinResourcesUpdateGremlinDatabaseThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinResourcesMigrateGremlinDatabaseToAutoscaleHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinResourcesMigrateGremlinDatabaseToAutoscaleHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinResourcesMigrateGremlinDatabaseToManualThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"GremlinResourcesMigrateGremlinDatabaseToManualThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinResourcesCreateUpdateGremlinGraphHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinResourcesCreateUpdateGremlinGraphHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinResourcesDeleteGremlinGraphHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinResourcesDeleteGremlinGraphHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinResourcesUpdateGremlinGraphThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinResourcesUpdateGremlinGraphThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinResourcesMigrateGremlinGraphToAutoscaleHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinResourcesMigrateGremlinGraphToAutoscaleHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GremlinResourcesMigrateGremlinGraphToManualThroughputHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GremlinResourcesMigrateGremlinGraphToManualThroughputHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceCreateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ServiceCreateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceDeleteHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ServiceDeleteHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  BackupPolicy: BackupPolicy,\n  ServiceResourceProperties: ServiceResourceProperties,\n  \"BackupPolicy.Periodic\": PeriodicModeBackupPolicy,\n  \"BackupPolicy.Continuous\": ContinuousModeBackupPolicy,\n  \"ServiceResourceProperties.DataTransfer\": DataTransferServiceResourceProperties,\n  \"ServiceResourceProperties.SqlDedicatedGateway\": SqlDedicatedGatewayServiceResourceProperties,\n  \"ServiceResourceProperties.GraphAPICompute\": GraphAPIComputeServiceResourceProperties,\n  \"ServiceResourceProperties.MaterializedViewsBuilder\": MaterializedViewsBuilderServiceResourceProperties\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  DatabaseAccountUpdateParameters as DatabaseAccountUpdateParametersMapper,\n  DatabaseAccountCreateUpdateParameters as DatabaseAccountCreateUpdateParametersMapper,\n  FailoverPolicies as FailoverPoliciesMapper,\n  RegionForOnlineOffline as RegionForOnlineOfflineMapper,\n  DatabaseAccountRegenerateKeyParameters as DatabaseAccountRegenerateKeyParametersMapper,\n  SqlDatabaseCreateUpdateParameters as SqlDatabaseCreateUpdateParametersMapper,\n  ThroughputSettingsUpdateParameters as ThroughputSettingsUpdateParametersMapper,\n  SqlContainerCreateUpdateParameters as SqlContainerCreateUpdateParametersMapper,\n  ClientEncryptionKeyCreateUpdateParameters as ClientEncryptionKeyCreateUpdateParametersMapper,\n  SqlStoredProcedureCreateUpdateParameters as SqlStoredProcedureCreateUpdateParametersMapper,\n  SqlUserDefinedFunctionCreateUpdateParameters as SqlUserDefinedFunctionCreateUpdateParametersMapper,\n  SqlTriggerCreateUpdateParameters as SqlTriggerCreateUpdateParametersMapper,\n  SqlRoleDefinitionCreateUpdateParameters as SqlRoleDefinitionCreateUpdateParametersMapper,\n  SqlRoleAssignmentCreateUpdateParameters as SqlRoleAssignmentCreateUpdateParametersMapper,\n  ContinuousBackupRestoreLocation as ContinuousBackupRestoreLocationMapper,\n  MongoDBDatabaseCreateUpdateParameters as MongoDBDatabaseCreateUpdateParametersMapper,\n  MongoDBCollectionCreateUpdateParameters as MongoDBCollectionCreateUpdateParametersMapper,\n  MongoRoleDefinitionCreateUpdateParameters as MongoRoleDefinitionCreateUpdateParametersMapper,\n  MongoUserDefinitionCreateUpdateParameters as MongoUserDefinitionCreateUpdateParametersMapper,\n  TableCreateUpdateParameters as TableCreateUpdateParametersMapper,\n  CassandraKeyspaceCreateUpdateParameters as CassandraKeyspaceCreateUpdateParametersMapper,\n  CassandraTableCreateUpdateParameters as CassandraTableCreateUpdateParametersMapper,\n  GremlinDatabaseCreateUpdateParameters as GremlinDatabaseCreateUpdateParametersMapper,\n  GremlinGraphCreateUpdateParameters as GremlinGraphCreateUpdateParametersMapper,\n  ClusterResource as ClusterResourceMapper,\n  CommandPostBody as CommandPostBodyMapper,\n  DataCenterResource as DataCenterResourceMapper,\n  NotebookWorkspaceCreateUpdateParameters as NotebookWorkspaceCreateUpdateParametersMapper,\n  PrivateEndpointConnection as PrivateEndpointConnectionMapper,\n  ServiceResourceCreateUpdateParameters as ServiceResourceCreateUpdateParametersMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const subscriptionId: OperationURLParameter = {\n  parameterPath: \"subscriptionId\",\n  mapper: {\n    constraints: {\n      MinLength: 1\n    },\n    serializedName: \"subscriptionId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const resourceGroupName: OperationURLParameter = {\n  parameterPath: \"resourceGroupName\",\n  mapper: {\n    constraints: {\n      MaxLength: 90,\n      MinLength: 1\n    },\n    serializedName: \"resourceGroupName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const accountName: OperationURLParameter = {\n  parameterPath: \"accountName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-z0-9]+(-[a-z0-9]+)*\"),\n      MaxLength: 50,\n      MinLength: 3\n    },\n    serializedName: \"accountName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2022-11-15\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const updateParameters: OperationParameter = {\n  parameterPath: \"updateParameters\",\n  mapper: DatabaseAccountUpdateParametersMapper\n};\n\nexport const createUpdateParameters: OperationParameter = {\n  parameterPath: \"createUpdateParameters\",\n  mapper: DatabaseAccountCreateUpdateParametersMapper\n};\n\nexport const failoverParameters: OperationParameter = {\n  parameterPath: \"failoverParameters\",\n  mapper: FailoverPoliciesMapper\n};\n\nexport const regionParameterForOffline: OperationParameter = {\n  parameterPath: \"regionParameterForOffline\",\n  mapper: RegionForOnlineOfflineMapper\n};\n\nexport const regionParameterForOnline: OperationParameter = {\n  parameterPath: \"regionParameterForOnline\",\n  mapper: RegionForOnlineOfflineMapper\n};\n\nexport const keyToRegenerate: OperationParameter = {\n  parameterPath: \"keyToRegenerate\",\n  mapper: DatabaseAccountRegenerateKeyParametersMapper\n};\n\nexport const filter: OperationQueryParameter = {\n  parameterPath: \"filter\",\n  mapper: {\n    serializedName: \"$filter\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const filter1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"filter\"],\n  mapper: {\n    serializedName: \"$filter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const databaseRid: OperationURLParameter = {\n  parameterPath: \"databaseRid\",\n  mapper: {\n    serializedName: \"databaseRid\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const collectionRid: OperationURLParameter = {\n  parameterPath: \"collectionRid\",\n  mapper: {\n    serializedName: \"collectionRid\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const region: OperationURLParameter = {\n  parameterPath: \"region\",\n  mapper: {\n    serializedName: \"region\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceRegion: OperationURLParameter = {\n  parameterPath: \"sourceRegion\",\n  mapper: {\n    serializedName: \"sourceRegion\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const targetRegion: OperationURLParameter = {\n  parameterPath: \"targetRegion\",\n  mapper: {\n    serializedName: \"targetRegion\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const partitionKeyRangeId: OperationURLParameter = {\n  parameterPath: \"partitionKeyRangeId\",\n  mapper: {\n    serializedName: \"partitionKeyRangeId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const databaseName: OperationURLParameter = {\n  parameterPath: \"databaseName\",\n  mapper: {\n    serializedName: \"databaseName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateSqlDatabaseParameters: OperationParameter = {\n  parameterPath: \"createUpdateSqlDatabaseParameters\",\n  mapper: SqlDatabaseCreateUpdateParametersMapper\n};\n\nexport const updateThroughputParameters: OperationParameter = {\n  parameterPath: \"updateThroughputParameters\",\n  mapper: ThroughputSettingsUpdateParametersMapper\n};\n\nexport const containerName: OperationURLParameter = {\n  parameterPath: \"containerName\",\n  mapper: {\n    serializedName: \"containerName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateSqlContainerParameters: OperationParameter = {\n  parameterPath: \"createUpdateSqlContainerParameters\",\n  mapper: SqlContainerCreateUpdateParametersMapper\n};\n\nexport const clientEncryptionKeyName: OperationURLParameter = {\n  parameterPath: \"clientEncryptionKeyName\",\n  mapper: {\n    serializedName: \"clientEncryptionKeyName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateClientEncryptionKeyParameters: OperationParameter = {\n  parameterPath: \"createUpdateClientEncryptionKeyParameters\",\n  mapper: ClientEncryptionKeyCreateUpdateParametersMapper\n};\n\nexport const storedProcedureName: OperationURLParameter = {\n  parameterPath: \"storedProcedureName\",\n  mapper: {\n    serializedName: \"storedProcedureName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateSqlStoredProcedureParameters: OperationParameter = {\n  parameterPath: \"createUpdateSqlStoredProcedureParameters\",\n  mapper: SqlStoredProcedureCreateUpdateParametersMapper\n};\n\nexport const userDefinedFunctionName: OperationURLParameter = {\n  parameterPath: \"userDefinedFunctionName\",\n  mapper: {\n    serializedName: \"userDefinedFunctionName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateSqlUserDefinedFunctionParameters: OperationParameter = {\n  parameterPath: \"createUpdateSqlUserDefinedFunctionParameters\",\n  mapper: SqlUserDefinedFunctionCreateUpdateParametersMapper\n};\n\nexport const triggerName: OperationURLParameter = {\n  parameterPath: \"triggerName\",\n  mapper: {\n    serializedName: \"triggerName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateSqlTriggerParameters: OperationParameter = {\n  parameterPath: \"createUpdateSqlTriggerParameters\",\n  mapper: SqlTriggerCreateUpdateParametersMapper\n};\n\nexport const roleDefinitionId: OperationURLParameter = {\n  parameterPath: \"roleDefinitionId\",\n  mapper: {\n    serializedName: \"roleDefinitionId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateSqlRoleDefinitionParameters: OperationParameter = {\n  parameterPath: \"createUpdateSqlRoleDefinitionParameters\",\n  mapper: SqlRoleDefinitionCreateUpdateParametersMapper\n};\n\nexport const roleAssignmentId: OperationURLParameter = {\n  parameterPath: \"roleAssignmentId\",\n  mapper: {\n    serializedName: \"roleAssignmentId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateSqlRoleAssignmentParameters: OperationParameter = {\n  parameterPath: \"createUpdateSqlRoleAssignmentParameters\",\n  mapper: SqlRoleAssignmentCreateUpdateParametersMapper\n};\n\nexport const location: OperationParameter = {\n  parameterPath: \"location\",\n  mapper: ContinuousBackupRestoreLocationMapper\n};\n\nexport const createUpdateMongoDBDatabaseParameters: OperationParameter = {\n  parameterPath: \"createUpdateMongoDBDatabaseParameters\",\n  mapper: MongoDBDatabaseCreateUpdateParametersMapper\n};\n\nexport const collectionName: OperationURLParameter = {\n  parameterPath: \"collectionName\",\n  mapper: {\n    serializedName: \"collectionName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateMongoDBCollectionParameters: OperationParameter = {\n  parameterPath: \"createUpdateMongoDBCollectionParameters\",\n  mapper: MongoDBCollectionCreateUpdateParametersMapper\n};\n\nexport const mongoRoleDefinitionId: OperationURLParameter = {\n  parameterPath: \"mongoRoleDefinitionId\",\n  mapper: {\n    serializedName: \"mongoRoleDefinitionId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateMongoRoleDefinitionParameters: OperationParameter = {\n  parameterPath: \"createUpdateMongoRoleDefinitionParameters\",\n  mapper: MongoRoleDefinitionCreateUpdateParametersMapper\n};\n\nexport const mongoUserDefinitionId: OperationURLParameter = {\n  parameterPath: \"mongoUserDefinitionId\",\n  mapper: {\n    serializedName: \"mongoUserDefinitionId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateMongoUserDefinitionParameters: OperationParameter = {\n  parameterPath: \"createUpdateMongoUserDefinitionParameters\",\n  mapper: MongoUserDefinitionCreateUpdateParametersMapper\n};\n\nexport const tableName: OperationURLParameter = {\n  parameterPath: \"tableName\",\n  mapper: {\n    serializedName: \"tableName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateTableParameters: OperationParameter = {\n  parameterPath: \"createUpdateTableParameters\",\n  mapper: TableCreateUpdateParametersMapper\n};\n\nexport const keyspaceName: OperationURLParameter = {\n  parameterPath: \"keyspaceName\",\n  mapper: {\n    serializedName: \"keyspaceName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateCassandraKeyspaceParameters: OperationParameter = {\n  parameterPath: \"createUpdateCassandraKeyspaceParameters\",\n  mapper: CassandraKeyspaceCreateUpdateParametersMapper\n};\n\nexport const createUpdateCassandraTableParameters: OperationParameter = {\n  parameterPath: \"createUpdateCassandraTableParameters\",\n  mapper: CassandraTableCreateUpdateParametersMapper\n};\n\nexport const createUpdateGremlinDatabaseParameters: OperationParameter = {\n  parameterPath: \"createUpdateGremlinDatabaseParameters\",\n  mapper: GremlinDatabaseCreateUpdateParametersMapper\n};\n\nexport const graphName: OperationURLParameter = {\n  parameterPath: \"graphName\",\n  mapper: {\n    serializedName: \"graphName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateGremlinGraphParameters: OperationParameter = {\n  parameterPath: \"createUpdateGremlinGraphParameters\",\n  mapper: GremlinGraphCreateUpdateParametersMapper\n};\n\nexport const location1: OperationURLParameter = {\n  parameterPath: \"location\",\n  mapper: {\n    serializedName: \"location\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const clusterName: OperationURLParameter = {\n  parameterPath: \"clusterName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$\"),\n      MaxLength: 100,\n      MinLength: 1\n    },\n    serializedName: \"clusterName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ClusterResourceMapper\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: CommandPostBodyMapper\n};\n\nexport const dataCenterName: OperationURLParameter = {\n  parameterPath: \"dataCenterName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$\"),\n      MaxLength: 100,\n      MinLength: 1\n    },\n    serializedName: \"dataCenterName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DataCenterResourceMapper\n};\n\nexport const notebookWorkspaceName: OperationURLParameter = {\n  parameterPath: \"notebookWorkspaceName\",\n  mapper: {\n    serializedName: \"notebookWorkspaceName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const notebookCreateUpdateParameters: OperationParameter = {\n  parameterPath: \"notebookCreateUpdateParameters\",\n  mapper: NotebookWorkspaceCreateUpdateParametersMapper\n};\n\nexport const privateEndpointConnectionName: OperationURLParameter = {\n  parameterPath: \"privateEndpointConnectionName\",\n  mapper: {\n    serializedName: \"privateEndpointConnectionName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const parameters: OperationParameter = {\n  parameterPath: \"parameters\",\n  mapper: PrivateEndpointConnectionMapper\n};\n\nexport const groupName: OperationURLParameter = {\n  parameterPath: \"groupName\",\n  mapper: {\n    serializedName: \"groupName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const instanceId: OperationURLParameter = {\n  parameterPath: \"instanceId\",\n  mapper: {\n    serializedName: \"instanceId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const restorableSqlDatabaseRid: OperationQueryParameter = {\n  parameterPath: [\"options\", \"restorableSqlDatabaseRid\"],\n  mapper: {\n    serializedName: \"restorableSqlDatabaseRid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const startTime: OperationQueryParameter = {\n  parameterPath: [\"options\", \"startTime\"],\n  mapper: {\n    serializedName: \"startTime\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const endTime: OperationQueryParameter = {\n  parameterPath: [\"options\", \"endTime\"],\n  mapper: {\n    serializedName: \"endTime\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const restoreLocation: OperationQueryParameter = {\n  parameterPath: [\"options\", \"restoreLocation\"],\n  mapper: {\n    serializedName: \"restoreLocation\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const restoreTimestampInUtc: OperationQueryParameter = {\n  parameterPath: [\"options\", \"restoreTimestampInUtc\"],\n  mapper: {\n    serializedName: \"restoreTimestampInUtc\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const restorableMongodbDatabaseRid: OperationQueryParameter = {\n  parameterPath: [\"options\", \"restorableMongodbDatabaseRid\"],\n  mapper: {\n    serializedName: \"restorableMongodbDatabaseRid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const restorableGremlinDatabaseRid: OperationQueryParameter = {\n  parameterPath: [\"options\", \"restorableGremlinDatabaseRid\"],\n  mapper: {\n    serializedName: \"restorableGremlinDatabaseRid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const createUpdateParameters1: OperationParameter = {\n  parameterPath: \"createUpdateParameters\",\n  mapper: ServiceResourceCreateUpdateParametersMapper\n};\n\nexport const serviceName: OperationURLParameter = {\n  parameterPath: \"serviceName\",\n  mapper: {\n    constraints: {\n      MaxLength: 50,\n      MinLength: 3\n    },\n    serializedName: \"serviceName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { LongRunningOperation, LroResponse } from \"@azure/core-lro\";\n\nexport function createLroSpec<T>(inputs: {\n  sendOperationFn: (args: any, spec: any) => Promise<LroResponse<T>>;\n  args: Record<string, unknown>;\n  spec: {\n    readonly requestBody?: unknown;\n    readonly path?: string;\n    readonly httpMethod: string;\n  } & Record<string, any>;\n}): LongRunningOperation<T> {\n  const { args, spec, sendOperationFn } = inputs;\n  return {\n    requestMethod: spec.httpMethod,\n    requestPath: spec.path!,\n    sendInitialRequest: () => sendOperationFn(args, spec),\n    sendPollRequest: (\n      path: string,\n      options?: { abortSignal?: AbortSignalLike }\n    ) => {\n      const { requestBody, ...restSpec } = spec;\n      return sendOperationFn(args, {\n        ...restSpec,\n        httpMethod: \"GET\",\n        path,\n        abortSignal: options?.abortSignal\n      });\n    }\n  };\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { DatabaseAccounts } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  DatabaseAccountGetResults,\n  DatabaseAccountsListOptionalParams,\n  DatabaseAccountsListResponse,\n  DatabaseAccountsListByResourceGroupOptionalParams,\n  DatabaseAccountsListByResourceGroupResponse,\n  Metric,\n  DatabaseAccountsListMetricsOptionalParams,\n  DatabaseAccountsListMetricsResponse,\n  Usage,\n  DatabaseAccountsListUsagesOptionalParams,\n  DatabaseAccountsListUsagesResponse,\n  MetricDefinition,\n  DatabaseAccountsListMetricDefinitionsOptionalParams,\n  DatabaseAccountsListMetricDefinitionsResponse,\n  DatabaseAccountsGetOptionalParams,\n  DatabaseAccountsGetResponse,\n  DatabaseAccountUpdateParameters,\n  DatabaseAccountsUpdateOptionalParams,\n  DatabaseAccountsUpdateResponse,\n  DatabaseAccountCreateUpdateParameters,\n  DatabaseAccountsCreateOrUpdateOptionalParams,\n  DatabaseAccountsCreateOrUpdateResponse,\n  DatabaseAccountsDeleteOptionalParams,\n  DatabaseAccountsDeleteResponse,\n  FailoverPolicies,\n  DatabaseAccountsFailoverPriorityChangeOptionalParams,\n  DatabaseAccountsFailoverPriorityChangeResponse,\n  DatabaseAccountsListKeysOptionalParams,\n  DatabaseAccountsListKeysResponse,\n  DatabaseAccountsListConnectionStringsOptionalParams,\n  DatabaseAccountsListConnectionStringsResponse,\n  RegionForOnlineOffline,\n  DatabaseAccountsOfflineRegionOptionalParams,\n  DatabaseAccountsOnlineRegionOptionalParams,\n  DatabaseAccountsGetReadOnlyKeysOptionalParams,\n  DatabaseAccountsGetReadOnlyKeysResponse,\n  DatabaseAccountsListReadOnlyKeysOptionalParams,\n  DatabaseAccountsListReadOnlyKeysResponse,\n  DatabaseAccountRegenerateKeyParameters,\n  DatabaseAccountsRegenerateKeyOptionalParams,\n  DatabaseAccountsCheckNameExistsOptionalParams,\n  DatabaseAccountsCheckNameExistsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DatabaseAccounts operations. */\nexport class DatabaseAccountsImpl implements DatabaseAccounts {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class DatabaseAccounts class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the Azure Cosmos DB database accounts available under the subscription.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: DatabaseAccountsListOptionalParams\n  ): PagedAsyncIterableIterator<DatabaseAccountGetResults> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: DatabaseAccountsListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<DatabaseAccountGetResults[]> {\n    let result: DatabaseAccountsListResponse;\n    result = await this._list(options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    options?: DatabaseAccountsListOptionalParams\n  ): AsyncIterableIterator<DatabaseAccountGetResults> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the Azure Cosmos DB database accounts available under the given resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: DatabaseAccountsListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<DatabaseAccountGetResults> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: DatabaseAccountsListByResourceGroupOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<DatabaseAccountGetResults[]> {\n    let result: DatabaseAccountsListByResourceGroupResponse;\n    result = await this._listByResourceGroup(resourceGroupName, options);\n    yield result.value || [];\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: DatabaseAccountsListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<DatabaseAccountGetResults> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    filter: string,\n    options?: DatabaseAccountsListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<Metric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    filter: string,\n    options?: DatabaseAccountsListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Metric[]> {\n    let result: DatabaseAccountsListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    filter: string,\n    options?: DatabaseAccountsListMetricsOptionalParams\n  ): AsyncIterableIterator<Metric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the usages (most recent data) for the given database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listUsages(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListUsagesOptionalParams\n  ): PagedAsyncIterableIterator<Usage> {\n    const iter = this.listUsagesPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listUsagesPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listUsagesPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListUsagesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Usage[]> {\n    let result: DatabaseAccountsListUsagesResponse;\n    result = await this._listUsages(resourceGroupName, accountName, options);\n    yield result.value || [];\n  }\n\n  private async *listUsagesPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListUsagesOptionalParams\n  ): AsyncIterableIterator<Usage> {\n    for await (const page of this.listUsagesPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves metric definitions for the given database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listMetricDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListMetricDefinitionsOptionalParams\n  ): PagedAsyncIterableIterator<MetricDefinition> {\n    const iter = this.listMetricDefinitionsPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricDefinitionsPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricDefinitionsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListMetricDefinitionsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<MetricDefinition[]> {\n    let result: DatabaseAccountsListMetricDefinitionsResponse;\n    result = await this._listMetricDefinitions(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricDefinitionsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListMetricDefinitionsOptionalParams\n  ): AsyncIterableIterator<MetricDefinition> {\n    for await (const page of this.listMetricDefinitionsPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the properties of an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsGetOptionalParams\n  ): Promise<DatabaseAccountsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Updates the properties of an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param updateParameters The parameters to provide for the current database account.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    accountName: string,\n    updateParameters: DatabaseAccountUpdateParameters,\n    options?: DatabaseAccountsUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DatabaseAccountsUpdateResponse>,\n      DatabaseAccountsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<DatabaseAccountsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, updateParameters, options },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      DatabaseAccountsUpdateResponse,\n      OperationState<DatabaseAccountsUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates the properties of an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param updateParameters The parameters to provide for the current database account.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    updateParameters: DatabaseAccountUpdateParameters,\n    options?: DatabaseAccountsUpdateOptionalParams\n  ): Promise<DatabaseAccountsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      accountName,\n      updateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Creates or updates an Azure Cosmos DB database account. The \"Update\" method is preferred when\n   * performing updates on an account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param createUpdateParameters The parameters to provide for the current database account.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    accountName: string,\n    createUpdateParameters: DatabaseAccountCreateUpdateParameters,\n    options?: DatabaseAccountsCreateOrUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DatabaseAccountsCreateOrUpdateResponse>,\n      DatabaseAccountsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<DatabaseAccountsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, createUpdateParameters, options },\n      spec: createOrUpdateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      DatabaseAccountsCreateOrUpdateResponse,\n      OperationState<DatabaseAccountsCreateOrUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates an Azure Cosmos DB database account. The \"Update\" method is preferred when\n   * performing updates on an account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param createUpdateParameters The parameters to provide for the current database account.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    createUpdateParameters: DatabaseAccountCreateUpdateParameters,\n    options?: DatabaseAccountsCreateOrUpdateOptionalParams\n  ): Promise<DatabaseAccountsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      accountName,\n      createUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsDeleteOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DatabaseAccountsDeleteResponse>,\n      DatabaseAccountsDeleteResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<DatabaseAccountsDeleteResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<\n      DatabaseAccountsDeleteResponse,\n      OperationState<DatabaseAccountsDeleteResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsDeleteOptionalParams\n  ): Promise<DatabaseAccountsDeleteResponse> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0\n   * indicates a write region. The maximum value for a failover priority = (total number of regions - 1).\n   * Failover priority values must be unique for each of the regions in which the database account\n   * exists.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param failoverParameters The new failover policies for the database account.\n   * @param options The options parameters.\n   */\n  async beginFailoverPriorityChange(\n    resourceGroupName: string,\n    accountName: string,\n    failoverParameters: FailoverPolicies,\n    options?: DatabaseAccountsFailoverPriorityChangeOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DatabaseAccountsFailoverPriorityChangeResponse>,\n      DatabaseAccountsFailoverPriorityChangeResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<DatabaseAccountsFailoverPriorityChangeResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, failoverParameters, options },\n      spec: failoverPriorityChangeOperationSpec\n    });\n    const poller = await createHttpPoller<\n      DatabaseAccountsFailoverPriorityChangeResponse,\n      OperationState<DatabaseAccountsFailoverPriorityChangeResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0\n   * indicates a write region. The maximum value for a failover priority = (total number of regions - 1).\n   * Failover priority values must be unique for each of the regions in which the database account\n   * exists.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param failoverParameters The new failover policies for the database account.\n   * @param options The options parameters.\n   */\n  async beginFailoverPriorityChangeAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    failoverParameters: FailoverPolicies,\n    options?: DatabaseAccountsFailoverPriorityChangeOptionalParams\n  ): Promise<DatabaseAccountsFailoverPriorityChangeResponse> {\n    const poller = await this.beginFailoverPriorityChange(\n      resourceGroupName,\n      accountName,\n      failoverParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists all the Azure Cosmos DB database accounts available under the subscription.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: DatabaseAccountsListOptionalParams\n  ): Promise<DatabaseAccountsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Lists all the Azure Cosmos DB database accounts available under the given resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: DatabaseAccountsListByResourceGroupOptionalParams\n  ): Promise<DatabaseAccountsListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * Lists the access keys for the specified Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  listKeys(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListKeysOptionalParams\n  ): Promise<DatabaseAccountsListKeysResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listKeysOperationSpec\n    );\n  }\n\n  /**\n   * Lists the connection strings for the specified Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  listConnectionStrings(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListConnectionStringsOptionalParams\n  ): Promise<DatabaseAccountsListConnectionStringsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listConnectionStringsOperationSpec\n    );\n  }\n\n  /**\n   * Offline the specified region for the specified Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param regionParameterForOffline Cosmos DB region to offline for the database account.\n   * @param options The options parameters.\n   */\n  async beginOfflineRegion(\n    resourceGroupName: string,\n    accountName: string,\n    regionParameterForOffline: RegionForOnlineOffline,\n    options?: DatabaseAccountsOfflineRegionOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        regionParameterForOffline,\n        options\n      },\n      spec: offlineRegionOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Offline the specified region for the specified Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param regionParameterForOffline Cosmos DB region to offline for the database account.\n   * @param options The options parameters.\n   */\n  async beginOfflineRegionAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    regionParameterForOffline: RegionForOnlineOffline,\n    options?: DatabaseAccountsOfflineRegionOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginOfflineRegion(\n      resourceGroupName,\n      accountName,\n      regionParameterForOffline,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Online the specified region for the specified Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param regionParameterForOnline Cosmos DB region to online for the database account.\n   * @param options The options parameters.\n   */\n  async beginOnlineRegion(\n    resourceGroupName: string,\n    accountName: string,\n    regionParameterForOnline: RegionForOnlineOffline,\n    options?: DatabaseAccountsOnlineRegionOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        regionParameterForOnline,\n        options\n      },\n      spec: onlineRegionOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Online the specified region for the specified Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param regionParameterForOnline Cosmos DB region to online for the database account.\n   * @param options The options parameters.\n   */\n  async beginOnlineRegionAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    regionParameterForOnline: RegionForOnlineOffline,\n    options?: DatabaseAccountsOnlineRegionOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginOnlineRegion(\n      resourceGroupName,\n      accountName,\n      regionParameterForOnline,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists the read-only access keys for the specified Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  getReadOnlyKeys(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsGetReadOnlyKeysOptionalParams\n  ): Promise<DatabaseAccountsGetReadOnlyKeysResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      getReadOnlyKeysOperationSpec\n    );\n  }\n\n  /**\n   * Lists the read-only access keys for the specified Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  listReadOnlyKeys(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListReadOnlyKeysOptionalParams\n  ): Promise<DatabaseAccountsListReadOnlyKeysResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listReadOnlyKeysOperationSpec\n    );\n  }\n\n  /**\n   * Regenerates an access key for the specified Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyToRegenerate The name of the key to regenerate.\n   * @param options The options parameters.\n   */\n  async beginRegenerateKey(\n    resourceGroupName: string,\n    accountName: string,\n    keyToRegenerate: DatabaseAccountRegenerateKeyParameters,\n    options?: DatabaseAccountsRegenerateKeyOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, keyToRegenerate, options },\n      spec: regenerateKeyOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Regenerates an access key for the specified Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyToRegenerate The name of the key to regenerate.\n   * @param options The options parameters.\n   */\n  async beginRegenerateKeyAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyToRegenerate: DatabaseAccountRegenerateKeyParameters,\n    options?: DatabaseAccountsRegenerateKeyOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginRegenerateKey(\n      resourceGroupName,\n      accountName,\n      keyToRegenerate,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only\n   * lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  checkNameExists(\n    accountName: string,\n    options?: DatabaseAccountsCheckNameExistsOptionalParams\n  ): Promise<DatabaseAccountsCheckNameExistsResponse> {\n    return this.client.sendOperationRequest(\n      { accountName, options },\n      checkNameExistsOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    filter: string,\n    options?: DatabaseAccountsListMetricsOptionalParams\n  ): Promise<DatabaseAccountsListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, filter, options },\n      listMetricsOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves the usages (most recent data) for the given database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listUsages(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListUsagesOptionalParams\n  ): Promise<DatabaseAccountsListUsagesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listUsagesOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves metric definitions for the given database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listMetricDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    options?: DatabaseAccountsListMetricDefinitionsOptionalParams\n  ): Promise<DatabaseAccountsListMetricDefinitionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listMetricDefinitionsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatabaseAccountGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatabaseAccountGetResults\n    },\n    201: {\n      bodyMapper: Mappers.DatabaseAccountGetResults\n    },\n    202: {\n      bodyMapper: Mappers.DatabaseAccountGetResults\n    },\n    204: {\n      bodyMapper: Mappers.DatabaseAccountGetResults\n    }\n  },\n  requestBody: Parameters.updateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatabaseAccountGetResults\n    },\n    201: {\n      bodyMapper: Mappers.DatabaseAccountGetResults\n    },\n    202: {\n      bodyMapper: Mappers.DatabaseAccountGetResults\n    },\n    204: {\n      bodyMapper: Mappers.DatabaseAccountGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.DatabaseAccountsDeleteHeaders\n    },\n    201: {\n      headersMapper: Mappers.DatabaseAccountsDeleteHeaders\n    },\n    202: {\n      headersMapper: Mappers.DatabaseAccountsDeleteHeaders\n    },\n    204: {\n      headersMapper: Mappers.DatabaseAccountsDeleteHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  serializer\n};\nconst failoverPriorityChangeOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      headersMapper: Mappers.DatabaseAccountsFailoverPriorityChangeHeaders\n    },\n    201: {\n      headersMapper: Mappers.DatabaseAccountsFailoverPriorityChangeHeaders\n    },\n    202: {\n      headersMapper: Mappers.DatabaseAccountsFailoverPriorityChangeHeaders\n    },\n    204: {\n      headersMapper: Mappers.DatabaseAccountsFailoverPriorityChangeHeaders\n    }\n  },\n  requestBody: Parameters.failoverParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatabaseAccountsListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatabaseAccountsListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listKeysOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatabaseAccountListKeysResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listConnectionStringsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatabaseAccountListConnectionStringsResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst offlineRegionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.regionParameterForOffline,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst onlineRegionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.regionParameterForOnline,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getReadOnlyKeysOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatabaseAccountListReadOnlyKeysResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listReadOnlyKeysOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatabaseAccountListReadOnlyKeysResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst regenerateKeyOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey\",\n  httpMethod: \"POST\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {} },\n  requestBody: Parameters.keyToRegenerate,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst checkNameExistsOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}\",\n  httpMethod: \"HEAD\",\n  responses: { 200: {}, 404: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.accountName],\n  serializer\n};\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listUsagesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UsagesResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listMetricDefinitionsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetricDefinitionsListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Operations } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  Operation,\n  OperationsListNextOptionalParams,\n  OperationsListOptionalParams,\n  OperationsListResponse,\n  OperationsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Operations operations. */\nexport class OperationsImpl implements Operations {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class Operations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all of the available Cosmos DB Resource Provider operations.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: OperationsListOptionalParams\n  ): PagedAsyncIterableIterator<Operation> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: OperationsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Operation[]> {\n    let result: OperationsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: OperationsListOptionalParams\n  ): AsyncIterableIterator<Operation> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all of the available Cosmos DB Resource Provider operations.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: OperationsListOptionalParams\n  ): Promise<OperationsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: OperationsListNextOptionalParams\n  ): Promise<OperationsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.DocumentDB/operations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationListResult\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { Database } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  Metric,\n  DatabaseListMetricsOptionalParams,\n  DatabaseListMetricsResponse,\n  Usage,\n  DatabaseListUsagesOptionalParams,\n  DatabaseListUsagesResponse,\n  MetricDefinition,\n  DatabaseListMetricDefinitionsOptionalParams,\n  DatabaseListMetricDefinitionsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Database operations. */\nexport class DatabaseImpl implements Database {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class Database class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account and database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    filter: string,\n    options?: DatabaseListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<Metric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseRid,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    filter: string,\n    options?: DatabaseListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Metric[]> {\n    let result: DatabaseListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    filter: string,\n    options?: DatabaseListMetricsOptionalParams\n  ): AsyncIterableIterator<Metric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the usages (most recent data) for the given database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param options The options parameters.\n   */\n  public listUsages(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    options?: DatabaseListUsagesOptionalParams\n  ): PagedAsyncIterableIterator<Usage> {\n    const iter = this.listUsagesPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listUsagesPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseRid,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listUsagesPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    options?: DatabaseListUsagesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Usage[]> {\n    let result: DatabaseListUsagesResponse;\n    result = await this._listUsages(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listUsagesPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    options?: DatabaseListUsagesOptionalParams\n  ): AsyncIterableIterator<Usage> {\n    for await (const page of this.listUsagesPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves metric definitions for the given database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param options The options parameters.\n   */\n  public listMetricDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    options?: DatabaseListMetricDefinitionsOptionalParams\n  ): PagedAsyncIterableIterator<MetricDefinition> {\n    const iter = this.listMetricDefinitionsPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricDefinitionsPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseRid,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricDefinitionsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    options?: DatabaseListMetricDefinitionsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<MetricDefinition[]> {\n    let result: DatabaseListMetricDefinitionsResponse;\n    result = await this._listMetricDefinitions(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricDefinitionsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    options?: DatabaseListMetricDefinitionsOptionalParams\n  ): AsyncIterableIterator<MetricDefinition> {\n    for await (const page of this.listMetricDefinitionsPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account and database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    filter: string,\n    options?: DatabaseListMetricsOptionalParams\n  ): Promise<DatabaseListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseRid, filter, options },\n      listMetricsOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves the usages (most recent data) for the given database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param options The options parameters.\n   */\n  private _listUsages(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    options?: DatabaseListUsagesOptionalParams\n  ): Promise<DatabaseListUsagesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseRid, options },\n      listUsagesOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves metric definitions for the given database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param options The options parameters.\n   */\n  private _listMetricDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    options?: DatabaseListMetricDefinitionsOptionalParams\n  ): Promise<DatabaseListMetricDefinitionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseRid, options },\n      listMetricDefinitionsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listUsagesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UsagesResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listMetricDefinitionsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetricDefinitionsListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { Collection } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  Metric,\n  CollectionListMetricsOptionalParams,\n  CollectionListMetricsResponse,\n  Usage,\n  CollectionListUsagesOptionalParams,\n  CollectionListUsagesResponse,\n  MetricDefinition,\n  CollectionListMetricDefinitionsOptionalParams,\n  CollectionListMetricDefinitionsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Collection operations. */\nexport class CollectionImpl implements Collection {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class Collection class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account and collection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<Metric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseRid,\n          collectionRid,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Metric[]> {\n    let result: CollectionListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionListMetricsOptionalParams\n  ): AsyncIterableIterator<Metric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the usages (most recent storage data) for the given collection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param options The options parameters.\n   */\n  public listUsages(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionListUsagesOptionalParams\n  ): PagedAsyncIterableIterator<Usage> {\n    const iter = this.listUsagesPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listUsagesPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseRid,\n          collectionRid,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listUsagesPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionListUsagesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Usage[]> {\n    let result: CollectionListUsagesResponse;\n    result = await this._listUsages(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listUsagesPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionListUsagesOptionalParams\n  ): AsyncIterableIterator<Usage> {\n    for await (const page of this.listUsagesPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves metric definitions for the given collection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param options The options parameters.\n   */\n  public listMetricDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionListMetricDefinitionsOptionalParams\n  ): PagedAsyncIterableIterator<MetricDefinition> {\n    const iter = this.listMetricDefinitionsPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricDefinitionsPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseRid,\n          collectionRid,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricDefinitionsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionListMetricDefinitionsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<MetricDefinition[]> {\n    let result: CollectionListMetricDefinitionsResponse;\n    result = await this._listMetricDefinitions(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricDefinitionsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionListMetricDefinitionsOptionalParams\n  ): AsyncIterableIterator<MetricDefinition> {\n    for await (const page of this.listMetricDefinitionsPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account and collection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionListMetricsOptionalParams\n  ): Promise<CollectionListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        databaseRid,\n        collectionRid,\n        filter,\n        options\n      },\n      listMetricsOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves the usages (most recent storage data) for the given collection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param options The options parameters.\n   */\n  private _listUsages(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionListUsagesOptionalParams\n  ): Promise<CollectionListUsagesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseRid, collectionRid, options },\n      listUsagesOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves metric definitions for the given collection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param options The options parameters.\n   */\n  private _listMetricDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionListMetricDefinitionsOptionalParams\n  ): Promise<CollectionListMetricDefinitionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseRid, collectionRid, options },\n      listMetricDefinitionsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid,\n    Parameters.collectionRid\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listUsagesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UsagesResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid,\n    Parameters.collectionRid\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listMetricDefinitionsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetricDefinitionsListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid,\n    Parameters.collectionRid\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { CollectionRegion } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  Metric,\n  CollectionRegionListMetricsOptionalParams,\n  CollectionRegionListMetricsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing CollectionRegion operations. */\nexport class CollectionRegionImpl implements CollectionRegion {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class CollectionRegion class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account, collection and\n   * region.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param region Cosmos DB region, with spaces between words and each word capitalized.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionRegionListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<Metric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      region,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          region,\n          databaseRid,\n          collectionRid,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionRegionListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Metric[]> {\n    let result: CollectionRegionListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      region,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionRegionListMetricsOptionalParams\n  ): AsyncIterableIterator<Metric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      region,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account, collection and\n   * region.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param region Cosmos DB region, with spaces between words and each word capitalized.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionRegionListMetricsOptionalParams\n  ): Promise<CollectionRegionListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        region,\n        databaseRid,\n        collectionRid,\n        filter,\n        options\n      },\n      listMetricsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid,\n    Parameters.collectionRid,\n    Parameters.region\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { DatabaseAccountRegion } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  Metric,\n  DatabaseAccountRegionListMetricsOptionalParams,\n  DatabaseAccountRegionListMetricsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DatabaseAccountRegion operations. */\nexport class DatabaseAccountRegionImpl implements DatabaseAccountRegion {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class DatabaseAccountRegion class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account and region.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param region Cosmos DB region, with spaces between words and each word capitalized.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    filter: string,\n    options?: DatabaseAccountRegionListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<Metric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      region,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          region,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    filter: string,\n    options?: DatabaseAccountRegionListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Metric[]> {\n    let result: DatabaseAccountRegionListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      region,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    filter: string,\n    options?: DatabaseAccountRegionListMetricsOptionalParams\n  ): AsyncIterableIterator<Metric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      region,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account and region.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param region Cosmos DB region, with spaces between words and each word capitalized.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    filter: string,\n    options?: DatabaseAccountRegionListMetricsOptionalParams\n  ): Promise<DatabaseAccountRegionListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, region, filter, options },\n      listMetricsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.region\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { PercentileSourceTarget } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  PercentileMetric,\n  PercentileSourceTargetListMetricsOptionalParams,\n  PercentileSourceTargetListMetricsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PercentileSourceTarget operations. */\nexport class PercentileSourceTargetImpl implements PercentileSourceTarget {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class PercentileSourceTarget class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given account, source and target\n   * region. This url is only for PBS and Replication Latency data\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between\n   *                     words and each word capitalized.\n   * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between\n   *                     words and each word capitalized.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    sourceRegion: string,\n    targetRegion: string,\n    filter: string,\n    options?: PercentileSourceTargetListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<PercentileMetric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      sourceRegion,\n      targetRegion,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          sourceRegion,\n          targetRegion,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    sourceRegion: string,\n    targetRegion: string,\n    filter: string,\n    options?: PercentileSourceTargetListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PercentileMetric[]> {\n    let result: PercentileSourceTargetListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      sourceRegion,\n      targetRegion,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    sourceRegion: string,\n    targetRegion: string,\n    filter: string,\n    options?: PercentileSourceTargetListMetricsOptionalParams\n  ): AsyncIterableIterator<PercentileMetric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      sourceRegion,\n      targetRegion,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given account, source and target\n   * region. This url is only for PBS and Replication Latency data\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between\n   *                     words and each word capitalized.\n   * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between\n   *                     words and each word capitalized.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    sourceRegion: string,\n    targetRegion: string,\n    filter: string,\n    options?: PercentileSourceTargetListMetricsOptionalParams\n  ): Promise<PercentileSourceTargetListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        sourceRegion,\n        targetRegion,\n        filter,\n        options\n      },\n      listMetricsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PercentileMetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.sourceRegion,\n    Parameters.targetRegion\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { PercentileTarget } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  PercentileMetric,\n  PercentileTargetListMetricsOptionalParams,\n  PercentileTargetListMetricsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PercentileTarget operations. */\nexport class PercentileTargetImpl implements PercentileTarget {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class PercentileTarget class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given account target region. This url\n   * is only for PBS and Replication Latency data\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between\n   *                     words and each word capitalized.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    targetRegion: string,\n    filter: string,\n    options?: PercentileTargetListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<PercentileMetric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      targetRegion,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          targetRegion,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    targetRegion: string,\n    filter: string,\n    options?: PercentileTargetListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PercentileMetric[]> {\n    let result: PercentileTargetListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      targetRegion,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    targetRegion: string,\n    filter: string,\n    options?: PercentileTargetListMetricsOptionalParams\n  ): AsyncIterableIterator<PercentileMetric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      targetRegion,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given account target region. This url\n   * is only for PBS and Replication Latency data\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between\n   *                     words and each word capitalized.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    targetRegion: string,\n    filter: string,\n    options?: PercentileTargetListMetricsOptionalParams\n  ): Promise<PercentileTargetListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, targetRegion, filter, options },\n      listMetricsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PercentileMetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.targetRegion\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { Percentile } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  PercentileMetric,\n  PercentileListMetricsOptionalParams,\n  PercentileListMetricsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Percentile operations. */\nexport class PercentileImpl implements Percentile {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class Percentile class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account. This url is\n   * only for PBS and Replication Latency data\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    filter: string,\n    options?: PercentileListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<PercentileMetric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    filter: string,\n    options?: PercentileListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PercentileMetric[]> {\n    let result: PercentileListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    filter: string,\n    options?: PercentileListMetricsOptionalParams\n  ): AsyncIterableIterator<PercentileMetric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given database account. This url is\n   * only for PBS and Replication Latency data\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    filter: string,\n    options?: PercentileListMetricsOptionalParams\n  ): Promise<PercentileListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, filter, options },\n      listMetricsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PercentileMetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { CollectionPartitionRegion } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  PartitionMetric,\n  CollectionPartitionRegionListMetricsOptionalParams,\n  CollectionPartitionRegionListMetricsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing CollectionPartitionRegion operations. */\nexport class CollectionPartitionRegionImpl\n  implements CollectionPartitionRegion {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class CollectionPartitionRegion class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given collection and region, split by\n   * partition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param region Cosmos DB region, with spaces between words and each word capitalized.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionPartitionRegionListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<PartitionMetric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      region,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          region,\n          databaseRid,\n          collectionRid,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionPartitionRegionListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PartitionMetric[]> {\n    let result: CollectionPartitionRegionListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      region,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionPartitionRegionListMetricsOptionalParams\n  ): AsyncIterableIterator<PartitionMetric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      region,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given collection and region, split by\n   * partition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param region Cosmos DB region, with spaces between words and each word capitalized.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionPartitionRegionListMetricsOptionalParams\n  ): Promise<CollectionPartitionRegionListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        region,\n        databaseRid,\n        collectionRid,\n        filter,\n        options\n      },\n      listMetricsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartitionMetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid,\n    Parameters.collectionRid,\n    Parameters.region\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { CollectionPartition } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  PartitionMetric,\n  CollectionPartitionListMetricsOptionalParams,\n  CollectionPartitionListMetricsResponse,\n  PartitionUsage,\n  CollectionPartitionListUsagesOptionalParams,\n  CollectionPartitionListUsagesResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing CollectionPartition operations. */\nexport class CollectionPartitionImpl implements CollectionPartition {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class CollectionPartition class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given collection, split by partition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionPartitionListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<PartitionMetric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseRid,\n          collectionRid,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionPartitionListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PartitionMetric[]> {\n    let result: CollectionPartitionListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionPartitionListMetricsOptionalParams\n  ): AsyncIterableIterator<PartitionMetric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the usages (most recent storage data) for the given collection, split by partition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param options The options parameters.\n   */\n  public listUsages(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionPartitionListUsagesOptionalParams\n  ): PagedAsyncIterableIterator<PartitionUsage> {\n    const iter = this.listUsagesPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listUsagesPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseRid,\n          collectionRid,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listUsagesPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionPartitionListUsagesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PartitionUsage[]> {\n    let result: CollectionPartitionListUsagesResponse;\n    result = await this._listUsages(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listUsagesPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionPartitionListUsagesOptionalParams\n  ): AsyncIterableIterator<PartitionUsage> {\n    for await (const page of this.listUsagesPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given collection, split by partition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    filter: string,\n    options?: CollectionPartitionListMetricsOptionalParams\n  ): Promise<CollectionPartitionListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        databaseRid,\n        collectionRid,\n        filter,\n        options\n      },\n      listMetricsOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves the usages (most recent storage data) for the given collection, split by partition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param options The options parameters.\n   */\n  private _listUsages(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    options?: CollectionPartitionListUsagesOptionalParams\n  ): Promise<CollectionPartitionListUsagesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseRid, collectionRid, options },\n      listUsagesOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartitionMetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid,\n    Parameters.collectionRid\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listUsagesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartitionUsagesResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid,\n    Parameters.collectionRid\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { PartitionKeyRangeId } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  PartitionMetric,\n  PartitionKeyRangeIdListMetricsOptionalParams,\n  PartitionKeyRangeIdListMetricsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PartitionKeyRangeId operations. */\nexport class PartitionKeyRangeIdImpl implements PartitionKeyRangeId {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class PartitionKeyRangeId class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given partition key range id.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param partitionKeyRangeId Partition Key Range Id for which to get data.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    partitionKeyRangeId: string,\n    filter: string,\n    options?: PartitionKeyRangeIdListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<PartitionMetric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      partitionKeyRangeId,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseRid,\n          collectionRid,\n          partitionKeyRangeId,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    partitionKeyRangeId: string,\n    filter: string,\n    options?: PartitionKeyRangeIdListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PartitionMetric[]> {\n    let result: PartitionKeyRangeIdListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      partitionKeyRangeId,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    partitionKeyRangeId: string,\n    filter: string,\n    options?: PartitionKeyRangeIdListMetricsOptionalParams\n  ): AsyncIterableIterator<PartitionMetric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseRid,\n      collectionRid,\n      partitionKeyRangeId,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given partition key range id.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param partitionKeyRangeId Partition Key Range Id for which to get data.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    databaseRid: string,\n    collectionRid: string,\n    partitionKeyRangeId: string,\n    filter: string,\n    options?: PartitionKeyRangeIdListMetricsOptionalParams\n  ): Promise<PartitionKeyRangeIdListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        databaseRid,\n        collectionRid,\n        partitionKeyRangeId,\n        filter,\n        options\n      },\n      listMetricsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartitionMetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid,\n    Parameters.collectionRid,\n    Parameters.partitionKeyRangeId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { PartitionKeyRangeIdRegion } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  PartitionMetric,\n  PartitionKeyRangeIdRegionListMetricsOptionalParams,\n  PartitionKeyRangeIdRegionListMetricsResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PartitionKeyRangeIdRegion operations. */\nexport class PartitionKeyRangeIdRegionImpl\n  implements PartitionKeyRangeIdRegion {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class PartitionKeyRangeIdRegion class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given partition key range id and\n   * region.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param region Cosmos DB region, with spaces between words and each word capitalized.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param partitionKeyRangeId Partition Key Range Id for which to get data.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  public listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    partitionKeyRangeId: string,\n    filter: string,\n    options?: PartitionKeyRangeIdRegionListMetricsOptionalParams\n  ): PagedAsyncIterableIterator<PartitionMetric> {\n    const iter = this.listMetricsPagingAll(\n      resourceGroupName,\n      accountName,\n      region,\n      databaseRid,\n      collectionRid,\n      partitionKeyRangeId,\n      filter,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMetricsPagingPage(\n          resourceGroupName,\n          accountName,\n          region,\n          databaseRid,\n          collectionRid,\n          partitionKeyRangeId,\n          filter,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMetricsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    partitionKeyRangeId: string,\n    filter: string,\n    options?: PartitionKeyRangeIdRegionListMetricsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PartitionMetric[]> {\n    let result: PartitionKeyRangeIdRegionListMetricsResponse;\n    result = await this._listMetrics(\n      resourceGroupName,\n      accountName,\n      region,\n      databaseRid,\n      collectionRid,\n      partitionKeyRangeId,\n      filter,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMetricsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    partitionKeyRangeId: string,\n    filter: string,\n    options?: PartitionKeyRangeIdRegionListMetricsOptionalParams\n  ): AsyncIterableIterator<PartitionMetric> {\n    for await (const page of this.listMetricsPagingPage(\n      resourceGroupName,\n      accountName,\n      region,\n      databaseRid,\n      collectionRid,\n      partitionKeyRangeId,\n      filter,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the metrics determined by the given filter for the given partition key range id and\n   * region.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param region Cosmos DB region, with spaces between words and each word capitalized.\n   * @param databaseRid Cosmos DB database rid.\n   * @param collectionRid Cosmos DB collection rid.\n   * @param partitionKeyRangeId Partition Key Range Id for which to get data.\n   * @param filter An OData filter expression that describes a subset of metrics to return. The\n   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple\n   *               names), startTime, endTime, and timeGrain. The supported operator is eq.\n   * @param options The options parameters.\n   */\n  private _listMetrics(\n    resourceGroupName: string,\n    accountName: string,\n    region: string,\n    databaseRid: string,\n    collectionRid: string,\n    partitionKeyRangeId: string,\n    filter: string,\n    options?: PartitionKeyRangeIdRegionListMetricsOptionalParams\n  ): Promise<PartitionKeyRangeIdRegionListMetricsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        region,\n        databaseRid,\n        collectionRid,\n        partitionKeyRangeId,\n        filter,\n        options\n      },\n      listMetricsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMetricsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartitionMetricListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseRid,\n    Parameters.collectionRid,\n    Parameters.region,\n    Parameters.partitionKeyRangeId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { SqlResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  SqlDatabaseGetResults,\n  SqlResourcesListSqlDatabasesOptionalParams,\n  SqlResourcesListSqlDatabasesResponse,\n  SqlContainerGetResults,\n  SqlResourcesListSqlContainersOptionalParams,\n  SqlResourcesListSqlContainersResponse,\n  ClientEncryptionKeyGetResults,\n  SqlResourcesListClientEncryptionKeysOptionalParams,\n  SqlResourcesListClientEncryptionKeysResponse,\n  SqlStoredProcedureGetResults,\n  SqlResourcesListSqlStoredProceduresOptionalParams,\n  SqlResourcesListSqlStoredProceduresResponse,\n  SqlUserDefinedFunctionGetResults,\n  SqlResourcesListSqlUserDefinedFunctionsOptionalParams,\n  SqlResourcesListSqlUserDefinedFunctionsResponse,\n  SqlTriggerGetResults,\n  SqlResourcesListSqlTriggersOptionalParams,\n  SqlResourcesListSqlTriggersResponse,\n  SqlRoleDefinitionGetResults,\n  SqlResourcesListSqlRoleDefinitionsOptionalParams,\n  SqlResourcesListSqlRoleDefinitionsResponse,\n  SqlRoleAssignmentGetResults,\n  SqlResourcesListSqlRoleAssignmentsOptionalParams,\n  SqlResourcesListSqlRoleAssignmentsResponse,\n  SqlResourcesGetSqlDatabaseOptionalParams,\n  SqlResourcesGetSqlDatabaseResponse,\n  SqlDatabaseCreateUpdateParameters,\n  SqlResourcesCreateUpdateSqlDatabaseOptionalParams,\n  SqlResourcesCreateUpdateSqlDatabaseResponse,\n  SqlResourcesDeleteSqlDatabaseOptionalParams,\n  SqlResourcesDeleteSqlDatabaseResponse,\n  SqlResourcesGetSqlDatabaseThroughputOptionalParams,\n  SqlResourcesGetSqlDatabaseThroughputResponse,\n  ThroughputSettingsUpdateParameters,\n  SqlResourcesUpdateSqlDatabaseThroughputOptionalParams,\n  SqlResourcesUpdateSqlDatabaseThroughputResponse,\n  SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams,\n  SqlResourcesMigrateSqlDatabaseToAutoscaleResponse,\n  SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams,\n  SqlResourcesMigrateSqlDatabaseToManualThroughputResponse,\n  SqlResourcesGetSqlContainerOptionalParams,\n  SqlResourcesGetSqlContainerResponse,\n  SqlContainerCreateUpdateParameters,\n  SqlResourcesCreateUpdateSqlContainerOptionalParams,\n  SqlResourcesCreateUpdateSqlContainerResponse,\n  SqlResourcesDeleteSqlContainerOptionalParams,\n  SqlResourcesDeleteSqlContainerResponse,\n  SqlResourcesGetSqlContainerThroughputOptionalParams,\n  SqlResourcesGetSqlContainerThroughputResponse,\n  SqlResourcesUpdateSqlContainerThroughputOptionalParams,\n  SqlResourcesUpdateSqlContainerThroughputResponse,\n  SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams,\n  SqlResourcesMigrateSqlContainerToAutoscaleResponse,\n  SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams,\n  SqlResourcesMigrateSqlContainerToManualThroughputResponse,\n  SqlResourcesGetClientEncryptionKeyOptionalParams,\n  SqlResourcesGetClientEncryptionKeyResponse,\n  ClientEncryptionKeyCreateUpdateParameters,\n  SqlResourcesCreateUpdateClientEncryptionKeyOptionalParams,\n  SqlResourcesCreateUpdateClientEncryptionKeyResponse,\n  SqlResourcesGetSqlStoredProcedureOptionalParams,\n  SqlResourcesGetSqlStoredProcedureResponse,\n  SqlStoredProcedureCreateUpdateParameters,\n  SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams,\n  SqlResourcesCreateUpdateSqlStoredProcedureResponse,\n  SqlResourcesDeleteSqlStoredProcedureOptionalParams,\n  SqlResourcesDeleteSqlStoredProcedureResponse,\n  SqlResourcesGetSqlUserDefinedFunctionOptionalParams,\n  SqlResourcesGetSqlUserDefinedFunctionResponse,\n  SqlUserDefinedFunctionCreateUpdateParameters,\n  SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams,\n  SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse,\n  SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams,\n  SqlResourcesDeleteSqlUserDefinedFunctionResponse,\n  SqlResourcesGetSqlTriggerOptionalParams,\n  SqlResourcesGetSqlTriggerResponse,\n  SqlTriggerCreateUpdateParameters,\n  SqlResourcesCreateUpdateSqlTriggerOptionalParams,\n  SqlResourcesCreateUpdateSqlTriggerResponse,\n  SqlResourcesDeleteSqlTriggerOptionalParams,\n  SqlResourcesDeleteSqlTriggerResponse,\n  SqlResourcesGetSqlRoleDefinitionOptionalParams,\n  SqlResourcesGetSqlRoleDefinitionResponse,\n  SqlRoleDefinitionCreateUpdateParameters,\n  SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams,\n  SqlResourcesCreateUpdateSqlRoleDefinitionResponse,\n  SqlResourcesDeleteSqlRoleDefinitionOptionalParams,\n  SqlResourcesGetSqlRoleAssignmentOptionalParams,\n  SqlResourcesGetSqlRoleAssignmentResponse,\n  SqlRoleAssignmentCreateUpdateParameters,\n  SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams,\n  SqlResourcesCreateUpdateSqlRoleAssignmentResponse,\n  SqlResourcesDeleteSqlRoleAssignmentOptionalParams,\n  ContinuousBackupRestoreLocation,\n  SqlResourcesRetrieveContinuousBackupInformationOptionalParams,\n  SqlResourcesRetrieveContinuousBackupInformationResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing SqlResources operations. */\nexport class SqlResourcesImpl implements SqlResources {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class SqlResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists the SQL databases under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listSqlDatabases(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlDatabasesOptionalParams\n  ): PagedAsyncIterableIterator<SqlDatabaseGetResults> {\n    const iter = this.listSqlDatabasesPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSqlDatabasesPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listSqlDatabasesPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlDatabasesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<SqlDatabaseGetResults[]> {\n    let result: SqlResourcesListSqlDatabasesResponse;\n    result = await this._listSqlDatabases(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listSqlDatabasesPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlDatabasesOptionalParams\n  ): AsyncIterableIterator<SqlDatabaseGetResults> {\n    for await (const page of this.listSqlDatabasesPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the SQL container under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  public listSqlContainers(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesListSqlContainersOptionalParams\n  ): PagedAsyncIterableIterator<SqlContainerGetResults> {\n    const iter = this.listSqlContainersPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSqlContainersPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listSqlContainersPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesListSqlContainersOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<SqlContainerGetResults[]> {\n    let result: SqlResourcesListSqlContainersResponse;\n    result = await this._listSqlContainers(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listSqlContainersPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesListSqlContainersOptionalParams\n  ): AsyncIterableIterator<SqlContainerGetResults> {\n    for await (const page of this.listSqlContainersPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the ClientEncryptionKeys under an existing Azure Cosmos DB SQL database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  public listClientEncryptionKeys(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesListClientEncryptionKeysOptionalParams\n  ): PagedAsyncIterableIterator<ClientEncryptionKeyGetResults> {\n    const iter = this.listClientEncryptionKeysPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listClientEncryptionKeysPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listClientEncryptionKeysPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesListClientEncryptionKeysOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<ClientEncryptionKeyGetResults[]> {\n    let result: SqlResourcesListClientEncryptionKeysResponse;\n    result = await this._listClientEncryptionKeys(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listClientEncryptionKeysPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesListClientEncryptionKeysOptionalParams\n  ): AsyncIterableIterator<ClientEncryptionKeyGetResults> {\n    for await (const page of this.listClientEncryptionKeysPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  public listSqlStoredProcedures(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlStoredProceduresOptionalParams\n  ): PagedAsyncIterableIterator<SqlStoredProcedureGetResults> {\n    const iter = this.listSqlStoredProceduresPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSqlStoredProceduresPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseName,\n          containerName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listSqlStoredProceduresPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlStoredProceduresOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<SqlStoredProcedureGetResults[]> {\n    let result: SqlResourcesListSqlStoredProceduresResponse;\n    result = await this._listSqlStoredProcedures(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listSqlStoredProceduresPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlStoredProceduresOptionalParams\n  ): AsyncIterableIterator<SqlStoredProcedureGetResults> {\n    for await (const page of this.listSqlStoredProceduresPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  public listSqlUserDefinedFunctions(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlUserDefinedFunctionsOptionalParams\n  ): PagedAsyncIterableIterator<SqlUserDefinedFunctionGetResults> {\n    const iter = this.listSqlUserDefinedFunctionsPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSqlUserDefinedFunctionsPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseName,\n          containerName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listSqlUserDefinedFunctionsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlUserDefinedFunctionsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<SqlUserDefinedFunctionGetResults[]> {\n    let result: SqlResourcesListSqlUserDefinedFunctionsResponse;\n    result = await this._listSqlUserDefinedFunctions(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listSqlUserDefinedFunctionsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlUserDefinedFunctionsOptionalParams\n  ): AsyncIterableIterator<SqlUserDefinedFunctionGetResults> {\n    for await (const page of this.listSqlUserDefinedFunctionsPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the SQL trigger under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  public listSqlTriggers(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlTriggersOptionalParams\n  ): PagedAsyncIterableIterator<SqlTriggerGetResults> {\n    const iter = this.listSqlTriggersPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSqlTriggersPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseName,\n          containerName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listSqlTriggersPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlTriggersOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<SqlTriggerGetResults[]> {\n    let result: SqlResourcesListSqlTriggersResponse;\n    result = await this._listSqlTriggers(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listSqlTriggersPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlTriggersOptionalParams\n  ): AsyncIterableIterator<SqlTriggerGetResults> {\n    for await (const page of this.listSqlTriggersPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the list of all Azure Cosmos DB SQL Role Definitions.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listSqlRoleDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlRoleDefinitionsOptionalParams\n  ): PagedAsyncIterableIterator<SqlRoleDefinitionGetResults> {\n    const iter = this.listSqlRoleDefinitionsPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSqlRoleDefinitionsPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listSqlRoleDefinitionsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlRoleDefinitionsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<SqlRoleDefinitionGetResults[]> {\n    let result: SqlResourcesListSqlRoleDefinitionsResponse;\n    result = await this._listSqlRoleDefinitions(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listSqlRoleDefinitionsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlRoleDefinitionsOptionalParams\n  ): AsyncIterableIterator<SqlRoleDefinitionGetResults> {\n    for await (const page of this.listSqlRoleDefinitionsPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the list of all Azure Cosmos DB SQL Role Assignments.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listSqlRoleAssignments(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlRoleAssignmentsOptionalParams\n  ): PagedAsyncIterableIterator<SqlRoleAssignmentGetResults> {\n    const iter = this.listSqlRoleAssignmentsPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSqlRoleAssignmentsPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listSqlRoleAssignmentsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlRoleAssignmentsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<SqlRoleAssignmentGetResults[]> {\n    let result: SqlResourcesListSqlRoleAssignmentsResponse;\n    result = await this._listSqlRoleAssignments(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listSqlRoleAssignmentsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlRoleAssignmentsOptionalParams\n  ): AsyncIterableIterator<SqlRoleAssignmentGetResults> {\n    for await (const page of this.listSqlRoleAssignmentsPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the SQL databases under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listSqlDatabases(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlDatabasesOptionalParams\n  ): Promise<SqlResourcesListSqlDatabasesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listSqlDatabasesOperationSpec\n    );\n  }\n\n  /**\n   * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  getSqlDatabase(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesGetSqlDatabaseOptionalParams\n  ): Promise<SqlResourcesGetSqlDatabaseResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, options },\n      getSqlDatabaseOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB SQL database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlDatabase(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlDatabaseOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesCreateUpdateSqlDatabaseResponse>,\n      SqlResourcesCreateUpdateSqlDatabaseResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesCreateUpdateSqlDatabaseResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        createUpdateSqlDatabaseParameters,\n        options\n      },\n      spec: createUpdateSqlDatabaseOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesCreateUpdateSqlDatabaseResponse,\n      OperationState<SqlResourcesCreateUpdateSqlDatabaseResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB SQL database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlDatabaseAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlDatabaseOptionalParams\n  ): Promise<SqlResourcesCreateUpdateSqlDatabaseResponse> {\n    const poller = await this.beginCreateUpdateSqlDatabase(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      createUpdateSqlDatabaseParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlDatabase(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesDeleteSqlDatabaseOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesDeleteSqlDatabaseResponse>,\n      SqlResourcesDeleteSqlDatabaseResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesDeleteSqlDatabaseResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, databaseName, options },\n      spec: deleteSqlDatabaseOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesDeleteSqlDatabaseResponse,\n      OperationState<SqlResourcesDeleteSqlDatabaseResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlDatabaseAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesDeleteSqlDatabaseOptionalParams\n  ): Promise<SqlResourcesDeleteSqlDatabaseResponse> {\n    const poller = await this.beginDeleteSqlDatabase(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with\n   * the provided name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  getSqlDatabaseThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesGetSqlDatabaseThroughputOptionalParams\n  ): Promise<SqlResourcesGetSqlDatabaseThroughputResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, options },\n      getSqlDatabaseThroughputOperationSpec\n    );\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB SQL database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current\n   *                                   SQL database.\n   * @param options The options parameters.\n   */\n  async beginUpdateSqlDatabaseThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: SqlResourcesUpdateSqlDatabaseThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesUpdateSqlDatabaseThroughputResponse>,\n      SqlResourcesUpdateSqlDatabaseThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesUpdateSqlDatabaseThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        updateThroughputParameters,\n        options\n      },\n      spec: updateSqlDatabaseThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesUpdateSqlDatabaseThroughputResponse,\n      OperationState<SqlResourcesUpdateSqlDatabaseThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB SQL database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current\n   *                                   SQL database.\n   * @param options The options parameters.\n   */\n  async beginUpdateSqlDatabaseThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: SqlResourcesUpdateSqlDatabaseThroughputOptionalParams\n  ): Promise<SqlResourcesUpdateSqlDatabaseThroughputResponse> {\n    const poller = await this.beginUpdateSqlDatabaseThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      updateThroughputParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB SQL database from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateSqlDatabaseToAutoscale(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesMigrateSqlDatabaseToAutoscaleResponse>,\n      SqlResourcesMigrateSqlDatabaseToAutoscaleResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesMigrateSqlDatabaseToAutoscaleResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, databaseName, options },\n      spec: migrateSqlDatabaseToAutoscaleOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesMigrateSqlDatabaseToAutoscaleResponse,\n      OperationState<SqlResourcesMigrateSqlDatabaseToAutoscaleResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB SQL database from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateSqlDatabaseToAutoscaleAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams\n  ): Promise<SqlResourcesMigrateSqlDatabaseToAutoscaleResponse> {\n    const poller = await this.beginMigrateSqlDatabaseToAutoscale(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB SQL database from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateSqlDatabaseToManualThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesMigrateSqlDatabaseToManualThroughputResponse>,\n      SqlResourcesMigrateSqlDatabaseToManualThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesMigrateSqlDatabaseToManualThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, databaseName, options },\n      spec: migrateSqlDatabaseToManualThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesMigrateSqlDatabaseToManualThroughputResponse,\n      OperationState<SqlResourcesMigrateSqlDatabaseToManualThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB SQL database from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateSqlDatabaseToManualThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams\n  ): Promise<SqlResourcesMigrateSqlDatabaseToManualThroughputResponse> {\n    const poller = await this.beginMigrateSqlDatabaseToManualThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists the SQL container under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  private _listSqlContainers(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesListSqlContainersOptionalParams\n  ): Promise<SqlResourcesListSqlContainersResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, options },\n      listSqlContainersOperationSpec\n    );\n  }\n\n  /**\n   * Gets the SQL container under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  getSqlContainer(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesGetSqlContainerOptionalParams\n  ): Promise<SqlResourcesGetSqlContainerResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, containerName, options },\n      getSqlContainerOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB SQL container\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlContainer(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlContainerOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesCreateUpdateSqlContainerResponse>,\n      SqlResourcesCreateUpdateSqlContainerResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesCreateUpdateSqlContainerResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        createUpdateSqlContainerParameters,\n        options\n      },\n      spec: createUpdateSqlContainerOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesCreateUpdateSqlContainerResponse,\n      OperationState<SqlResourcesCreateUpdateSqlContainerResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB SQL container\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlContainerAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlContainerOptionalParams\n  ): Promise<SqlResourcesCreateUpdateSqlContainerResponse> {\n    const poller = await this.beginCreateUpdateSqlContainer(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      createUpdateSqlContainerParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL container.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlContainer(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesDeleteSqlContainerOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesDeleteSqlContainerResponse>,\n      SqlResourcesDeleteSqlContainerResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesDeleteSqlContainerResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        options\n      },\n      spec: deleteSqlContainerOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesDeleteSqlContainerResponse,\n      OperationState<SqlResourcesDeleteSqlContainerResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL container.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlContainerAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesDeleteSqlContainerOptionalParams\n  ): Promise<SqlResourcesDeleteSqlContainerResponse> {\n    const poller = await this.beginDeleteSqlContainer(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  getSqlContainerThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesGetSqlContainerThroughputOptionalParams\n  ): Promise<SqlResourcesGetSqlContainerThroughputResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, containerName, options },\n      getSqlContainerThroughputOperationSpec\n    );\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB SQL container\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current\n   *                                   SQL container.\n   * @param options The options parameters.\n   */\n  async beginUpdateSqlContainerThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: SqlResourcesUpdateSqlContainerThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesUpdateSqlContainerThroughputResponse>,\n      SqlResourcesUpdateSqlContainerThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesUpdateSqlContainerThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        updateThroughputParameters,\n        options\n      },\n      spec: updateSqlContainerThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesUpdateSqlContainerThroughputResponse,\n      OperationState<SqlResourcesUpdateSqlContainerThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB SQL container\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current\n   *                                   SQL container.\n   * @param options The options parameters.\n   */\n  async beginUpdateSqlContainerThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: SqlResourcesUpdateSqlContainerThroughputOptionalParams\n  ): Promise<SqlResourcesUpdateSqlContainerThroughputResponse> {\n    const poller = await this.beginUpdateSqlContainerThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      updateThroughputParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB SQL container from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  async beginMigrateSqlContainerToAutoscale(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesMigrateSqlContainerToAutoscaleResponse>,\n      SqlResourcesMigrateSqlContainerToAutoscaleResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesMigrateSqlContainerToAutoscaleResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        options\n      },\n      spec: migrateSqlContainerToAutoscaleOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesMigrateSqlContainerToAutoscaleResponse,\n      OperationState<SqlResourcesMigrateSqlContainerToAutoscaleResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB SQL container from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  async beginMigrateSqlContainerToAutoscaleAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams\n  ): Promise<SqlResourcesMigrateSqlContainerToAutoscaleResponse> {\n    const poller = await this.beginMigrateSqlContainerToAutoscale(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB SQL container from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  async beginMigrateSqlContainerToManualThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesMigrateSqlContainerToManualThroughputResponse>,\n      SqlResourcesMigrateSqlContainerToManualThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesMigrateSqlContainerToManualThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        options\n      },\n      spec: migrateSqlContainerToManualThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesMigrateSqlContainerToManualThroughputResponse,\n      OperationState<SqlResourcesMigrateSqlContainerToManualThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB SQL container from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  async beginMigrateSqlContainerToManualThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams\n  ): Promise<SqlResourcesMigrateSqlContainerToManualThroughputResponse> {\n    const poller = await this.beginMigrateSqlContainerToManualThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists the ClientEncryptionKeys under an existing Azure Cosmos DB SQL database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  private _listClientEncryptionKeys(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: SqlResourcesListClientEncryptionKeysOptionalParams\n  ): Promise<SqlResourcesListClientEncryptionKeysResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, options },\n      listClientEncryptionKeysOperationSpec\n    );\n  }\n\n  /**\n   * Gets the ClientEncryptionKey under an existing Azure Cosmos DB SQL database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param clientEncryptionKeyName Cosmos DB ClientEncryptionKey name.\n   * @param options The options parameters.\n   */\n  getClientEncryptionKey(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    clientEncryptionKeyName: string,\n    options?: SqlResourcesGetClientEncryptionKeyOptionalParams\n  ): Promise<SqlResourcesGetClientEncryptionKeyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        clientEncryptionKeyName,\n        options\n      },\n      getClientEncryptionKeyOperationSpec\n    );\n  }\n\n  /**\n   * Create or update a ClientEncryptionKey. This API is meant to be invoked via tools such as the Azure\n   * Powershell (instead of directly).\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param clientEncryptionKeyName Cosmos DB ClientEncryptionKey name.\n   * @param createUpdateClientEncryptionKeyParameters The parameters to provide for the client encryption\n   *                                                  key.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateClientEncryptionKey(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    clientEncryptionKeyName: string,\n    createUpdateClientEncryptionKeyParameters: ClientEncryptionKeyCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateClientEncryptionKeyOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesCreateUpdateClientEncryptionKeyResponse>,\n      SqlResourcesCreateUpdateClientEncryptionKeyResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesCreateUpdateClientEncryptionKeyResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        clientEncryptionKeyName,\n        createUpdateClientEncryptionKeyParameters,\n        options\n      },\n      spec: createUpdateClientEncryptionKeyOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesCreateUpdateClientEncryptionKeyResponse,\n      OperationState<SqlResourcesCreateUpdateClientEncryptionKeyResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update a ClientEncryptionKey. This API is meant to be invoked via tools such as the Azure\n   * Powershell (instead of directly).\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param clientEncryptionKeyName Cosmos DB ClientEncryptionKey name.\n   * @param createUpdateClientEncryptionKeyParameters The parameters to provide for the client encryption\n   *                                                  key.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateClientEncryptionKeyAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    clientEncryptionKeyName: string,\n    createUpdateClientEncryptionKeyParameters: ClientEncryptionKeyCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateClientEncryptionKeyOptionalParams\n  ): Promise<SqlResourcesCreateUpdateClientEncryptionKeyResponse> {\n    const poller = await this.beginCreateUpdateClientEncryptionKey(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      clientEncryptionKeyName,\n      createUpdateClientEncryptionKeyParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  private _listSqlStoredProcedures(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlStoredProceduresOptionalParams\n  ): Promise<SqlResourcesListSqlStoredProceduresResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, containerName, options },\n      listSqlStoredProceduresOperationSpec\n    );\n  }\n\n  /**\n   * Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param storedProcedureName Cosmos DB storedProcedure name.\n   * @param options The options parameters.\n   */\n  getSqlStoredProcedure(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    storedProcedureName: string,\n    options?: SqlResourcesGetSqlStoredProcedureOptionalParams\n  ): Promise<SqlResourcesGetSqlStoredProcedureResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        storedProcedureName,\n        options\n      },\n      getSqlStoredProcedureOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB SQL storedProcedure\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param storedProcedureName Cosmos DB storedProcedure name.\n   * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL\n   *                                                 storedProcedure.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlStoredProcedure(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    storedProcedureName: string,\n    createUpdateSqlStoredProcedureParameters: SqlStoredProcedureCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesCreateUpdateSqlStoredProcedureResponse>,\n      SqlResourcesCreateUpdateSqlStoredProcedureResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesCreateUpdateSqlStoredProcedureResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        storedProcedureName,\n        createUpdateSqlStoredProcedureParameters,\n        options\n      },\n      spec: createUpdateSqlStoredProcedureOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesCreateUpdateSqlStoredProcedureResponse,\n      OperationState<SqlResourcesCreateUpdateSqlStoredProcedureResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB SQL storedProcedure\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param storedProcedureName Cosmos DB storedProcedure name.\n   * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL\n   *                                                 storedProcedure.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlStoredProcedureAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    storedProcedureName: string,\n    createUpdateSqlStoredProcedureParameters: SqlStoredProcedureCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams\n  ): Promise<SqlResourcesCreateUpdateSqlStoredProcedureResponse> {\n    const poller = await this.beginCreateUpdateSqlStoredProcedure(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      storedProcedureName,\n      createUpdateSqlStoredProcedureParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL storedProcedure.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param storedProcedureName Cosmos DB storedProcedure name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlStoredProcedure(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    storedProcedureName: string,\n    options?: SqlResourcesDeleteSqlStoredProcedureOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesDeleteSqlStoredProcedureResponse>,\n      SqlResourcesDeleteSqlStoredProcedureResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesDeleteSqlStoredProcedureResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        storedProcedureName,\n        options\n      },\n      spec: deleteSqlStoredProcedureOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesDeleteSqlStoredProcedureResponse,\n      OperationState<SqlResourcesDeleteSqlStoredProcedureResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL storedProcedure.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param storedProcedureName Cosmos DB storedProcedure name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlStoredProcedureAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    storedProcedureName: string,\n    options?: SqlResourcesDeleteSqlStoredProcedureOptionalParams\n  ): Promise<SqlResourcesDeleteSqlStoredProcedureResponse> {\n    const poller = await this.beginDeleteSqlStoredProcedure(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      storedProcedureName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  private _listSqlUserDefinedFunctions(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlUserDefinedFunctionsOptionalParams\n  ): Promise<SqlResourcesListSqlUserDefinedFunctionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, containerName, options },\n      listSqlUserDefinedFunctionsOperationSpec\n    );\n  }\n\n  /**\n   * Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.\n   * @param options The options parameters.\n   */\n  getSqlUserDefinedFunction(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    userDefinedFunctionName: string,\n    options?: SqlResourcesGetSqlUserDefinedFunctionOptionalParams\n  ): Promise<SqlResourcesGetSqlUserDefinedFunctionResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        userDefinedFunctionName,\n        options\n      },\n      getSqlUserDefinedFunctionOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB SQL userDefinedFunction\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.\n   * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL\n   *                                                     userDefinedFunction.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlUserDefinedFunction(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    userDefinedFunctionName: string,\n    createUpdateSqlUserDefinedFunctionParameters: SqlUserDefinedFunctionCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>,\n      SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        userDefinedFunctionName,\n        createUpdateSqlUserDefinedFunctionParameters,\n        options\n      },\n      spec: createUpdateSqlUserDefinedFunctionOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse,\n      OperationState<SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB SQL userDefinedFunction\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.\n   * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL\n   *                                                     userDefinedFunction.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlUserDefinedFunctionAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    userDefinedFunctionName: string,\n    createUpdateSqlUserDefinedFunctionParameters: SqlUserDefinedFunctionCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams\n  ): Promise<SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse> {\n    const poller = await this.beginCreateUpdateSqlUserDefinedFunction(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      userDefinedFunctionName,\n      createUpdateSqlUserDefinedFunctionParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlUserDefinedFunction(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    userDefinedFunctionName: string,\n    options?: SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesDeleteSqlUserDefinedFunctionResponse>,\n      SqlResourcesDeleteSqlUserDefinedFunctionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesDeleteSqlUserDefinedFunctionResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        userDefinedFunctionName,\n        options\n      },\n      spec: deleteSqlUserDefinedFunctionOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesDeleteSqlUserDefinedFunctionResponse,\n      OperationState<SqlResourcesDeleteSqlUserDefinedFunctionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlUserDefinedFunctionAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    userDefinedFunctionName: string,\n    options?: SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams\n  ): Promise<SqlResourcesDeleteSqlUserDefinedFunctionResponse> {\n    const poller = await this.beginDeleteSqlUserDefinedFunction(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      userDefinedFunctionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists the SQL trigger under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param options The options parameters.\n   */\n  private _listSqlTriggers(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    options?: SqlResourcesListSqlTriggersOptionalParams\n  ): Promise<SqlResourcesListSqlTriggersResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, containerName, options },\n      listSqlTriggersOperationSpec\n    );\n  }\n\n  /**\n   * Gets the SQL trigger under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param triggerName Cosmos DB trigger name.\n   * @param options The options parameters.\n   */\n  getSqlTrigger(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    triggerName: string,\n    options?: SqlResourcesGetSqlTriggerOptionalParams\n  ): Promise<SqlResourcesGetSqlTriggerResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        triggerName,\n        options\n      },\n      getSqlTriggerOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB SQL trigger\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param triggerName Cosmos DB trigger name.\n   * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlTrigger(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    triggerName: string,\n    createUpdateSqlTriggerParameters: SqlTriggerCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlTriggerOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesCreateUpdateSqlTriggerResponse>,\n      SqlResourcesCreateUpdateSqlTriggerResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesCreateUpdateSqlTriggerResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        triggerName,\n        createUpdateSqlTriggerParameters,\n        options\n      },\n      spec: createUpdateSqlTriggerOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesCreateUpdateSqlTriggerResponse,\n      OperationState<SqlResourcesCreateUpdateSqlTriggerResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB SQL trigger\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param triggerName Cosmos DB trigger name.\n   * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlTriggerAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    triggerName: string,\n    createUpdateSqlTriggerParameters: SqlTriggerCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlTriggerOptionalParams\n  ): Promise<SqlResourcesCreateUpdateSqlTriggerResponse> {\n    const poller = await this.beginCreateUpdateSqlTrigger(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      triggerName,\n      createUpdateSqlTriggerParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL trigger.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param triggerName Cosmos DB trigger name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlTrigger(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    triggerName: string,\n    options?: SqlResourcesDeleteSqlTriggerOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesDeleteSqlTriggerResponse>,\n      SqlResourcesDeleteSqlTriggerResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesDeleteSqlTriggerResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        triggerName,\n        options\n      },\n      spec: deleteSqlTriggerOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesDeleteSqlTriggerResponse,\n      OperationState<SqlResourcesDeleteSqlTriggerResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL trigger.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param triggerName Cosmos DB trigger name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlTriggerAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    triggerName: string,\n    options?: SqlResourcesDeleteSqlTriggerOptionalParams\n  ): Promise<SqlResourcesDeleteSqlTriggerResponse> {\n    const poller = await this.beginDeleteSqlTrigger(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      triggerName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Retrieves the properties of an existing Azure Cosmos DB SQL Role Definition with the given Id.\n   * @param roleDefinitionId The GUID for the Role Definition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  getSqlRoleDefinition(\n    roleDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesGetSqlRoleDefinitionOptionalParams\n  ): Promise<SqlResourcesGetSqlRoleDefinitionResponse> {\n    return this.client.sendOperationRequest(\n      { roleDefinitionId, resourceGroupName, accountName, options },\n      getSqlRoleDefinitionOperationSpec\n    );\n  }\n\n  /**\n   * Creates or updates an Azure Cosmos DB SQL Role Definition.\n   * @param roleDefinitionId The GUID for the Role Definition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param createUpdateSqlRoleDefinitionParameters The properties required to create or update a Role\n   *                                                Definition.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlRoleDefinition(\n    roleDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    createUpdateSqlRoleDefinitionParameters: SqlRoleDefinitionCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesCreateUpdateSqlRoleDefinitionResponse>,\n      SqlResourcesCreateUpdateSqlRoleDefinitionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesCreateUpdateSqlRoleDefinitionResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        roleDefinitionId,\n        resourceGroupName,\n        accountName,\n        createUpdateSqlRoleDefinitionParameters,\n        options\n      },\n      spec: createUpdateSqlRoleDefinitionOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesCreateUpdateSqlRoleDefinitionResponse,\n      OperationState<SqlResourcesCreateUpdateSqlRoleDefinitionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates an Azure Cosmos DB SQL Role Definition.\n   * @param roleDefinitionId The GUID for the Role Definition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param createUpdateSqlRoleDefinitionParameters The properties required to create or update a Role\n   *                                                Definition.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlRoleDefinitionAndWait(\n    roleDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    createUpdateSqlRoleDefinitionParameters: SqlRoleDefinitionCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams\n  ): Promise<SqlResourcesCreateUpdateSqlRoleDefinitionResponse> {\n    const poller = await this.beginCreateUpdateSqlRoleDefinition(\n      roleDefinitionId,\n      resourceGroupName,\n      accountName,\n      createUpdateSqlRoleDefinitionParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL Role Definition.\n   * @param roleDefinitionId The GUID for the Role Definition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlRoleDefinition(\n    roleDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesDeleteSqlRoleDefinitionOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { roleDefinitionId, resourceGroupName, accountName, options },\n      spec: deleteSqlRoleDefinitionOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL Role Definition.\n   * @param roleDefinitionId The GUID for the Role Definition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlRoleDefinitionAndWait(\n    roleDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesDeleteSqlRoleDefinitionOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDeleteSqlRoleDefinition(\n      roleDefinitionId,\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Retrieves the list of all Azure Cosmos DB SQL Role Definitions.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listSqlRoleDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlRoleDefinitionsOptionalParams\n  ): Promise<SqlResourcesListSqlRoleDefinitionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listSqlRoleDefinitionsOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves the properties of an existing Azure Cosmos DB SQL Role Assignment with the given Id.\n   * @param roleAssignmentId The GUID for the Role Assignment.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  getSqlRoleAssignment(\n    roleAssignmentId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesGetSqlRoleAssignmentOptionalParams\n  ): Promise<SqlResourcesGetSqlRoleAssignmentResponse> {\n    return this.client.sendOperationRequest(\n      { roleAssignmentId, resourceGroupName, accountName, options },\n      getSqlRoleAssignmentOperationSpec\n    );\n  }\n\n  /**\n   * Creates or updates an Azure Cosmos DB SQL Role Assignment.\n   * @param roleAssignmentId The GUID for the Role Assignment.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param createUpdateSqlRoleAssignmentParameters The properties required to create or update a Role\n   *                                                Assignment.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlRoleAssignment(\n    roleAssignmentId: string,\n    resourceGroupName: string,\n    accountName: string,\n    createUpdateSqlRoleAssignmentParameters: SqlRoleAssignmentCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesCreateUpdateSqlRoleAssignmentResponse>,\n      SqlResourcesCreateUpdateSqlRoleAssignmentResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesCreateUpdateSqlRoleAssignmentResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        roleAssignmentId,\n        resourceGroupName,\n        accountName,\n        createUpdateSqlRoleAssignmentParameters,\n        options\n      },\n      spec: createUpdateSqlRoleAssignmentOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesCreateUpdateSqlRoleAssignmentResponse,\n      OperationState<SqlResourcesCreateUpdateSqlRoleAssignmentResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates an Azure Cosmos DB SQL Role Assignment.\n   * @param roleAssignmentId The GUID for the Role Assignment.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param createUpdateSqlRoleAssignmentParameters The properties required to create or update a Role\n   *                                                Assignment.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateSqlRoleAssignmentAndWait(\n    roleAssignmentId: string,\n    resourceGroupName: string,\n    accountName: string,\n    createUpdateSqlRoleAssignmentParameters: SqlRoleAssignmentCreateUpdateParameters,\n    options?: SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams\n  ): Promise<SqlResourcesCreateUpdateSqlRoleAssignmentResponse> {\n    const poller = await this.beginCreateUpdateSqlRoleAssignment(\n      roleAssignmentId,\n      resourceGroupName,\n      accountName,\n      createUpdateSqlRoleAssignmentParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL Role Assignment.\n   * @param roleAssignmentId The GUID for the Role Assignment.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlRoleAssignment(\n    roleAssignmentId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesDeleteSqlRoleAssignmentOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { roleAssignmentId, resourceGroupName, accountName, options },\n      spec: deleteSqlRoleAssignmentOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB SQL Role Assignment.\n   * @param roleAssignmentId The GUID for the Role Assignment.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  async beginDeleteSqlRoleAssignmentAndWait(\n    roleAssignmentId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesDeleteSqlRoleAssignmentOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDeleteSqlRoleAssignment(\n      roleAssignmentId,\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Retrieves the list of all Azure Cosmos DB SQL Role Assignments.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listSqlRoleAssignments(\n    resourceGroupName: string,\n    accountName: string,\n    options?: SqlResourcesListSqlRoleAssignmentsOptionalParams\n  ): Promise<SqlResourcesListSqlRoleAssignmentsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listSqlRoleAssignmentsOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves continuous backup information for a container resource.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param location The name of the continuous backup restore location.\n   * @param options The options parameters.\n   */\n  async beginRetrieveContinuousBackupInformation(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    location: ContinuousBackupRestoreLocation,\n    options?: SqlResourcesRetrieveContinuousBackupInformationOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SqlResourcesRetrieveContinuousBackupInformationResponse>,\n      SqlResourcesRetrieveContinuousBackupInformationResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SqlResourcesRetrieveContinuousBackupInformationResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        containerName,\n        location,\n        options\n      },\n      spec: retrieveContinuousBackupInformationOperationSpec\n    });\n    const poller = await createHttpPoller<\n      SqlResourcesRetrieveContinuousBackupInformationResponse,\n      OperationState<SqlResourcesRetrieveContinuousBackupInformationResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Retrieves continuous backup information for a container resource.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param containerName Cosmos DB container name.\n   * @param location The name of the continuous backup restore location.\n   * @param options The options parameters.\n   */\n  async beginRetrieveContinuousBackupInformationAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    containerName: string,\n    location: ContinuousBackupRestoreLocation,\n    options?: SqlResourcesRetrieveContinuousBackupInformationOptionalParams\n  ): Promise<SqlResourcesRetrieveContinuousBackupInformationResponse> {\n    const poller = await this.beginRetrieveContinuousBackupInformation(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      containerName,\n      location,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listSqlDatabasesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlDatabaseListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getSqlDatabaseOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlDatabaseGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateSqlDatabaseOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlDatabaseGetResults\n    },\n    201: {\n      bodyMapper: Mappers.SqlDatabaseGetResults\n    },\n    202: {\n      bodyMapper: Mappers.SqlDatabaseGetResults\n    },\n    204: {\n      bodyMapper: Mappers.SqlDatabaseGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateSqlDatabaseParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteSqlDatabaseOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlDatabaseHeaders\n    },\n    201: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlDatabaseHeaders\n    },\n    202: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlDatabaseHeaders\n    },\n    204: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlDatabaseHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  serializer\n};\nconst getSqlDatabaseThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateSqlDatabaseThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  requestBody: Parameters.updateThroughputParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst migrateSqlDatabaseToAutoscaleOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default/migrateToAutoscale\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst migrateSqlDatabaseToManualThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default/migrateToManualThroughput\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listSqlContainersOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlContainerListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getSqlContainerOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlContainerGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateSqlContainerOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlContainerGetResults\n    },\n    201: {\n      bodyMapper: Mappers.SqlContainerGetResults\n    },\n    202: {\n      bodyMapper: Mappers.SqlContainerGetResults\n    },\n    204: {\n      bodyMapper: Mappers.SqlContainerGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateSqlContainerParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteSqlContainerOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlContainerHeaders\n    },\n    201: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlContainerHeaders\n    },\n    202: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlContainerHeaders\n    },\n    204: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlContainerHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  serializer\n};\nconst getSqlContainerThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateSqlContainerThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  requestBody: Parameters.updateThroughputParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst migrateSqlContainerToAutoscaleOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default/migrateToAutoscale\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst migrateSqlContainerToManualThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default/migrateToManualThroughput\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listClientEncryptionKeysOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/clientEncryptionKeys\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ClientEncryptionKeysListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getClientEncryptionKeyOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/clientEncryptionKeys/{clientEncryptionKeyName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ClientEncryptionKeyGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.clientEncryptionKeyName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateClientEncryptionKeyOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/clientEncryptionKeys/{clientEncryptionKeyName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ClientEncryptionKeyGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ClientEncryptionKeyGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ClientEncryptionKeyGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ClientEncryptionKeyGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateClientEncryptionKeyParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.clientEncryptionKeyName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listSqlStoredProceduresOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlStoredProcedureListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getSqlStoredProcedureOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlStoredProcedureGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName,\n    Parameters.storedProcedureName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateSqlStoredProcedureOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlStoredProcedureGetResults\n    },\n    201: {\n      bodyMapper: Mappers.SqlStoredProcedureGetResults\n    },\n    202: {\n      bodyMapper: Mappers.SqlStoredProcedureGetResults\n    },\n    204: {\n      bodyMapper: Mappers.SqlStoredProcedureGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateSqlStoredProcedureParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName,\n    Parameters.storedProcedureName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteSqlStoredProcedureOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlStoredProcedureHeaders\n    },\n    201: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlStoredProcedureHeaders\n    },\n    202: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlStoredProcedureHeaders\n    },\n    204: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlStoredProcedureHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName,\n    Parameters.storedProcedureName\n  ],\n  serializer\n};\nconst listSqlUserDefinedFunctionsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlUserDefinedFunctionListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getSqlUserDefinedFunctionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName,\n    Parameters.userDefinedFunctionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateSqlUserDefinedFunctionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults\n    },\n    201: {\n      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults\n    },\n    202: {\n      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults\n    },\n    204: {\n      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateSqlUserDefinedFunctionParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName,\n    Parameters.userDefinedFunctionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteSqlUserDefinedFunctionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlUserDefinedFunctionHeaders\n    },\n    201: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlUserDefinedFunctionHeaders\n    },\n    202: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlUserDefinedFunctionHeaders\n    },\n    204: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlUserDefinedFunctionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName,\n    Parameters.userDefinedFunctionName\n  ],\n  serializer\n};\nconst listSqlTriggersOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlTriggerListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getSqlTriggerOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlTriggerGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName,\n    Parameters.triggerName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateSqlTriggerOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlTriggerGetResults\n    },\n    201: {\n      bodyMapper: Mappers.SqlTriggerGetResults\n    },\n    202: {\n      bodyMapper: Mappers.SqlTriggerGetResults\n    },\n    204: {\n      bodyMapper: Mappers.SqlTriggerGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateSqlTriggerParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName,\n    Parameters.triggerName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteSqlTriggerOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlTriggerHeaders\n    },\n    201: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlTriggerHeaders\n    },\n    202: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlTriggerHeaders\n    },\n    204: {\n      headersMapper: Mappers.SqlResourcesDeleteSqlTriggerHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName,\n    Parameters.triggerName\n  ],\n  serializer\n};\nconst getSqlRoleDefinitionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleDefinitions/{roleDefinitionId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlRoleDefinitionGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.roleDefinitionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateSqlRoleDefinitionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleDefinitions/{roleDefinitionId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlRoleDefinitionGetResults\n    },\n    201: {\n      bodyMapper: Mappers.SqlRoleDefinitionGetResults\n    },\n    202: {\n      bodyMapper: Mappers.SqlRoleDefinitionGetResults\n    },\n    204: {\n      bodyMapper: Mappers.SqlRoleDefinitionGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.createUpdateSqlRoleDefinitionParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.roleDefinitionId\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteSqlRoleDefinitionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleDefinitions/{roleDefinitionId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.roleDefinitionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listSqlRoleDefinitionsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlRoleDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getSqlRoleAssignmentOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleAssignments/{roleAssignmentId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlRoleAssignmentGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.roleAssignmentId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateSqlRoleAssignmentOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleAssignments/{roleAssignmentId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlRoleAssignmentGetResults\n    },\n    201: {\n      bodyMapper: Mappers.SqlRoleAssignmentGetResults\n    },\n    202: {\n      bodyMapper: Mappers.SqlRoleAssignmentGetResults\n    },\n    204: {\n      bodyMapper: Mappers.SqlRoleAssignmentGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.createUpdateSqlRoleAssignmentParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.roleAssignmentId\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteSqlRoleAssignmentOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleAssignments/{roleAssignmentId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.roleAssignmentId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listSqlRoleAssignmentsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleAssignments\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlRoleAssignmentListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst retrieveContinuousBackupInformationOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/retrieveContinuousBackupInformation\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    201: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    202: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    204: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.location,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.containerName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { MongoDBResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  MongoDBDatabaseGetResults,\n  MongoDBResourcesListMongoDBDatabasesOptionalParams,\n  MongoDBResourcesListMongoDBDatabasesResponse,\n  MongoDBCollectionGetResults,\n  MongoDBResourcesListMongoDBCollectionsOptionalParams,\n  MongoDBResourcesListMongoDBCollectionsResponse,\n  MongoRoleDefinitionGetResults,\n  MongoDBResourcesListMongoRoleDefinitionsOptionalParams,\n  MongoDBResourcesListMongoRoleDefinitionsResponse,\n  MongoUserDefinitionGetResults,\n  MongoDBResourcesListMongoUserDefinitionsOptionalParams,\n  MongoDBResourcesListMongoUserDefinitionsResponse,\n  MongoDBResourcesGetMongoDBDatabaseOptionalParams,\n  MongoDBResourcesGetMongoDBDatabaseResponse,\n  MongoDBDatabaseCreateUpdateParameters,\n  MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams,\n  MongoDBResourcesCreateUpdateMongoDBDatabaseResponse,\n  MongoDBResourcesDeleteMongoDBDatabaseOptionalParams,\n  MongoDBResourcesDeleteMongoDBDatabaseResponse,\n  MongoDBResourcesGetMongoDBDatabaseThroughputOptionalParams,\n  MongoDBResourcesGetMongoDBDatabaseThroughputResponse,\n  ThroughputSettingsUpdateParameters,\n  MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams,\n  MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse,\n  MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams,\n  MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse,\n  MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams,\n  MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse,\n  MongoDBResourcesGetMongoDBCollectionOptionalParams,\n  MongoDBResourcesGetMongoDBCollectionResponse,\n  MongoDBCollectionCreateUpdateParameters,\n  MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams,\n  MongoDBResourcesCreateUpdateMongoDBCollectionResponse,\n  MongoDBResourcesDeleteMongoDBCollectionOptionalParams,\n  MongoDBResourcesDeleteMongoDBCollectionResponse,\n  MongoDBResourcesGetMongoDBCollectionThroughputOptionalParams,\n  MongoDBResourcesGetMongoDBCollectionThroughputResponse,\n  MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams,\n  MongoDBResourcesUpdateMongoDBCollectionThroughputResponse,\n  MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams,\n  MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse,\n  MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams,\n  MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse,\n  MongoDBResourcesGetMongoRoleDefinitionOptionalParams,\n  MongoDBResourcesGetMongoRoleDefinitionResponse,\n  MongoRoleDefinitionCreateUpdateParameters,\n  MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams,\n  MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse,\n  MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams,\n  MongoDBResourcesGetMongoUserDefinitionOptionalParams,\n  MongoDBResourcesGetMongoUserDefinitionResponse,\n  MongoUserDefinitionCreateUpdateParameters,\n  MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams,\n  MongoDBResourcesCreateUpdateMongoUserDefinitionResponse,\n  MongoDBResourcesDeleteMongoUserDefinitionOptionalParams,\n  ContinuousBackupRestoreLocation,\n  MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams,\n  MongoDBResourcesRetrieveContinuousBackupInformationResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing MongoDBResources operations. */\nexport class MongoDBResourcesImpl implements MongoDBResources {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class MongoDBResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists the MongoDB databases under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listMongoDBDatabases(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoDBDatabasesOptionalParams\n  ): PagedAsyncIterableIterator<MongoDBDatabaseGetResults> {\n    const iter = this.listMongoDBDatabasesPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMongoDBDatabasesPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMongoDBDatabasesPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoDBDatabasesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<MongoDBDatabaseGetResults[]> {\n    let result: MongoDBResourcesListMongoDBDatabasesResponse;\n    result = await this._listMongoDBDatabases(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMongoDBDatabasesPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoDBDatabasesOptionalParams\n  ): AsyncIterableIterator<MongoDBDatabaseGetResults> {\n    for await (const page of this.listMongoDBDatabasesPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the MongoDB collection under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  public listMongoDBCollections(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesListMongoDBCollectionsOptionalParams\n  ): PagedAsyncIterableIterator<MongoDBCollectionGetResults> {\n    const iter = this.listMongoDBCollectionsPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMongoDBCollectionsPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMongoDBCollectionsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesListMongoDBCollectionsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<MongoDBCollectionGetResults[]> {\n    let result: MongoDBResourcesListMongoDBCollectionsResponse;\n    result = await this._listMongoDBCollections(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMongoDBCollectionsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesListMongoDBCollectionsOptionalParams\n  ): AsyncIterableIterator<MongoDBCollectionGetResults> {\n    for await (const page of this.listMongoDBCollectionsPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the list of all Azure Cosmos DB Mongo Role Definitions.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listMongoRoleDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoRoleDefinitionsOptionalParams\n  ): PagedAsyncIterableIterator<MongoRoleDefinitionGetResults> {\n    const iter = this.listMongoRoleDefinitionsPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMongoRoleDefinitionsPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMongoRoleDefinitionsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoRoleDefinitionsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<MongoRoleDefinitionGetResults[]> {\n    let result: MongoDBResourcesListMongoRoleDefinitionsResponse;\n    result = await this._listMongoRoleDefinitions(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMongoRoleDefinitionsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoRoleDefinitionsOptionalParams\n  ): AsyncIterableIterator<MongoRoleDefinitionGetResults> {\n    for await (const page of this.listMongoRoleDefinitionsPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the list of all Azure Cosmos DB Mongo User Definition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listMongoUserDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoUserDefinitionsOptionalParams\n  ): PagedAsyncIterableIterator<MongoUserDefinitionGetResults> {\n    const iter = this.listMongoUserDefinitionsPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMongoUserDefinitionsPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listMongoUserDefinitionsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoUserDefinitionsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<MongoUserDefinitionGetResults[]> {\n    let result: MongoDBResourcesListMongoUserDefinitionsResponse;\n    result = await this._listMongoUserDefinitions(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listMongoUserDefinitionsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoUserDefinitionsOptionalParams\n  ): AsyncIterableIterator<MongoUserDefinitionGetResults> {\n    for await (const page of this.listMongoUserDefinitionsPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the MongoDB databases under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listMongoDBDatabases(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoDBDatabasesOptionalParams\n  ): Promise<MongoDBResourcesListMongoDBDatabasesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listMongoDBDatabasesOperationSpec\n    );\n  }\n\n  /**\n   * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided\n   * name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  getMongoDBDatabase(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesGetMongoDBDatabaseOptionalParams\n  ): Promise<MongoDBResourcesGetMongoDBDatabaseResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, options },\n      getMongoDBDatabaseOperationSpec\n    );\n  }\n\n  /**\n   * Create or updates Azure Cosmos DB MongoDB database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB\n   *                                              database.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateMongoDBDatabase(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    createUpdateMongoDBDatabaseParameters: MongoDBDatabaseCreateUpdateParameters,\n    options?: MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<MongoDBResourcesCreateUpdateMongoDBDatabaseResponse>,\n      MongoDBResourcesCreateUpdateMongoDBDatabaseResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesCreateUpdateMongoDBDatabaseResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        createUpdateMongoDBDatabaseParameters,\n        options\n      },\n      spec: createUpdateMongoDBDatabaseOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesCreateUpdateMongoDBDatabaseResponse,\n      OperationState<MongoDBResourcesCreateUpdateMongoDBDatabaseResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or updates Azure Cosmos DB MongoDB database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB\n   *                                              database.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateMongoDBDatabaseAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    createUpdateMongoDBDatabaseParameters: MongoDBDatabaseCreateUpdateParameters,\n    options?: MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams\n  ): Promise<MongoDBResourcesCreateUpdateMongoDBDatabaseResponse> {\n    const poller = await this.beginCreateUpdateMongoDBDatabase(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      createUpdateMongoDBDatabaseParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB MongoDB database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginDeleteMongoDBDatabase(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesDeleteMongoDBDatabaseOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<MongoDBResourcesDeleteMongoDBDatabaseResponse>,\n      MongoDBResourcesDeleteMongoDBDatabaseResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesDeleteMongoDBDatabaseResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, databaseName, options },\n      spec: deleteMongoDBDatabaseOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesDeleteMongoDBDatabaseResponse,\n      OperationState<MongoDBResourcesDeleteMongoDBDatabaseResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB MongoDB database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginDeleteMongoDBDatabaseAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesDeleteMongoDBDatabaseOptionalParams\n  ): Promise<MongoDBResourcesDeleteMongoDBDatabaseResponse> {\n    const poller = await this.beginDeleteMongoDBDatabase(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account\n   * with the provided name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  getMongoDBDatabaseThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesGetMongoDBDatabaseThroughputOptionalParams\n  ): Promise<MongoDBResourcesGetMongoDBDatabaseThroughputResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, options },\n      getMongoDBDatabaseThroughputOperationSpec\n    );\n  }\n\n  /**\n   * Update RUs per second of the an Azure Cosmos DB MongoDB database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   MongoDB database.\n   * @param options The options parameters.\n   */\n  async beginUpdateMongoDBDatabaseThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse>,\n      MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        updateThroughputParameters,\n        options\n      },\n      spec: updateMongoDBDatabaseThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse,\n      OperationState<MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update RUs per second of the an Azure Cosmos DB MongoDB database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   MongoDB database.\n   * @param options The options parameters.\n   */\n  async beginUpdateMongoDBDatabaseThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams\n  ): Promise<MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse> {\n    const poller = await this.beginUpdateMongoDBDatabaseThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      updateThroughputParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB MongoDB database from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateMongoDBDatabaseToAutoscale(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse>,\n      MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, databaseName, options },\n      spec: migrateMongoDBDatabaseToAutoscaleOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse,\n      OperationState<MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB MongoDB database from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateMongoDBDatabaseToAutoscaleAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams\n  ): Promise<MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse> {\n    const poller = await this.beginMigrateMongoDBDatabaseToAutoscale(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB MongoDB database from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateMongoDBDatabaseToManualThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse\n      >,\n      MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, databaseName, options },\n      spec: migrateMongoDBDatabaseToManualThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse,\n      OperationState<\n        MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB MongoDB database from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateMongoDBDatabaseToManualThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams\n  ): Promise<MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse> {\n    const poller = await this.beginMigrateMongoDBDatabaseToManualThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists the MongoDB collection under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  private _listMongoDBCollections(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: MongoDBResourcesListMongoDBCollectionsOptionalParams\n  ): Promise<MongoDBResourcesListMongoDBCollectionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, options },\n      listMongoDBCollectionsOperationSpec\n    );\n  }\n\n  /**\n   * Gets the MongoDB collection under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param options The options parameters.\n   */\n  getMongoDBCollection(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    options?: MongoDBResourcesGetMongoDBCollectionOptionalParams\n  ): Promise<MongoDBResourcesGetMongoDBCollectionResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, collectionName, options },\n      getMongoDBCollectionOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB MongoDB Collection\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB\n   *                                                Collection.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateMongoDBCollection(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    createUpdateMongoDBCollectionParameters: MongoDBCollectionCreateUpdateParameters,\n    options?: MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<MongoDBResourcesCreateUpdateMongoDBCollectionResponse>,\n      MongoDBResourcesCreateUpdateMongoDBCollectionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesCreateUpdateMongoDBCollectionResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        collectionName,\n        createUpdateMongoDBCollectionParameters,\n        options\n      },\n      spec: createUpdateMongoDBCollectionOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesCreateUpdateMongoDBCollectionResponse,\n      OperationState<MongoDBResourcesCreateUpdateMongoDBCollectionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB MongoDB Collection\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB\n   *                                                Collection.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateMongoDBCollectionAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    createUpdateMongoDBCollectionParameters: MongoDBCollectionCreateUpdateParameters,\n    options?: MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams\n  ): Promise<MongoDBResourcesCreateUpdateMongoDBCollectionResponse> {\n    const poller = await this.beginCreateUpdateMongoDBCollection(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      collectionName,\n      createUpdateMongoDBCollectionParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB MongoDB Collection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param options The options parameters.\n   */\n  async beginDeleteMongoDBCollection(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    options?: MongoDBResourcesDeleteMongoDBCollectionOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<MongoDBResourcesDeleteMongoDBCollectionResponse>,\n      MongoDBResourcesDeleteMongoDBCollectionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesDeleteMongoDBCollectionResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        collectionName,\n        options\n      },\n      spec: deleteMongoDBCollectionOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesDeleteMongoDBCollectionResponse,\n      OperationState<MongoDBResourcesDeleteMongoDBCollectionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB MongoDB Collection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param options The options parameters.\n   */\n  async beginDeleteMongoDBCollectionAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    options?: MongoDBResourcesDeleteMongoDBCollectionOptionalParams\n  ): Promise<MongoDBResourcesDeleteMongoDBCollectionResponse> {\n    const poller = await this.beginDeleteMongoDBCollection(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      collectionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account\n   * with the provided name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param options The options parameters.\n   */\n  getMongoDBCollectionThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    options?: MongoDBResourcesGetMongoDBCollectionThroughputOptionalParams\n  ): Promise<MongoDBResourcesGetMongoDBCollectionThroughputResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, collectionName, options },\n      getMongoDBCollectionThroughputOperationSpec\n    );\n  }\n\n  /**\n   * Update the RUs per second of an Azure Cosmos DB MongoDB collection\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   MongoDB collection.\n   * @param options The options parameters.\n   */\n  async beginUpdateMongoDBCollectionThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<MongoDBResourcesUpdateMongoDBCollectionThroughputResponse>,\n      MongoDBResourcesUpdateMongoDBCollectionThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesUpdateMongoDBCollectionThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        collectionName,\n        updateThroughputParameters,\n        options\n      },\n      spec: updateMongoDBCollectionThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesUpdateMongoDBCollectionThroughputResponse,\n      OperationState<MongoDBResourcesUpdateMongoDBCollectionThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update the RUs per second of an Azure Cosmos DB MongoDB collection\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   MongoDB collection.\n   * @param options The options parameters.\n   */\n  async beginUpdateMongoDBCollectionThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams\n  ): Promise<MongoDBResourcesUpdateMongoDBCollectionThroughputResponse> {\n    const poller = await this.beginUpdateMongoDBCollectionThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      collectionName,\n      updateThroughputParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB MongoDB collection from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param options The options parameters.\n   */\n  async beginMigrateMongoDBCollectionToAutoscale(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    options?: MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse\n      >,\n      MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        collectionName,\n        options\n      },\n      spec: migrateMongoDBCollectionToAutoscaleOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse,\n      OperationState<\n        MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB MongoDB collection from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param options The options parameters.\n   */\n  async beginMigrateMongoDBCollectionToAutoscaleAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    options?: MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams\n  ): Promise<MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse> {\n    const poller = await this.beginMigrateMongoDBCollectionToAutoscale(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      collectionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param options The options parameters.\n   */\n  async beginMigrateMongoDBCollectionToManualThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    options?: MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse\n      >,\n      MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        collectionName,\n        options\n      },\n      spec: migrateMongoDBCollectionToManualThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse,\n      OperationState<\n        MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param options The options parameters.\n   */\n  async beginMigrateMongoDBCollectionToManualThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    options?: MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams\n  ): Promise<\n    MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse\n  > {\n    const poller = await this.beginMigrateMongoDBCollectionToManualThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      collectionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Retrieves the properties of an existing Azure Cosmos DB Mongo Role Definition with the given Id.\n   * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  getMongoRoleDefinition(\n    mongoRoleDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesGetMongoRoleDefinitionOptionalParams\n  ): Promise<MongoDBResourcesGetMongoRoleDefinitionResponse> {\n    return this.client.sendOperationRequest(\n      { mongoRoleDefinitionId, resourceGroupName, accountName, options },\n      getMongoRoleDefinitionOperationSpec\n    );\n  }\n\n  /**\n   * Creates or updates an Azure Cosmos DB Mongo Role Definition.\n   * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param createUpdateMongoRoleDefinitionParameters The properties required to create or update a Role\n   *                                                  Definition.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateMongoRoleDefinition(\n    mongoRoleDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    createUpdateMongoRoleDefinitionParameters: MongoRoleDefinitionCreateUpdateParameters,\n    options?: MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse>,\n      MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        mongoRoleDefinitionId,\n        resourceGroupName,\n        accountName,\n        createUpdateMongoRoleDefinitionParameters,\n        options\n      },\n      spec: createUpdateMongoRoleDefinitionOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse,\n      OperationState<MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates an Azure Cosmos DB Mongo Role Definition.\n   * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param createUpdateMongoRoleDefinitionParameters The properties required to create or update a Role\n   *                                                  Definition.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateMongoRoleDefinitionAndWait(\n    mongoRoleDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    createUpdateMongoRoleDefinitionParameters: MongoRoleDefinitionCreateUpdateParameters,\n    options?: MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams\n  ): Promise<MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse> {\n    const poller = await this.beginCreateUpdateMongoRoleDefinition(\n      mongoRoleDefinitionId,\n      resourceGroupName,\n      accountName,\n      createUpdateMongoRoleDefinitionParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Mongo Role Definition.\n   * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  async beginDeleteMongoRoleDefinition(\n    mongoRoleDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { mongoRoleDefinitionId, resourceGroupName, accountName, options },\n      spec: deleteMongoRoleDefinitionOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Mongo Role Definition.\n   * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  async beginDeleteMongoRoleDefinitionAndWait(\n    mongoRoleDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDeleteMongoRoleDefinition(\n      mongoRoleDefinitionId,\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Retrieves the list of all Azure Cosmos DB Mongo Role Definitions.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listMongoRoleDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoRoleDefinitionsOptionalParams\n  ): Promise<MongoDBResourcesListMongoRoleDefinitionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listMongoRoleDefinitionsOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves the properties of an existing Azure Cosmos DB Mongo User Definition with the given Id.\n   * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  getMongoUserDefinition(\n    mongoUserDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesGetMongoUserDefinitionOptionalParams\n  ): Promise<MongoDBResourcesGetMongoUserDefinitionResponse> {\n    return this.client.sendOperationRequest(\n      { mongoUserDefinitionId, resourceGroupName, accountName, options },\n      getMongoUserDefinitionOperationSpec\n    );\n  }\n\n  /**\n   * Creates or updates an Azure Cosmos DB Mongo User Definition.\n   * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param createUpdateMongoUserDefinitionParameters The properties required to create or update a User\n   *                                                  Definition.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateMongoUserDefinition(\n    mongoUserDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    createUpdateMongoUserDefinitionParameters: MongoUserDefinitionCreateUpdateParameters,\n    options?: MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<MongoDBResourcesCreateUpdateMongoUserDefinitionResponse>,\n      MongoDBResourcesCreateUpdateMongoUserDefinitionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesCreateUpdateMongoUserDefinitionResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        mongoUserDefinitionId,\n        resourceGroupName,\n        accountName,\n        createUpdateMongoUserDefinitionParameters,\n        options\n      },\n      spec: createUpdateMongoUserDefinitionOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesCreateUpdateMongoUserDefinitionResponse,\n      OperationState<MongoDBResourcesCreateUpdateMongoUserDefinitionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates an Azure Cosmos DB Mongo User Definition.\n   * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param createUpdateMongoUserDefinitionParameters The properties required to create or update a User\n   *                                                  Definition.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateMongoUserDefinitionAndWait(\n    mongoUserDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    createUpdateMongoUserDefinitionParameters: MongoUserDefinitionCreateUpdateParameters,\n    options?: MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams\n  ): Promise<MongoDBResourcesCreateUpdateMongoUserDefinitionResponse> {\n    const poller = await this.beginCreateUpdateMongoUserDefinition(\n      mongoUserDefinitionId,\n      resourceGroupName,\n      accountName,\n      createUpdateMongoUserDefinitionParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Mongo User Definition.\n   * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  async beginDeleteMongoUserDefinition(\n    mongoUserDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesDeleteMongoUserDefinitionOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { mongoUserDefinitionId, resourceGroupName, accountName, options },\n      spec: deleteMongoUserDefinitionOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Mongo User Definition.\n   * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  async beginDeleteMongoUserDefinitionAndWait(\n    mongoUserDefinitionId: string,\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesDeleteMongoUserDefinitionOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDeleteMongoUserDefinition(\n      mongoUserDefinitionId,\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Retrieves the list of all Azure Cosmos DB Mongo User Definition.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listMongoUserDefinitions(\n    resourceGroupName: string,\n    accountName: string,\n    options?: MongoDBResourcesListMongoUserDefinitionsOptionalParams\n  ): Promise<MongoDBResourcesListMongoUserDefinitionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listMongoUserDefinitionsOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves continuous backup information for a Mongodb collection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param location The name of the continuous backup restore location.\n   * @param options The options parameters.\n   */\n  async beginRetrieveContinuousBackupInformation(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    location: ContinuousBackupRestoreLocation,\n    options?: MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        MongoDBResourcesRetrieveContinuousBackupInformationResponse\n      >,\n      MongoDBResourcesRetrieveContinuousBackupInformationResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<MongoDBResourcesRetrieveContinuousBackupInformationResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        collectionName,\n        location,\n        options\n      },\n      spec: retrieveContinuousBackupInformationOperationSpec\n    });\n    const poller = await createHttpPoller<\n      MongoDBResourcesRetrieveContinuousBackupInformationResponse,\n      OperationState<\n        MongoDBResourcesRetrieveContinuousBackupInformationResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Retrieves continuous backup information for a Mongodb collection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param collectionName Cosmos DB collection name.\n   * @param location The name of the continuous backup restore location.\n   * @param options The options parameters.\n   */\n  async beginRetrieveContinuousBackupInformationAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    collectionName: string,\n    location: ContinuousBackupRestoreLocation,\n    options?: MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams\n  ): Promise<MongoDBResourcesRetrieveContinuousBackupInformationResponse> {\n    const poller = await this.beginRetrieveContinuousBackupInformation(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      collectionName,\n      location,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listMongoDBDatabasesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoDBDatabaseListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMongoDBDatabaseOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoDBDatabaseGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateMongoDBDatabaseOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoDBDatabaseGetResults\n    },\n    201: {\n      bodyMapper: Mappers.MongoDBDatabaseGetResults\n    },\n    202: {\n      bodyMapper: Mappers.MongoDBDatabaseGetResults\n    },\n    204: {\n      bodyMapper: Mappers.MongoDBDatabaseGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateMongoDBDatabaseParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteMongoDBDatabaseOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.MongoDBResourcesDeleteMongoDBDatabaseHeaders\n    },\n    201: {\n      headersMapper: Mappers.MongoDBResourcesDeleteMongoDBDatabaseHeaders\n    },\n    202: {\n      headersMapper: Mappers.MongoDBResourcesDeleteMongoDBDatabaseHeaders\n    },\n    204: {\n      headersMapper: Mappers.MongoDBResourcesDeleteMongoDBDatabaseHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  serializer\n};\nconst getMongoDBDatabaseThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateMongoDBDatabaseThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.updateThroughputParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst migrateMongoDBDatabaseToAutoscaleOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default/migrateToAutoscale\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst migrateMongoDBDatabaseToManualThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default/migrateToManualThroughput\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listMongoDBCollectionsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoDBCollectionListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMongoDBCollectionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoDBCollectionGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.collectionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateMongoDBCollectionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoDBCollectionGetResults\n    },\n    201: {\n      bodyMapper: Mappers.MongoDBCollectionGetResults\n    },\n    202: {\n      bodyMapper: Mappers.MongoDBCollectionGetResults\n    },\n    204: {\n      bodyMapper: Mappers.MongoDBCollectionGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateMongoDBCollectionParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.collectionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteMongoDBCollectionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.MongoDBResourcesDeleteMongoDBCollectionHeaders\n    },\n    201: {\n      headersMapper: Mappers.MongoDBResourcesDeleteMongoDBCollectionHeaders\n    },\n    202: {\n      headersMapper: Mappers.MongoDBResourcesDeleteMongoDBCollectionHeaders\n    },\n    204: {\n      headersMapper: Mappers.MongoDBResourcesDeleteMongoDBCollectionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.collectionName\n  ],\n  serializer\n};\nconst getMongoDBCollectionThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.collectionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateMongoDBCollectionThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  requestBody: Parameters.updateThroughputParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.collectionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst migrateMongoDBCollectionToAutoscaleOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default/migrateToAutoscale\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.collectionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst migrateMongoDBCollectionToManualThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default/migrateToManualThroughput\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.collectionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMongoRoleDefinitionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbRoleDefinitions/{mongoRoleDefinitionId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoRoleDefinitionGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.mongoRoleDefinitionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateMongoRoleDefinitionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbRoleDefinitions/{mongoRoleDefinitionId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoRoleDefinitionGetResults\n    },\n    201: {\n      bodyMapper: Mappers.MongoRoleDefinitionGetResults\n    },\n    202: {\n      bodyMapper: Mappers.MongoRoleDefinitionGetResults\n    },\n    204: {\n      bodyMapper: Mappers.MongoRoleDefinitionGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.createUpdateMongoRoleDefinitionParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.mongoRoleDefinitionId\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteMongoRoleDefinitionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbRoleDefinitions/{mongoRoleDefinitionId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.mongoRoleDefinitionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listMongoRoleDefinitionsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbRoleDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoRoleDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMongoUserDefinitionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbUserDefinitions/{mongoUserDefinitionId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoUserDefinitionGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.mongoUserDefinitionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateMongoUserDefinitionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbUserDefinitions/{mongoUserDefinitionId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoUserDefinitionGetResults\n    },\n    201: {\n      bodyMapper: Mappers.MongoUserDefinitionGetResults\n    },\n    202: {\n      bodyMapper: Mappers.MongoUserDefinitionGetResults\n    },\n    204: {\n      bodyMapper: Mappers.MongoUserDefinitionGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.createUpdateMongoUserDefinitionParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.mongoUserDefinitionId\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteMongoUserDefinitionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbUserDefinitions/{mongoUserDefinitionId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.mongoUserDefinitionId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listMongoUserDefinitionsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbUserDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MongoUserDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst retrieveContinuousBackupInformationOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/retrieveContinuousBackupInformation\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    201: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    202: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    204: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.location,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.collectionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { TableResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  TableGetResults,\n  TableResourcesListTablesOptionalParams,\n  TableResourcesListTablesResponse,\n  TableResourcesGetTableOptionalParams,\n  TableResourcesGetTableResponse,\n  TableCreateUpdateParameters,\n  TableResourcesCreateUpdateTableOptionalParams,\n  TableResourcesCreateUpdateTableResponse,\n  TableResourcesDeleteTableOptionalParams,\n  TableResourcesDeleteTableResponse,\n  TableResourcesGetTableThroughputOptionalParams,\n  TableResourcesGetTableThroughputResponse,\n  ThroughputSettingsUpdateParameters,\n  TableResourcesUpdateTableThroughputOptionalParams,\n  TableResourcesUpdateTableThroughputResponse,\n  TableResourcesMigrateTableToAutoscaleOptionalParams,\n  TableResourcesMigrateTableToAutoscaleResponse,\n  TableResourcesMigrateTableToManualThroughputOptionalParams,\n  TableResourcesMigrateTableToManualThroughputResponse,\n  ContinuousBackupRestoreLocation,\n  TableResourcesRetrieveContinuousBackupInformationOptionalParams,\n  TableResourcesRetrieveContinuousBackupInformationResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing TableResources operations. */\nexport class TableResourcesImpl implements TableResources {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class TableResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists the Tables under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listTables(\n    resourceGroupName: string,\n    accountName: string,\n    options?: TableResourcesListTablesOptionalParams\n  ): PagedAsyncIterableIterator<TableGetResults> {\n    const iter = this.listTablesPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listTablesPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listTablesPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: TableResourcesListTablesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<TableGetResults[]> {\n    let result: TableResourcesListTablesResponse;\n    result = await this._listTables(resourceGroupName, accountName, options);\n    yield result.value || [];\n  }\n\n  private async *listTablesPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: TableResourcesListTablesOptionalParams\n  ): AsyncIterableIterator<TableGetResults> {\n    for await (const page of this.listTablesPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the Tables under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listTables(\n    resourceGroupName: string,\n    accountName: string,\n    options?: TableResourcesListTablesOptionalParams\n  ): Promise<TableResourcesListTablesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listTablesOperationSpec\n    );\n  }\n\n  /**\n   * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  getTable(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    options?: TableResourcesGetTableOptionalParams\n  ): Promise<TableResourcesGetTableResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, tableName, options },\n      getTableOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB Table\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param createUpdateTableParameters The parameters to provide for the current Table.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateTable(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    createUpdateTableParameters: TableCreateUpdateParameters,\n    options?: TableResourcesCreateUpdateTableOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TableResourcesCreateUpdateTableResponse>,\n      TableResourcesCreateUpdateTableResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TableResourcesCreateUpdateTableResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        tableName,\n        createUpdateTableParameters,\n        options\n      },\n      spec: createUpdateTableOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TableResourcesCreateUpdateTableResponse,\n      OperationState<TableResourcesCreateUpdateTableResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB Table\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param createUpdateTableParameters The parameters to provide for the current Table.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateTableAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    createUpdateTableParameters: TableCreateUpdateParameters,\n    options?: TableResourcesCreateUpdateTableOptionalParams\n  ): Promise<TableResourcesCreateUpdateTableResponse> {\n    const poller = await this.beginCreateUpdateTable(\n      resourceGroupName,\n      accountName,\n      tableName,\n      createUpdateTableParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Table.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginDeleteTable(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    options?: TableResourcesDeleteTableOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TableResourcesDeleteTableResponse>,\n      TableResourcesDeleteTableResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TableResourcesDeleteTableResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, tableName, options },\n      spec: deleteTableOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TableResourcesDeleteTableResponse,\n      OperationState<TableResourcesDeleteTableResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Table.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginDeleteTableAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    options?: TableResourcesDeleteTableOptionalParams\n  ): Promise<TableResourcesDeleteTableResponse> {\n    const poller = await this.beginDeleteTable(\n      resourceGroupName,\n      accountName,\n      tableName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the\n   * provided name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  getTableThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    options?: TableResourcesGetTableThroughputOptionalParams\n  ): Promise<TableResourcesGetTableThroughputResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, tableName, options },\n      getTableThroughputOperationSpec\n    );\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB Table\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current\n   *                                   Table.\n   * @param options The options parameters.\n   */\n  async beginUpdateTableThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: TableResourcesUpdateTableThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TableResourcesUpdateTableThroughputResponse>,\n      TableResourcesUpdateTableThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TableResourcesUpdateTableThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        tableName,\n        updateThroughputParameters,\n        options\n      },\n      spec: updateTableThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TableResourcesUpdateTableThroughputResponse,\n      OperationState<TableResourcesUpdateTableThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB Table\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current\n   *                                   Table.\n   * @param options The options parameters.\n   */\n  async beginUpdateTableThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: TableResourcesUpdateTableThroughputOptionalParams\n  ): Promise<TableResourcesUpdateTableThroughputResponse> {\n    const poller = await this.beginUpdateTableThroughput(\n      resourceGroupName,\n      accountName,\n      tableName,\n      updateThroughputParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Table from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginMigrateTableToAutoscale(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    options?: TableResourcesMigrateTableToAutoscaleOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TableResourcesMigrateTableToAutoscaleResponse>,\n      TableResourcesMigrateTableToAutoscaleResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TableResourcesMigrateTableToAutoscaleResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, tableName, options },\n      spec: migrateTableToAutoscaleOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TableResourcesMigrateTableToAutoscaleResponse,\n      OperationState<TableResourcesMigrateTableToAutoscaleResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Table from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginMigrateTableToAutoscaleAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    options?: TableResourcesMigrateTableToAutoscaleOptionalParams\n  ): Promise<TableResourcesMigrateTableToAutoscaleResponse> {\n    const poller = await this.beginMigrateTableToAutoscale(\n      resourceGroupName,\n      accountName,\n      tableName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Table from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginMigrateTableToManualThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    options?: TableResourcesMigrateTableToManualThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TableResourcesMigrateTableToManualThroughputResponse>,\n      TableResourcesMigrateTableToManualThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TableResourcesMigrateTableToManualThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, tableName, options },\n      spec: migrateTableToManualThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TableResourcesMigrateTableToManualThroughputResponse,\n      OperationState<TableResourcesMigrateTableToManualThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Table from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginMigrateTableToManualThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    options?: TableResourcesMigrateTableToManualThroughputOptionalParams\n  ): Promise<TableResourcesMigrateTableToManualThroughputResponse> {\n    const poller = await this.beginMigrateTableToManualThroughput(\n      resourceGroupName,\n      accountName,\n      tableName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Retrieves continuous backup information for a table.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param location The name of the continuous backup restore location.\n   * @param options The options parameters.\n   */\n  async beginRetrieveContinuousBackupInformation(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    location: ContinuousBackupRestoreLocation,\n    options?: TableResourcesRetrieveContinuousBackupInformationOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TableResourcesRetrieveContinuousBackupInformationResponse>,\n      TableResourcesRetrieveContinuousBackupInformationResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TableResourcesRetrieveContinuousBackupInformationResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, tableName, location, options },\n      spec: retrieveContinuousBackupInformationOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TableResourcesRetrieveContinuousBackupInformationResponse,\n      OperationState<TableResourcesRetrieveContinuousBackupInformationResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Retrieves continuous backup information for a table.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param tableName Cosmos DB table name.\n   * @param location The name of the continuous backup restore location.\n   * @param options The options parameters.\n   */\n  async beginRetrieveContinuousBackupInformationAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    tableName: string,\n    location: ContinuousBackupRestoreLocation,\n    options?: TableResourcesRetrieveContinuousBackupInformationOptionalParams\n  ): Promise<TableResourcesRetrieveContinuousBackupInformationResponse> {\n    const poller = await this.beginRetrieveContinuousBackupInformation(\n      resourceGroupName,\n      accountName,\n      tableName,\n      location,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listTablesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TableListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTableOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TableGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateTableOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TableGetResults\n    },\n    201: {\n      bodyMapper: Mappers.TableGetResults\n    },\n    202: {\n      bodyMapper: Mappers.TableGetResults\n    },\n    204: {\n      bodyMapper: Mappers.TableGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateTableParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteTableOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.TableResourcesDeleteTableHeaders\n    },\n    201: {\n      headersMapper: Mappers.TableResourcesDeleteTableHeaders\n    },\n    202: {\n      headersMapper: Mappers.TableResourcesDeleteTableHeaders\n    },\n    204: {\n      headersMapper: Mappers.TableResourcesDeleteTableHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName\n  ],\n  serializer\n};\nconst getTableThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateTableThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  requestBody: Parameters.updateThroughputParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst migrateTableToAutoscaleOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default/migrateToAutoscale\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst migrateTableToManualThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default/migrateToManualThroughput\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst retrieveContinuousBackupInformationOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/retrieveContinuousBackupInformation\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    201: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    202: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    204: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.location,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { CassandraResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  CassandraKeyspaceGetResults,\n  CassandraResourcesListCassandraKeyspacesOptionalParams,\n  CassandraResourcesListCassandraKeyspacesResponse,\n  CassandraTableGetResults,\n  CassandraResourcesListCassandraTablesOptionalParams,\n  CassandraResourcesListCassandraTablesResponse,\n  CassandraResourcesGetCassandraKeyspaceOptionalParams,\n  CassandraResourcesGetCassandraKeyspaceResponse,\n  CassandraKeyspaceCreateUpdateParameters,\n  CassandraResourcesCreateUpdateCassandraKeyspaceOptionalParams,\n  CassandraResourcesCreateUpdateCassandraKeyspaceResponse,\n  CassandraResourcesDeleteCassandraKeyspaceOptionalParams,\n  CassandraResourcesDeleteCassandraKeyspaceResponse,\n  CassandraResourcesGetCassandraKeyspaceThroughputOptionalParams,\n  CassandraResourcesGetCassandraKeyspaceThroughputResponse,\n  ThroughputSettingsUpdateParameters,\n  CassandraResourcesUpdateCassandraKeyspaceThroughputOptionalParams,\n  CassandraResourcesUpdateCassandraKeyspaceThroughputResponse,\n  CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOptionalParams,\n  CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse,\n  CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOptionalParams,\n  CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse,\n  CassandraResourcesGetCassandraTableOptionalParams,\n  CassandraResourcesGetCassandraTableResponse,\n  CassandraTableCreateUpdateParameters,\n  CassandraResourcesCreateUpdateCassandraTableOptionalParams,\n  CassandraResourcesCreateUpdateCassandraTableResponse,\n  CassandraResourcesDeleteCassandraTableOptionalParams,\n  CassandraResourcesDeleteCassandraTableResponse,\n  CassandraResourcesGetCassandraTableThroughputOptionalParams,\n  CassandraResourcesGetCassandraTableThroughputResponse,\n  CassandraResourcesUpdateCassandraTableThroughputOptionalParams,\n  CassandraResourcesUpdateCassandraTableThroughputResponse,\n  CassandraResourcesMigrateCassandraTableToAutoscaleOptionalParams,\n  CassandraResourcesMigrateCassandraTableToAutoscaleResponse,\n  CassandraResourcesMigrateCassandraTableToManualThroughputOptionalParams,\n  CassandraResourcesMigrateCassandraTableToManualThroughputResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing CassandraResources operations. */\nexport class CassandraResourcesImpl implements CassandraResources {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class CassandraResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listCassandraKeyspaces(\n    resourceGroupName: string,\n    accountName: string,\n    options?: CassandraResourcesListCassandraKeyspacesOptionalParams\n  ): PagedAsyncIterableIterator<CassandraKeyspaceGetResults> {\n    const iter = this.listCassandraKeyspacesPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listCassandraKeyspacesPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listCassandraKeyspacesPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: CassandraResourcesListCassandraKeyspacesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<CassandraKeyspaceGetResults[]> {\n    let result: CassandraResourcesListCassandraKeyspacesResponse;\n    result = await this._listCassandraKeyspaces(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listCassandraKeyspacesPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: CassandraResourcesListCassandraKeyspacesOptionalParams\n  ): AsyncIterableIterator<CassandraKeyspaceGetResults> {\n    for await (const page of this.listCassandraKeyspacesPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the Cassandra table under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param options The options parameters.\n   */\n  public listCassandraTables(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesListCassandraTablesOptionalParams\n  ): PagedAsyncIterableIterator<CassandraTableGetResults> {\n    const iter = this.listCassandraTablesPagingAll(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listCassandraTablesPagingPage(\n          resourceGroupName,\n          accountName,\n          keyspaceName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listCassandraTablesPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesListCassandraTablesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<CassandraTableGetResults[]> {\n    let result: CassandraResourcesListCassandraTablesResponse;\n    result = await this._listCassandraTables(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listCassandraTablesPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesListCassandraTablesOptionalParams\n  ): AsyncIterableIterator<CassandraTableGetResults> {\n    for await (const page of this.listCassandraTablesPagingPage(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listCassandraKeyspaces(\n    resourceGroupName: string,\n    accountName: string,\n    options?: CassandraResourcesListCassandraKeyspacesOptionalParams\n  ): Promise<CassandraResourcesListCassandraKeyspacesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listCassandraKeyspacesOperationSpec\n    );\n  }\n\n  /**\n   * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided\n   * name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param options The options parameters.\n   */\n  getCassandraKeyspace(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesGetCassandraKeyspaceOptionalParams\n  ): Promise<CassandraResourcesGetCassandraKeyspaceResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, keyspaceName, options },\n      getCassandraKeyspaceOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB Cassandra keyspace\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra\n   *                                                keyspace.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateCassandraKeyspace(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    createUpdateCassandraKeyspaceParameters: CassandraKeyspaceCreateUpdateParameters,\n    options?: CassandraResourcesCreateUpdateCassandraKeyspaceOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<CassandraResourcesCreateUpdateCassandraKeyspaceResponse>,\n      CassandraResourcesCreateUpdateCassandraKeyspaceResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraResourcesCreateUpdateCassandraKeyspaceResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        keyspaceName,\n        createUpdateCassandraKeyspaceParameters,\n        options\n      },\n      spec: createUpdateCassandraKeyspaceOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraResourcesCreateUpdateCassandraKeyspaceResponse,\n      OperationState<CassandraResourcesCreateUpdateCassandraKeyspaceResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB Cassandra keyspace\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra\n   *                                                keyspace.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateCassandraKeyspaceAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    createUpdateCassandraKeyspaceParameters: CassandraKeyspaceCreateUpdateParameters,\n    options?: CassandraResourcesCreateUpdateCassandraKeyspaceOptionalParams\n  ): Promise<CassandraResourcesCreateUpdateCassandraKeyspaceResponse> {\n    const poller = await this.beginCreateUpdateCassandraKeyspace(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      createUpdateCassandraKeyspaceParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Cassandra keyspace.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param options The options parameters.\n   */\n  async beginDeleteCassandraKeyspace(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesDeleteCassandraKeyspaceOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<CassandraResourcesDeleteCassandraKeyspaceResponse>,\n      CassandraResourcesDeleteCassandraKeyspaceResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraResourcesDeleteCassandraKeyspaceResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, keyspaceName, options },\n      spec: deleteCassandraKeyspaceOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraResourcesDeleteCassandraKeyspaceResponse,\n      OperationState<CassandraResourcesDeleteCassandraKeyspaceResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Cassandra keyspace.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param options The options parameters.\n   */\n  async beginDeleteCassandraKeyspaceAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesDeleteCassandraKeyspaceOptionalParams\n  ): Promise<CassandraResourcesDeleteCassandraKeyspaceResponse> {\n    const poller = await this.beginDeleteCassandraKeyspace(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account\n   * with the provided name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param options The options parameters.\n   */\n  getCassandraKeyspaceThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesGetCassandraKeyspaceThroughputOptionalParams\n  ): Promise<CassandraResourcesGetCassandraKeyspaceThroughputResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, keyspaceName, options },\n      getCassandraKeyspaceThroughputOperationSpec\n    );\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   Cassandra Keyspace.\n   * @param options The options parameters.\n   */\n  async beginUpdateCassandraKeyspaceThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: CassandraResourcesUpdateCassandraKeyspaceThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        CassandraResourcesUpdateCassandraKeyspaceThroughputResponse\n      >,\n      CassandraResourcesUpdateCassandraKeyspaceThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraResourcesUpdateCassandraKeyspaceThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        keyspaceName,\n        updateThroughputParameters,\n        options\n      },\n      spec: updateCassandraKeyspaceThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraResourcesUpdateCassandraKeyspaceThroughputResponse,\n      OperationState<\n        CassandraResourcesUpdateCassandraKeyspaceThroughputResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   Cassandra Keyspace.\n   * @param options The options parameters.\n   */\n  async beginUpdateCassandraKeyspaceThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: CassandraResourcesUpdateCassandraKeyspaceThroughputOptionalParams\n  ): Promise<CassandraResourcesUpdateCassandraKeyspaceThroughputResponse> {\n    const poller = await this.beginUpdateCassandraKeyspaceThroughput(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      updateThroughputParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param options The options parameters.\n   */\n  async beginMigrateCassandraKeyspaceToAutoscale(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse\n      >,\n      CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, keyspaceName, options },\n      spec: migrateCassandraKeyspaceToAutoscaleOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse,\n      OperationState<\n        CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param options The options parameters.\n   */\n  async beginMigrateCassandraKeyspaceToAutoscaleAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOptionalParams\n  ): Promise<CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse> {\n    const poller = await this.beginMigrateCassandraKeyspaceToAutoscale(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param options The options parameters.\n   */\n  async beginMigrateCassandraKeyspaceToManualThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse\n      >,\n      CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, keyspaceName, options },\n      spec: migrateCassandraKeyspaceToManualThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse,\n      OperationState<\n        CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param options The options parameters.\n   */\n  async beginMigrateCassandraKeyspaceToManualThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOptionalParams\n  ): Promise<\n    CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse\n  > {\n    const poller = await this.beginMigrateCassandraKeyspaceToManualThroughput(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists the Cassandra table under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param options The options parameters.\n   */\n  private _listCassandraTables(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    options?: CassandraResourcesListCassandraTablesOptionalParams\n  ): Promise<CassandraResourcesListCassandraTablesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, keyspaceName, options },\n      listCassandraTablesOperationSpec\n    );\n  }\n\n  /**\n   * Gets the Cassandra table under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  getCassandraTable(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    options?: CassandraResourcesGetCassandraTableOptionalParams\n  ): Promise<CassandraResourcesGetCassandraTableResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, keyspaceName, tableName, options },\n      getCassandraTableOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB Cassandra Table\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra\n   *                                             Table.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateCassandraTable(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    createUpdateCassandraTableParameters: CassandraTableCreateUpdateParameters,\n    options?: CassandraResourcesCreateUpdateCassandraTableOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<CassandraResourcesCreateUpdateCassandraTableResponse>,\n      CassandraResourcesCreateUpdateCassandraTableResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraResourcesCreateUpdateCassandraTableResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        keyspaceName,\n        tableName,\n        createUpdateCassandraTableParameters,\n        options\n      },\n      spec: createUpdateCassandraTableOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraResourcesCreateUpdateCassandraTableResponse,\n      OperationState<CassandraResourcesCreateUpdateCassandraTableResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB Cassandra Table\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra\n   *                                             Table.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateCassandraTableAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    createUpdateCassandraTableParameters: CassandraTableCreateUpdateParameters,\n    options?: CassandraResourcesCreateUpdateCassandraTableOptionalParams\n  ): Promise<CassandraResourcesCreateUpdateCassandraTableResponse> {\n    const poller = await this.beginCreateUpdateCassandraTable(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      tableName,\n      createUpdateCassandraTableParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Cassandra table.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginDeleteCassandraTable(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    options?: CassandraResourcesDeleteCassandraTableOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<CassandraResourcesDeleteCassandraTableResponse>,\n      CassandraResourcesDeleteCassandraTableResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraResourcesDeleteCassandraTableResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        keyspaceName,\n        tableName,\n        options\n      },\n      spec: deleteCassandraTableOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraResourcesDeleteCassandraTableResponse,\n      OperationState<CassandraResourcesDeleteCassandraTableResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Cassandra table.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginDeleteCassandraTableAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    options?: CassandraResourcesDeleteCassandraTableOptionalParams\n  ): Promise<CassandraResourcesDeleteCassandraTableResponse> {\n    const poller = await this.beginDeleteCassandraTable(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      tableName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account\n   * with the provided name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  getCassandraTableThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    options?: CassandraResourcesGetCassandraTableThroughputOptionalParams\n  ): Promise<CassandraResourcesGetCassandraTableThroughputResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, keyspaceName, tableName, options },\n      getCassandraTableThroughputOperationSpec\n    );\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB Cassandra table\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   Cassandra table.\n   * @param options The options parameters.\n   */\n  async beginUpdateCassandraTableThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: CassandraResourcesUpdateCassandraTableThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<CassandraResourcesUpdateCassandraTableThroughputResponse>,\n      CassandraResourcesUpdateCassandraTableThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraResourcesUpdateCassandraTableThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        keyspaceName,\n        tableName,\n        updateThroughputParameters,\n        options\n      },\n      spec: updateCassandraTableThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraResourcesUpdateCassandraTableThroughputResponse,\n      OperationState<CassandraResourcesUpdateCassandraTableThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB Cassandra table\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   Cassandra table.\n   * @param options The options parameters.\n   */\n  async beginUpdateCassandraTableThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: CassandraResourcesUpdateCassandraTableThroughputOptionalParams\n  ): Promise<CassandraResourcesUpdateCassandraTableThroughputResponse> {\n    const poller = await this.beginUpdateCassandraTableThroughput(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      tableName,\n      updateThroughputParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginMigrateCassandraTableToAutoscale(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    options?: CassandraResourcesMigrateCassandraTableToAutoscaleOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        CassandraResourcesMigrateCassandraTableToAutoscaleResponse\n      >,\n      CassandraResourcesMigrateCassandraTableToAutoscaleResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraResourcesMigrateCassandraTableToAutoscaleResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        keyspaceName,\n        tableName,\n        options\n      },\n      spec: migrateCassandraTableToAutoscaleOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraResourcesMigrateCassandraTableToAutoscaleResponse,\n      OperationState<CassandraResourcesMigrateCassandraTableToAutoscaleResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginMigrateCassandraTableToAutoscaleAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    options?: CassandraResourcesMigrateCassandraTableToAutoscaleOptionalParams\n  ): Promise<CassandraResourcesMigrateCassandraTableToAutoscaleResponse> {\n    const poller = await this.beginMigrateCassandraTableToAutoscale(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      tableName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginMigrateCassandraTableToManualThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    options?: CassandraResourcesMigrateCassandraTableToManualThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        CassandraResourcesMigrateCassandraTableToManualThroughputResponse\n      >,\n      CassandraResourcesMigrateCassandraTableToManualThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraResourcesMigrateCassandraTableToManualThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        keyspaceName,\n        tableName,\n        options\n      },\n      spec: migrateCassandraTableToManualThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraResourcesMigrateCassandraTableToManualThroughputResponse,\n      OperationState<\n        CassandraResourcesMigrateCassandraTableToManualThroughputResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param keyspaceName Cosmos DB keyspace name.\n   * @param tableName Cosmos DB table name.\n   * @param options The options parameters.\n   */\n  async beginMigrateCassandraTableToManualThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    keyspaceName: string,\n    tableName: string,\n    options?: CassandraResourcesMigrateCassandraTableToManualThroughputOptionalParams\n  ): Promise<\n    CassandraResourcesMigrateCassandraTableToManualThroughputResponse\n  > {\n    const poller = await this.beginMigrateCassandraTableToManualThroughput(\n      resourceGroupName,\n      accountName,\n      keyspaceName,\n      tableName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listCassandraKeyspacesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CassandraKeyspaceListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCassandraKeyspaceOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CassandraKeyspaceGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateCassandraKeyspaceOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CassandraKeyspaceGetResults\n    },\n    201: {\n      bodyMapper: Mappers.CassandraKeyspaceGetResults\n    },\n    202: {\n      bodyMapper: Mappers.CassandraKeyspaceGetResults\n    },\n    204: {\n      bodyMapper: Mappers.CassandraKeyspaceGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateCassandraKeyspaceParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteCassandraKeyspaceOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.CassandraResourcesDeleteCassandraKeyspaceHeaders\n    },\n    201: {\n      headersMapper: Mappers.CassandraResourcesDeleteCassandraKeyspaceHeaders\n    },\n    202: {\n      headersMapper: Mappers.CassandraResourcesDeleteCassandraKeyspaceHeaders\n    },\n    204: {\n      headersMapper: Mappers.CassandraResourcesDeleteCassandraKeyspaceHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.keyspaceName\n  ],\n  serializer\n};\nconst getCassandraKeyspaceThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateCassandraKeyspaceThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  requestBody: Parameters.updateThroughputParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst migrateCassandraKeyspaceToAutoscaleOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default/migrateToAutoscale\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst migrateCassandraKeyspaceToManualThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default/migrateToManualThroughput\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listCassandraTablesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CassandraTableListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCassandraTableOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CassandraTableGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateCassandraTableOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CassandraTableGetResults\n    },\n    201: {\n      bodyMapper: Mappers.CassandraTableGetResults\n    },\n    202: {\n      bodyMapper: Mappers.CassandraTableGetResults\n    },\n    204: {\n      bodyMapper: Mappers.CassandraTableGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateCassandraTableParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteCassandraTableOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.CassandraResourcesDeleteCassandraTableHeaders\n    },\n    201: {\n      headersMapper: Mappers.CassandraResourcesDeleteCassandraTableHeaders\n    },\n    202: {\n      headersMapper: Mappers.CassandraResourcesDeleteCassandraTableHeaders\n    },\n    204: {\n      headersMapper: Mappers.CassandraResourcesDeleteCassandraTableHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName,\n    Parameters.keyspaceName\n  ],\n  serializer\n};\nconst getCassandraTableThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateCassandraTableThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  requestBody: Parameters.updateThroughputParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst migrateCassandraTableToAutoscaleOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default/migrateToAutoscale\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst migrateCassandraTableToManualThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default/migrateToManualThroughput\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.tableName,\n    Parameters.keyspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { GremlinResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  GremlinDatabaseGetResults,\n  GremlinResourcesListGremlinDatabasesOptionalParams,\n  GremlinResourcesListGremlinDatabasesResponse,\n  GremlinGraphGetResults,\n  GremlinResourcesListGremlinGraphsOptionalParams,\n  GremlinResourcesListGremlinGraphsResponse,\n  GremlinResourcesGetGremlinDatabaseOptionalParams,\n  GremlinResourcesGetGremlinDatabaseResponse,\n  GremlinDatabaseCreateUpdateParameters,\n  GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams,\n  GremlinResourcesCreateUpdateGremlinDatabaseResponse,\n  GremlinResourcesDeleteGremlinDatabaseOptionalParams,\n  GremlinResourcesDeleteGremlinDatabaseResponse,\n  GremlinResourcesGetGremlinDatabaseThroughputOptionalParams,\n  GremlinResourcesGetGremlinDatabaseThroughputResponse,\n  ThroughputSettingsUpdateParameters,\n  GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams,\n  GremlinResourcesUpdateGremlinDatabaseThroughputResponse,\n  GremlinResourcesMigrateGremlinDatabaseToAutoscaleOptionalParams,\n  GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse,\n  GremlinResourcesMigrateGremlinDatabaseToManualThroughputOptionalParams,\n  GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse,\n  GremlinResourcesGetGremlinGraphOptionalParams,\n  GremlinResourcesGetGremlinGraphResponse,\n  GremlinGraphCreateUpdateParameters,\n  GremlinResourcesCreateUpdateGremlinGraphOptionalParams,\n  GremlinResourcesCreateUpdateGremlinGraphResponse,\n  GremlinResourcesDeleteGremlinGraphOptionalParams,\n  GremlinResourcesDeleteGremlinGraphResponse,\n  GremlinResourcesGetGremlinGraphThroughputOptionalParams,\n  GremlinResourcesGetGremlinGraphThroughputResponse,\n  GremlinResourcesUpdateGremlinGraphThroughputOptionalParams,\n  GremlinResourcesUpdateGremlinGraphThroughputResponse,\n  GremlinResourcesMigrateGremlinGraphToAutoscaleOptionalParams,\n  GremlinResourcesMigrateGremlinGraphToAutoscaleResponse,\n  GremlinResourcesMigrateGremlinGraphToManualThroughputOptionalParams,\n  GremlinResourcesMigrateGremlinGraphToManualThroughputResponse,\n  ContinuousBackupRestoreLocation,\n  GremlinResourcesRetrieveContinuousBackupInformationOptionalParams,\n  GremlinResourcesRetrieveContinuousBackupInformationResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing GremlinResources operations. */\nexport class GremlinResourcesImpl implements GremlinResources {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class GremlinResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists the Gremlin databases under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listGremlinDatabases(\n    resourceGroupName: string,\n    accountName: string,\n    options?: GremlinResourcesListGremlinDatabasesOptionalParams\n  ): PagedAsyncIterableIterator<GremlinDatabaseGetResults> {\n    const iter = this.listGremlinDatabasesPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listGremlinDatabasesPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listGremlinDatabasesPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: GremlinResourcesListGremlinDatabasesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<GremlinDatabaseGetResults[]> {\n    let result: GremlinResourcesListGremlinDatabasesResponse;\n    result = await this._listGremlinDatabases(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listGremlinDatabasesPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: GremlinResourcesListGremlinDatabasesOptionalParams\n  ): AsyncIterableIterator<GremlinDatabaseGetResults> {\n    for await (const page of this.listGremlinDatabasesPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the Gremlin graph under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  public listGremlinGraphs(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesListGremlinGraphsOptionalParams\n  ): PagedAsyncIterableIterator<GremlinGraphGetResults> {\n    const iter = this.listGremlinGraphsPagingAll(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listGremlinGraphsPagingPage(\n          resourceGroupName,\n          accountName,\n          databaseName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listGremlinGraphsPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesListGremlinGraphsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<GremlinGraphGetResults[]> {\n    let result: GremlinResourcesListGremlinGraphsResponse;\n    result = await this._listGremlinGraphs(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listGremlinGraphsPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesListGremlinGraphsOptionalParams\n  ): AsyncIterableIterator<GremlinGraphGetResults> {\n    for await (const page of this.listGremlinGraphsPagingPage(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the Gremlin databases under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listGremlinDatabases(\n    resourceGroupName: string,\n    accountName: string,\n    options?: GremlinResourcesListGremlinDatabasesOptionalParams\n  ): Promise<GremlinResourcesListGremlinDatabasesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listGremlinDatabasesOperationSpec\n    );\n  }\n\n  /**\n   * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided\n   * name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  getGremlinDatabase(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesGetGremlinDatabaseOptionalParams\n  ): Promise<GremlinResourcesGetGremlinDatabaseResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, options },\n      getGremlinDatabaseOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB Gremlin database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin\n   *                                              database.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateGremlinDatabase(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    createUpdateGremlinDatabaseParameters: GremlinDatabaseCreateUpdateParameters,\n    options?: GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GremlinResourcesCreateUpdateGremlinDatabaseResponse>,\n      GremlinResourcesCreateUpdateGremlinDatabaseResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesCreateUpdateGremlinDatabaseResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        createUpdateGremlinDatabaseParameters,\n        options\n      },\n      spec: createUpdateGremlinDatabaseOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesCreateUpdateGremlinDatabaseResponse,\n      OperationState<GremlinResourcesCreateUpdateGremlinDatabaseResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB Gremlin database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin\n   *                                              database.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateGremlinDatabaseAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    createUpdateGremlinDatabaseParameters: GremlinDatabaseCreateUpdateParameters,\n    options?: GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams\n  ): Promise<GremlinResourcesCreateUpdateGremlinDatabaseResponse> {\n    const poller = await this.beginCreateUpdateGremlinDatabase(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      createUpdateGremlinDatabaseParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Gremlin database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginDeleteGremlinDatabase(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesDeleteGremlinDatabaseOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GremlinResourcesDeleteGremlinDatabaseResponse>,\n      GremlinResourcesDeleteGremlinDatabaseResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesDeleteGremlinDatabaseResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, databaseName, options },\n      spec: deleteGremlinDatabaseOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesDeleteGremlinDatabaseResponse,\n      OperationState<GremlinResourcesDeleteGremlinDatabaseResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Gremlin database.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginDeleteGremlinDatabaseAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesDeleteGremlinDatabaseOptionalParams\n  ): Promise<GremlinResourcesDeleteGremlinDatabaseResponse> {\n    const poller = await this.beginDeleteGremlinDatabase(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account\n   * with the provided name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  getGremlinDatabaseThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesGetGremlinDatabaseThroughputOptionalParams\n  ): Promise<GremlinResourcesGetGremlinDatabaseThroughputResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, options },\n      getGremlinDatabaseThroughputOperationSpec\n    );\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB Gremlin database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   Gremlin database.\n   * @param options The options parameters.\n   */\n  async beginUpdateGremlinDatabaseThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GremlinResourcesUpdateGremlinDatabaseThroughputResponse>,\n      GremlinResourcesUpdateGremlinDatabaseThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesUpdateGremlinDatabaseThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        updateThroughputParameters,\n        options\n      },\n      spec: updateGremlinDatabaseThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesUpdateGremlinDatabaseThroughputResponse,\n      OperationState<GremlinResourcesUpdateGremlinDatabaseThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB Gremlin database\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   Gremlin database.\n   * @param options The options parameters.\n   */\n  async beginUpdateGremlinDatabaseThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams\n  ): Promise<GremlinResourcesUpdateGremlinDatabaseThroughputResponse> {\n    const poller = await this.beginUpdateGremlinDatabaseThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      updateThroughputParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Gremlin database from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateGremlinDatabaseToAutoscale(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesMigrateGremlinDatabaseToAutoscaleOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse>,\n      GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, databaseName, options },\n      spec: migrateGremlinDatabaseToAutoscaleOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse,\n      OperationState<GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Gremlin database from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateGremlinDatabaseToAutoscaleAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesMigrateGremlinDatabaseToAutoscaleOptionalParams\n  ): Promise<GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse> {\n    const poller = await this.beginMigrateGremlinDatabaseToAutoscale(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Gremlin database from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateGremlinDatabaseToManualThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesMigrateGremlinDatabaseToManualThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse\n      >,\n      GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, databaseName, options },\n      spec: migrateGremlinDatabaseToManualThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse,\n      OperationState<\n        GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Gremlin database from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  async beginMigrateGremlinDatabaseToManualThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesMigrateGremlinDatabaseToManualThroughputOptionalParams\n  ): Promise<GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse> {\n    const poller = await this.beginMigrateGremlinDatabaseToManualThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists the Gremlin graph under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param options The options parameters.\n   */\n  private _listGremlinGraphs(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    options?: GremlinResourcesListGremlinGraphsOptionalParams\n  ): Promise<GremlinResourcesListGremlinGraphsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, options },\n      listGremlinGraphsOperationSpec\n    );\n  }\n\n  /**\n   * Gets the Gremlin graph under an existing Azure Cosmos DB database account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param options The options parameters.\n   */\n  getGremlinGraph(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    options?: GremlinResourcesGetGremlinGraphOptionalParams\n  ): Promise<GremlinResourcesGetGremlinGraphResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, graphName, options },\n      getGremlinGraphOperationSpec\n    );\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB Gremlin graph\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateGremlinGraph(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    createUpdateGremlinGraphParameters: GremlinGraphCreateUpdateParameters,\n    options?: GremlinResourcesCreateUpdateGremlinGraphOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GremlinResourcesCreateUpdateGremlinGraphResponse>,\n      GremlinResourcesCreateUpdateGremlinGraphResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesCreateUpdateGremlinGraphResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        graphName,\n        createUpdateGremlinGraphParameters,\n        options\n      },\n      spec: createUpdateGremlinGraphOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesCreateUpdateGremlinGraphResponse,\n      OperationState<GremlinResourcesCreateUpdateGremlinGraphResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update an Azure Cosmos DB Gremlin graph\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateGremlinGraphAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    createUpdateGremlinGraphParameters: GremlinGraphCreateUpdateParameters,\n    options?: GremlinResourcesCreateUpdateGremlinGraphOptionalParams\n  ): Promise<GremlinResourcesCreateUpdateGremlinGraphResponse> {\n    const poller = await this.beginCreateUpdateGremlinGraph(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      graphName,\n      createUpdateGremlinGraphParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Gremlin graph.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param options The options parameters.\n   */\n  async beginDeleteGremlinGraph(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    options?: GremlinResourcesDeleteGremlinGraphOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GremlinResourcesDeleteGremlinGraphResponse>,\n      GremlinResourcesDeleteGremlinGraphResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesDeleteGremlinGraphResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        graphName,\n        options\n      },\n      spec: deleteGremlinGraphOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesDeleteGremlinGraphResponse,\n      OperationState<GremlinResourcesDeleteGremlinGraphResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes an existing Azure Cosmos DB Gremlin graph.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param options The options parameters.\n   */\n  async beginDeleteGremlinGraphAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    options?: GremlinResourcesDeleteGremlinGraphOptionalParams\n  ): Promise<GremlinResourcesDeleteGremlinGraphResponse> {\n    const poller = await this.beginDeleteGremlinGraph(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      graphName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the\n   * provided name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param options The options parameters.\n   */\n  getGremlinGraphThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    options?: GremlinResourcesGetGremlinGraphThroughputOptionalParams\n  ): Promise<GremlinResourcesGetGremlinGraphThroughputResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, databaseName, graphName, options },\n      getGremlinGraphThroughputOperationSpec\n    );\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB Gremlin graph\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   Gremlin graph.\n   * @param options The options parameters.\n   */\n  async beginUpdateGremlinGraphThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: GremlinResourcesUpdateGremlinGraphThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GremlinResourcesUpdateGremlinGraphThroughputResponse>,\n      GremlinResourcesUpdateGremlinGraphThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesUpdateGremlinGraphThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        graphName,\n        updateThroughputParameters,\n        options\n      },\n      spec: updateGremlinGraphThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesUpdateGremlinGraphThroughputResponse,\n      OperationState<GremlinResourcesUpdateGremlinGraphThroughputResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update RUs per second of an Azure Cosmos DB Gremlin graph\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current\n   *                                   Gremlin graph.\n   * @param options The options parameters.\n   */\n  async beginUpdateGremlinGraphThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    updateThroughputParameters: ThroughputSettingsUpdateParameters,\n    options?: GremlinResourcesUpdateGremlinGraphThroughputOptionalParams\n  ): Promise<GremlinResourcesUpdateGremlinGraphThroughputResponse> {\n    const poller = await this.beginUpdateGremlinGraphThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      graphName,\n      updateThroughputParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Gremlin graph from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param options The options parameters.\n   */\n  async beginMigrateGremlinGraphToAutoscale(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    options?: GremlinResourcesMigrateGremlinGraphToAutoscaleOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GremlinResourcesMigrateGremlinGraphToAutoscaleResponse>,\n      GremlinResourcesMigrateGremlinGraphToAutoscaleResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesMigrateGremlinGraphToAutoscaleResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        graphName,\n        options\n      },\n      spec: migrateGremlinGraphToAutoscaleOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesMigrateGremlinGraphToAutoscaleResponse,\n      OperationState<GremlinResourcesMigrateGremlinGraphToAutoscaleResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Gremlin graph from manual throughput to autoscale\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param options The options parameters.\n   */\n  async beginMigrateGremlinGraphToAutoscaleAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    options?: GremlinResourcesMigrateGremlinGraphToAutoscaleOptionalParams\n  ): Promise<GremlinResourcesMigrateGremlinGraphToAutoscaleResponse> {\n    const poller = await this.beginMigrateGremlinGraphToAutoscale(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      graphName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Gremlin graph from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param options The options parameters.\n   */\n  async beginMigrateGremlinGraphToManualThroughput(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    options?: GremlinResourcesMigrateGremlinGraphToManualThroughputOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        GremlinResourcesMigrateGremlinGraphToManualThroughputResponse\n      >,\n      GremlinResourcesMigrateGremlinGraphToManualThroughputResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesMigrateGremlinGraphToManualThroughputResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        graphName,\n        options\n      },\n      spec: migrateGremlinGraphToManualThroughputOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesMigrateGremlinGraphToManualThroughputResponse,\n      OperationState<\n        GremlinResourcesMigrateGremlinGraphToManualThroughputResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Migrate an Azure Cosmos DB Gremlin graph from autoscale to manual throughput\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param options The options parameters.\n   */\n  async beginMigrateGremlinGraphToManualThroughputAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    options?: GremlinResourcesMigrateGremlinGraphToManualThroughputOptionalParams\n  ): Promise<GremlinResourcesMigrateGremlinGraphToManualThroughputResponse> {\n    const poller = await this.beginMigrateGremlinGraphToManualThroughput(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      graphName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Retrieves continuous backup information for a gremlin graph.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param location The name of the continuous backup restore location.\n   * @param options The options parameters.\n   */\n  async beginRetrieveContinuousBackupInformation(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    location: ContinuousBackupRestoreLocation,\n    options?: GremlinResourcesRetrieveContinuousBackupInformationOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<\n        GremlinResourcesRetrieveContinuousBackupInformationResponse\n      >,\n      GremlinResourcesRetrieveContinuousBackupInformationResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GremlinResourcesRetrieveContinuousBackupInformationResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        databaseName,\n        graphName,\n        location,\n        options\n      },\n      spec: retrieveContinuousBackupInformationOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GremlinResourcesRetrieveContinuousBackupInformationResponse,\n      OperationState<\n        GremlinResourcesRetrieveContinuousBackupInformationResponse\n      >\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Retrieves continuous backup information for a gremlin graph.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param databaseName Cosmos DB database name.\n   * @param graphName Cosmos DB graph name.\n   * @param location The name of the continuous backup restore location.\n   * @param options The options parameters.\n   */\n  async beginRetrieveContinuousBackupInformationAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    databaseName: string,\n    graphName: string,\n    location: ContinuousBackupRestoreLocation,\n    options?: GremlinResourcesRetrieveContinuousBackupInformationOptionalParams\n  ): Promise<GremlinResourcesRetrieveContinuousBackupInformationResponse> {\n    const poller = await this.beginRetrieveContinuousBackupInformation(\n      resourceGroupName,\n      accountName,\n      databaseName,\n      graphName,\n      location,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listGremlinDatabasesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GremlinDatabaseListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGremlinDatabaseOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GremlinDatabaseGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateGremlinDatabaseOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GremlinDatabaseGetResults\n    },\n    201: {\n      bodyMapper: Mappers.GremlinDatabaseGetResults\n    },\n    202: {\n      bodyMapper: Mappers.GremlinDatabaseGetResults\n    },\n    204: {\n      bodyMapper: Mappers.GremlinDatabaseGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateGremlinDatabaseParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteGremlinDatabaseOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.GremlinResourcesDeleteGremlinDatabaseHeaders\n    },\n    201: {\n      headersMapper: Mappers.GremlinResourcesDeleteGremlinDatabaseHeaders\n    },\n    202: {\n      headersMapper: Mappers.GremlinResourcesDeleteGremlinDatabaseHeaders\n    },\n    204: {\n      headersMapper: Mappers.GremlinResourcesDeleteGremlinDatabaseHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  serializer\n};\nconst getGremlinDatabaseThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateGremlinDatabaseThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  requestBody: Parameters.updateThroughputParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst migrateGremlinDatabaseToAutoscaleOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default/migrateToAutoscale\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst migrateGremlinDatabaseToManualThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default/migrateToManualThroughput\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listGremlinGraphsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GremlinGraphListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGremlinGraphOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GremlinGraphGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.graphName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateGremlinGraphOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GremlinGraphGetResults\n    },\n    201: {\n      bodyMapper: Mappers.GremlinGraphGetResults\n    },\n    202: {\n      bodyMapper: Mappers.GremlinGraphGetResults\n    },\n    204: {\n      bodyMapper: Mappers.GremlinGraphGetResults\n    }\n  },\n  requestBody: Parameters.createUpdateGremlinGraphParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.graphName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteGremlinGraphOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.GremlinResourcesDeleteGremlinGraphHeaders\n    },\n    201: {\n      headersMapper: Mappers.GremlinResourcesDeleteGremlinGraphHeaders\n    },\n    202: {\n      headersMapper: Mappers.GremlinResourcesDeleteGremlinGraphHeaders\n    },\n    204: {\n      headersMapper: Mappers.GremlinResourcesDeleteGremlinGraphHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.graphName\n  ],\n  serializer\n};\nconst getGremlinGraphThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.graphName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateGremlinGraphThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    }\n  },\n  requestBody: Parameters.updateThroughputParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.graphName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst migrateGremlinGraphToAutoscaleOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default/migrateToAutoscale\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.graphName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst migrateGremlinGraphToManualThroughputOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default/migrateToManualThroughput\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    201: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    202: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    204: {\n      bodyMapper: Mappers.ThroughputSettingsGetResults\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.graphName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst retrieveContinuousBackupInformationOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/retrieveContinuousBackupInformation\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    201: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    202: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    204: {\n      bodyMapper: Mappers.BackupInformation\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.location,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.databaseName,\n    Parameters.graphName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { Locations } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  LocationGetResult,\n  LocationsListOptionalParams,\n  LocationsListResponse,\n  LocationsGetOptionalParams,\n  LocationsGetResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Locations operations. */\nexport class LocationsImpl implements Locations {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class Locations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List Cosmos DB locations and their properties\n   * @param options The options parameters.\n   */\n  public list(\n    options?: LocationsListOptionalParams\n  ): PagedAsyncIterableIterator<LocationGetResult> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: LocationsListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<LocationGetResult[]> {\n    let result: LocationsListResponse;\n    result = await this._list(options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    options?: LocationsListOptionalParams\n  ): AsyncIterableIterator<LocationGetResult> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List Cosmos DB locations and their properties\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: LocationsListOptionalParams\n  ): Promise<LocationsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Get the properties of an existing Cosmos DB location\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param options The options parameters.\n   */\n  get(\n    location: string,\n    options?: LocationsGetOptionalParams\n  ): Promise<LocationsGetResponse> {\n    return this.client.sendOperationRequest(\n      { location, options },\n      getOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LocationListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LocationGetResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { CassandraClusters } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  ClusterResource,\n  CassandraClustersListBySubscriptionOptionalParams,\n  CassandraClustersListBySubscriptionResponse,\n  CassandraClustersListByResourceGroupOptionalParams,\n  CassandraClustersListByResourceGroupResponse,\n  CassandraClustersGetOptionalParams,\n  CassandraClustersGetResponse,\n  CassandraClustersDeleteOptionalParams,\n  CassandraClustersCreateUpdateOptionalParams,\n  CassandraClustersCreateUpdateResponse,\n  CassandraClustersUpdateOptionalParams,\n  CassandraClustersUpdateResponse,\n  CommandPostBody,\n  CassandraClustersInvokeCommandOptionalParams,\n  CassandraClustersInvokeCommandResponse,\n  CassandraClustersDeallocateOptionalParams,\n  CassandraClustersStartOptionalParams,\n  CassandraClustersStatusOptionalParams,\n  CassandraClustersStatusResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing CassandraClusters operations. */\nexport class CassandraClustersImpl implements CassandraClusters {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class CassandraClusters class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all managed Cassandra clusters in this subscription.\n   * @param options The options parameters.\n   */\n  public listBySubscription(\n    options?: CassandraClustersListBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<ClusterResource> {\n    const iter = this.listBySubscriptionPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBySubscriptionPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listBySubscriptionPagingPage(\n    options?: CassandraClustersListBySubscriptionOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<ClusterResource[]> {\n    let result: CassandraClustersListBySubscriptionResponse;\n    result = await this._listBySubscription(options);\n    yield result.value || [];\n  }\n\n  private async *listBySubscriptionPagingAll(\n    options?: CassandraClustersListBySubscriptionOptionalParams\n  ): AsyncIterableIterator<ClusterResource> {\n    for await (const page of this.listBySubscriptionPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all managed Cassandra clusters in this resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: CassandraClustersListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<ClusterResource> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: CassandraClustersListByResourceGroupOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<ClusterResource[]> {\n    let result: CassandraClustersListByResourceGroupResponse;\n    result = await this._listByResourceGroup(resourceGroupName, options);\n    yield result.value || [];\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: CassandraClustersListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<ClusterResource> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all managed Cassandra clusters in this subscription.\n   * @param options The options parameters.\n   */\n  private _listBySubscription(\n    options?: CassandraClustersListBySubscriptionOptionalParams\n  ): Promise<CassandraClustersListBySubscriptionResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBySubscriptionOperationSpec\n    );\n  }\n\n  /**\n   * List all managed Cassandra clusters in this resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: CassandraClustersListByResourceGroupOptionalParams\n  ): Promise<CassandraClustersListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * Get the properties of a managed Cassandra cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraClustersGetOptionalParams\n  ): Promise<CassandraClustersGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, clusterName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Deletes a managed Cassandra cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraClustersDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, clusterName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a managed Cassandra cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraClustersDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      clusterName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Create or update a managed Cassandra cluster. When updating, you must specify all writable\n   * properties. To update only some properties, use PATCH.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param body The properties specifying the desired state of the managed Cassandra cluster.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdate(\n    resourceGroupName: string,\n    clusterName: string,\n    body: ClusterResource,\n    options?: CassandraClustersCreateUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<CassandraClustersCreateUpdateResponse>,\n      CassandraClustersCreateUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraClustersCreateUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, clusterName, body, options },\n      spec: createUpdateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraClustersCreateUpdateResponse,\n      OperationState<CassandraClustersCreateUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update a managed Cassandra cluster. When updating, you must specify all writable\n   * properties. To update only some properties, use PATCH.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param body The properties specifying the desired state of the managed Cassandra cluster.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateAndWait(\n    resourceGroupName: string,\n    clusterName: string,\n    body: ClusterResource,\n    options?: CassandraClustersCreateUpdateOptionalParams\n  ): Promise<CassandraClustersCreateUpdateResponse> {\n    const poller = await this.beginCreateUpdate(\n      resourceGroupName,\n      clusterName,\n      body,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates some of the properties of a managed Cassandra cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param body Parameters to provide for specifying the managed Cassandra cluster.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    clusterName: string,\n    body: ClusterResource,\n    options?: CassandraClustersUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<CassandraClustersUpdateResponse>,\n      CassandraClustersUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraClustersUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, clusterName, body, options },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraClustersUpdateResponse,\n      OperationState<CassandraClustersUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates some of the properties of a managed Cassandra cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param body Parameters to provide for specifying the managed Cassandra cluster.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    clusterName: string,\n    body: ClusterResource,\n    options?: CassandraClustersUpdateOptionalParams\n  ): Promise<CassandraClustersUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      clusterName,\n      body,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Invoke a command like nodetool for cassandra maintenance\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param body Specification which command to run where\n   * @param options The options parameters.\n   */\n  async beginInvokeCommand(\n    resourceGroupName: string,\n    clusterName: string,\n    body: CommandPostBody,\n    options?: CassandraClustersInvokeCommandOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<CassandraClustersInvokeCommandResponse>,\n      CassandraClustersInvokeCommandResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraClustersInvokeCommandResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, clusterName, body, options },\n      spec: invokeCommandOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraClustersInvokeCommandResponse,\n      OperationState<CassandraClustersInvokeCommandResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Invoke a command like nodetool for cassandra maintenance\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param body Specification which command to run where\n   * @param options The options parameters.\n   */\n  async beginInvokeCommandAndWait(\n    resourceGroupName: string,\n    clusterName: string,\n    body: CommandPostBody,\n    options?: CassandraClustersInvokeCommandOptionalParams\n  ): Promise<CassandraClustersInvokeCommandResponse> {\n    const poller = await this.beginInvokeCommand(\n      resourceGroupName,\n      clusterName,\n      body,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deallocate the Managed Cassandra Cluster and Associated Data Centers. Deallocation will deallocate\n   * the host virtual machine of this cluster, and reserved the data disk. This won't do anything on an\n   * already deallocated cluster. Use Start to restart the cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param options The options parameters.\n   */\n  async beginDeallocate(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraClustersDeallocateOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, clusterName, options },\n      spec: deallocateOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deallocate the Managed Cassandra Cluster and Associated Data Centers. Deallocation will deallocate\n   * the host virtual machine of this cluster, and reserved the data disk. This won't do anything on an\n   * already deallocated cluster. Use Start to restart the cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param options The options parameters.\n   */\n  async beginDeallocateAndWait(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraClustersDeallocateOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDeallocate(\n      resourceGroupName,\n      clusterName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Start the Managed Cassandra Cluster and Associated Data Centers. Start will start the host virtual\n   * machine of this cluster with reserved data disk. This won't do anything on an already running\n   * cluster. Use Deallocate to deallocate the cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param options The options parameters.\n   */\n  async beginStart(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraClustersStartOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, clusterName, options },\n      spec: startOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Start the Managed Cassandra Cluster and Associated Data Centers. Start will start the host virtual\n   * machine of this cluster with reserved data disk. This won't do anything on an already running\n   * cluster. Use Deallocate to deallocate the cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param options The options parameters.\n   */\n  async beginStartAndWait(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraClustersStartOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginStart(\n      resourceGroupName,\n      clusterName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the CPU, memory, and disk usage statistics for each Cassandra node in a cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param options The options parameters.\n   */\n  status(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraClustersStatusOptionalParams\n  ): Promise<CassandraClustersStatusResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, clusterName, options },\n      statusOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listBySubscriptionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/cassandraClusters\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListClusters\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListClusters\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ClusterResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ClusterResource\n    },\n    201: {\n      bodyMapper: Mappers.ClusterResource\n    },\n    202: {\n      bodyMapper: Mappers.ClusterResource\n    },\n    204: {\n      bodyMapper: Mappers.ClusterResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ClusterResource\n    },\n    201: {\n      bodyMapper: Mappers.ClusterResource\n    },\n    202: {\n      bodyMapper: Mappers.ClusterResource\n    },\n    204: {\n      bodyMapper: Mappers.ClusterResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst invokeCommandOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/invokeCommand\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CommandOutput\n    },\n    201: {\n      bodyMapper: Mappers.CommandOutput\n    },\n    202: {\n      bodyMapper: Mappers.CommandOutput\n    },\n    204: {\n      bodyMapper: Mappers.CommandOutput\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deallocateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/deallocate\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst startOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/start\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst statusOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CassandraClusterPublicStatus\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { CassandraDataCenters } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  DataCenterResource,\n  CassandraDataCentersListOptionalParams,\n  CassandraDataCentersListResponse,\n  CassandraDataCentersGetOptionalParams,\n  CassandraDataCentersGetResponse,\n  CassandraDataCentersDeleteOptionalParams,\n  CassandraDataCentersCreateUpdateOptionalParams,\n  CassandraDataCentersCreateUpdateResponse,\n  CassandraDataCentersUpdateOptionalParams,\n  CassandraDataCentersUpdateResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing CassandraDataCenters operations. */\nexport class CassandraDataCentersImpl implements CassandraDataCenters {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class CassandraDataCenters class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all data centers in a particular managed Cassandra cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraDataCentersListOptionalParams\n  ): PagedAsyncIterableIterator<DataCenterResource> {\n    const iter = this.listPagingAll(resourceGroupName, clusterName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          clusterName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraDataCentersListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<DataCenterResource[]> {\n    let result: CassandraDataCentersListResponse;\n    result = await this._list(resourceGroupName, clusterName, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraDataCentersListOptionalParams\n  ): AsyncIterableIterator<DataCenterResource> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      clusterName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all data centers in a particular managed Cassandra cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    clusterName: string,\n    options?: CassandraDataCentersListOptionalParams\n  ): Promise<CassandraDataCentersListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, clusterName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Get the properties of a managed Cassandra data center.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param dataCenterName Data center name in a managed Cassandra cluster.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    clusterName: string,\n    dataCenterName: string,\n    options?: CassandraDataCentersGetOptionalParams\n  ): Promise<CassandraDataCentersGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, clusterName, dataCenterName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Delete a managed Cassandra data center.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param dataCenterName Data center name in a managed Cassandra cluster.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    clusterName: string,\n    dataCenterName: string,\n    options?: CassandraDataCentersDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, clusterName, dataCenterName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete a managed Cassandra data center.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param dataCenterName Data center name in a managed Cassandra cluster.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    clusterName: string,\n    dataCenterName: string,\n    options?: CassandraDataCentersDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      clusterName,\n      dataCenterName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Create or update a managed Cassandra data center. When updating, overwrite all properties. To update\n   * only some properties, use PATCH.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param dataCenterName Data center name in a managed Cassandra cluster.\n   * @param body Parameters specifying the managed Cassandra data center.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdate(\n    resourceGroupName: string,\n    clusterName: string,\n    dataCenterName: string,\n    body: DataCenterResource,\n    options?: CassandraDataCentersCreateUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<CassandraDataCentersCreateUpdateResponse>,\n      CassandraDataCentersCreateUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraDataCentersCreateUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, clusterName, dataCenterName, body, options },\n      spec: createUpdateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraDataCentersCreateUpdateResponse,\n      OperationState<CassandraDataCentersCreateUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create or update a managed Cassandra data center. When updating, overwrite all properties. To update\n   * only some properties, use PATCH.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param dataCenterName Data center name in a managed Cassandra cluster.\n   * @param body Parameters specifying the managed Cassandra data center.\n   * @param options The options parameters.\n   */\n  async beginCreateUpdateAndWait(\n    resourceGroupName: string,\n    clusterName: string,\n    dataCenterName: string,\n    body: DataCenterResource,\n    options?: CassandraDataCentersCreateUpdateOptionalParams\n  ): Promise<CassandraDataCentersCreateUpdateResponse> {\n    const poller = await this.beginCreateUpdate(\n      resourceGroupName,\n      clusterName,\n      dataCenterName,\n      body,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Update some of the properties of a managed Cassandra data center.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param dataCenterName Data center name in a managed Cassandra cluster.\n   * @param body Parameters to provide for specifying the managed Cassandra data center.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    clusterName: string,\n    dataCenterName: string,\n    body: DataCenterResource,\n    options?: CassandraDataCentersUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<CassandraDataCentersUpdateResponse>,\n      CassandraDataCentersUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<CassandraDataCentersUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, clusterName, dataCenterName, body, options },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      CassandraDataCentersUpdateResponse,\n      OperationState<CassandraDataCentersUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update some of the properties of a managed Cassandra data center.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param clusterName Managed Cassandra cluster name.\n   * @param dataCenterName Data center name in a managed Cassandra cluster.\n   * @param body Parameters to provide for specifying the managed Cassandra data center.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    clusterName: string,\n    dataCenterName: string,\n    body: DataCenterResource,\n    options?: CassandraDataCentersUpdateOptionalParams\n  ): Promise<CassandraDataCentersUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      clusterName,\n      dataCenterName,\n      body,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListDataCenters\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DataCenterResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName,\n    Parameters.dataCenterName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName,\n    Parameters.dataCenterName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DataCenterResource\n    },\n    201: {\n      bodyMapper: Mappers.DataCenterResource\n    },\n    202: {\n      bodyMapper: Mappers.DataCenterResource\n    },\n    204: {\n      bodyMapper: Mappers.DataCenterResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.body2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName,\n    Parameters.dataCenterName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DataCenterResource\n    },\n    201: {\n      bodyMapper: Mappers.DataCenterResource\n    },\n    202: {\n      bodyMapper: Mappers.DataCenterResource\n    },\n    204: {\n      bodyMapper: Mappers.DataCenterResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.body2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.clusterName,\n    Parameters.dataCenterName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { NotebookWorkspaces } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  NotebookWorkspace,\n  NotebookWorkspacesListByDatabaseAccountOptionalParams,\n  NotebookWorkspacesListByDatabaseAccountResponse,\n  NotebookWorkspaceName,\n  NotebookWorkspacesGetOptionalParams,\n  NotebookWorkspacesGetResponse,\n  NotebookWorkspaceCreateUpdateParameters,\n  NotebookWorkspacesCreateOrUpdateOptionalParams,\n  NotebookWorkspacesCreateOrUpdateResponse,\n  NotebookWorkspacesDeleteOptionalParams,\n  NotebookWorkspacesListConnectionInfoOptionalParams,\n  NotebookWorkspacesListConnectionInfoResponse,\n  NotebookWorkspacesRegenerateAuthTokenOptionalParams,\n  NotebookWorkspacesStartOptionalParams\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing NotebookWorkspaces operations. */\nexport class NotebookWorkspacesImpl implements NotebookWorkspaces {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class NotebookWorkspaces class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets the notebook workspace resources of an existing Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listByDatabaseAccount(\n    resourceGroupName: string,\n    accountName: string,\n    options?: NotebookWorkspacesListByDatabaseAccountOptionalParams\n  ): PagedAsyncIterableIterator<NotebookWorkspace> {\n    const iter = this.listByDatabaseAccountPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByDatabaseAccountPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByDatabaseAccountPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: NotebookWorkspacesListByDatabaseAccountOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<NotebookWorkspace[]> {\n    let result: NotebookWorkspacesListByDatabaseAccountResponse;\n    result = await this._listByDatabaseAccount(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listByDatabaseAccountPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: NotebookWorkspacesListByDatabaseAccountOptionalParams\n  ): AsyncIterableIterator<NotebookWorkspace> {\n    for await (const page of this.listByDatabaseAccountPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the notebook workspace resources of an existing Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listByDatabaseAccount(\n    resourceGroupName: string,\n    accountName: string,\n    options?: NotebookWorkspacesListByDatabaseAccountOptionalParams\n  ): Promise<NotebookWorkspacesListByDatabaseAccountResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listByDatabaseAccountOperationSpec\n    );\n  }\n\n  /**\n   * Gets the notebook workspace for a Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param notebookWorkspaceName The name of the notebook workspace resource.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    accountName: string,\n    notebookWorkspaceName: NotebookWorkspaceName,\n    options?: NotebookWorkspacesGetOptionalParams\n  ): Promise<NotebookWorkspacesGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, notebookWorkspaceName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates the notebook workspace for a Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param notebookWorkspaceName The name of the notebook workspace resource.\n   * @param notebookCreateUpdateParameters The notebook workspace to create for the current database\n   *                                       account.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    accountName: string,\n    notebookWorkspaceName: NotebookWorkspaceName,\n    notebookCreateUpdateParameters: NotebookWorkspaceCreateUpdateParameters,\n    options?: NotebookWorkspacesCreateOrUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NotebookWorkspacesCreateOrUpdateResponse>,\n      NotebookWorkspacesCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<NotebookWorkspacesCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        notebookWorkspaceName,\n        notebookCreateUpdateParameters,\n        options\n      },\n      spec: createOrUpdateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      NotebookWorkspacesCreateOrUpdateResponse,\n      OperationState<NotebookWorkspacesCreateOrUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates the notebook workspace for a Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param notebookWorkspaceName The name of the notebook workspace resource.\n   * @param notebookCreateUpdateParameters The notebook workspace to create for the current database\n   *                                       account.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    notebookWorkspaceName: NotebookWorkspaceName,\n    notebookCreateUpdateParameters: NotebookWorkspaceCreateUpdateParameters,\n    options?: NotebookWorkspacesCreateOrUpdateOptionalParams\n  ): Promise<NotebookWorkspacesCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      accountName,\n      notebookWorkspaceName,\n      notebookCreateUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes the notebook workspace for a Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param notebookWorkspaceName The name of the notebook workspace resource.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    accountName: string,\n    notebookWorkspaceName: NotebookWorkspaceName,\n    options?: NotebookWorkspacesDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, notebookWorkspaceName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes the notebook workspace for a Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param notebookWorkspaceName The name of the notebook workspace resource.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    notebookWorkspaceName: NotebookWorkspaceName,\n    options?: NotebookWorkspacesDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      accountName,\n      notebookWorkspaceName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Retrieves the connection info for the notebook workspace\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param notebookWorkspaceName The name of the notebook workspace resource.\n   * @param options The options parameters.\n   */\n  listConnectionInfo(\n    resourceGroupName: string,\n    accountName: string,\n    notebookWorkspaceName: NotebookWorkspaceName,\n    options?: NotebookWorkspacesListConnectionInfoOptionalParams\n  ): Promise<NotebookWorkspacesListConnectionInfoResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, notebookWorkspaceName, options },\n      listConnectionInfoOperationSpec\n    );\n  }\n\n  /**\n   * Regenerates the auth token for the notebook workspace\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param notebookWorkspaceName The name of the notebook workspace resource.\n   * @param options The options parameters.\n   */\n  async beginRegenerateAuthToken(\n    resourceGroupName: string,\n    accountName: string,\n    notebookWorkspaceName: NotebookWorkspaceName,\n    options?: NotebookWorkspacesRegenerateAuthTokenOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, notebookWorkspaceName, options },\n      spec: regenerateAuthTokenOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Regenerates the auth token for the notebook workspace\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param notebookWorkspaceName The name of the notebook workspace resource.\n   * @param options The options parameters.\n   */\n  async beginRegenerateAuthTokenAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    notebookWorkspaceName: NotebookWorkspaceName,\n    options?: NotebookWorkspacesRegenerateAuthTokenOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginRegenerateAuthToken(\n      resourceGroupName,\n      accountName,\n      notebookWorkspaceName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Starts the notebook workspace\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param notebookWorkspaceName The name of the notebook workspace resource.\n   * @param options The options parameters.\n   */\n  async beginStart(\n    resourceGroupName: string,\n    accountName: string,\n    notebookWorkspaceName: NotebookWorkspaceName,\n    options?: NotebookWorkspacesStartOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, notebookWorkspaceName, options },\n      spec: startOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Starts the notebook workspace\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param notebookWorkspaceName The name of the notebook workspace resource.\n   * @param options The options parameters.\n   */\n  async beginStartAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    notebookWorkspaceName: NotebookWorkspaceName,\n    options?: NotebookWorkspacesStartOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginStart(\n      resourceGroupName,\n      accountName,\n      notebookWorkspaceName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listByDatabaseAccountOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NotebookWorkspaceListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NotebookWorkspace\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.notebookWorkspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NotebookWorkspace\n    },\n    201: {\n      bodyMapper: Mappers.NotebookWorkspace\n    },\n    202: {\n      bodyMapper: Mappers.NotebookWorkspace\n    },\n    204: {\n      bodyMapper: Mappers.NotebookWorkspace\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.notebookCreateUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.notebookWorkspaceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.notebookWorkspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listConnectionInfoOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}/listConnectionInfo\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NotebookWorkspaceConnectionInfoResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.notebookWorkspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst regenerateAuthTokenOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}/regenerateAuthToken\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.notebookWorkspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst startOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}/start\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.notebookWorkspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { PrivateEndpointConnections } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  PrivateEndpointConnection,\n  PrivateEndpointConnectionsListByDatabaseAccountOptionalParams,\n  PrivateEndpointConnectionsListByDatabaseAccountResponse,\n  PrivateEndpointConnectionsGetOptionalParams,\n  PrivateEndpointConnectionsGetResponse,\n  PrivateEndpointConnectionsCreateOrUpdateOptionalParams,\n  PrivateEndpointConnectionsCreateOrUpdateResponse,\n  PrivateEndpointConnectionsDeleteOptionalParams\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PrivateEndpointConnections operations. */\nexport class PrivateEndpointConnectionsImpl\n  implements PrivateEndpointConnections {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class PrivateEndpointConnections class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all private endpoint connections on a Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listByDatabaseAccount(\n    resourceGroupName: string,\n    accountName: string,\n    options?: PrivateEndpointConnectionsListByDatabaseAccountOptionalParams\n  ): PagedAsyncIterableIterator<PrivateEndpointConnection> {\n    const iter = this.listByDatabaseAccountPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByDatabaseAccountPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByDatabaseAccountPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: PrivateEndpointConnectionsListByDatabaseAccountOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PrivateEndpointConnection[]> {\n    let result: PrivateEndpointConnectionsListByDatabaseAccountResponse;\n    result = await this._listByDatabaseAccount(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listByDatabaseAccountPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: PrivateEndpointConnectionsListByDatabaseAccountOptionalParams\n  ): AsyncIterableIterator<PrivateEndpointConnection> {\n    for await (const page of this.listByDatabaseAccountPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all private endpoint connections on a Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listByDatabaseAccount(\n    resourceGroupName: string,\n    accountName: string,\n    options?: PrivateEndpointConnectionsListByDatabaseAccountOptionalParams\n  ): Promise<PrivateEndpointConnectionsListByDatabaseAccountResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listByDatabaseAccountOperationSpec\n    );\n  }\n\n  /**\n   * Gets a private endpoint connection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    accountName: string,\n    privateEndpointConnectionName: string,\n    options?: PrivateEndpointConnectionsGetOptionalParams\n  ): Promise<PrivateEndpointConnectionsGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        privateEndpointConnectionName,\n        options\n      },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Approve or reject a private endpoint connection with a given name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param parameters A private endpoint connection\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    accountName: string,\n    privateEndpointConnectionName: string,\n    parameters: PrivateEndpointConnection,\n    options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>,\n      PrivateEndpointConnectionsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        privateEndpointConnectionName,\n        parameters,\n        options\n      },\n      spec: createOrUpdateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      PrivateEndpointConnectionsCreateOrUpdateResponse,\n      OperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Approve or reject a private endpoint connection with a given name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param parameters A private endpoint connection\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    privateEndpointConnectionName: string,\n    parameters: PrivateEndpointConnection,\n    options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams\n  ): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      accountName,\n      privateEndpointConnectionName,\n      parameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a private endpoint connection with a given name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    accountName: string,\n    privateEndpointConnectionName: string,\n    options?: PrivateEndpointConnectionsDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        privateEndpointConnectionName,\n        options\n      },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a private endpoint connection with a given name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    privateEndpointConnectionName: string,\n    options?: PrivateEndpointConnectionsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      accountName,\n      privateEndpointConnectionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listByDatabaseAccountOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnectionListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.privateEndpointConnectionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    201: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    202: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    204: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.parameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.privateEndpointConnectionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.privateEndpointConnectionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { PrivateLinkResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  PrivateLinkResource,\n  PrivateLinkResourcesListByDatabaseAccountOptionalParams,\n  PrivateLinkResourcesListByDatabaseAccountResponse,\n  PrivateLinkResourcesGetOptionalParams,\n  PrivateLinkResourcesGetResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PrivateLinkResources operations. */\nexport class PrivateLinkResourcesImpl implements PrivateLinkResources {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class PrivateLinkResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets the private link resources that need to be created for a Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public listByDatabaseAccount(\n    resourceGroupName: string,\n    accountName: string,\n    options?: PrivateLinkResourcesListByDatabaseAccountOptionalParams\n  ): PagedAsyncIterableIterator<PrivateLinkResource> {\n    const iter = this.listByDatabaseAccountPagingAll(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByDatabaseAccountPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByDatabaseAccountPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: PrivateLinkResourcesListByDatabaseAccountOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PrivateLinkResource[]> {\n    let result: PrivateLinkResourcesListByDatabaseAccountResponse;\n    result = await this._listByDatabaseAccount(\n      resourceGroupName,\n      accountName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listByDatabaseAccountPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: PrivateLinkResourcesListByDatabaseAccountOptionalParams\n  ): AsyncIterableIterator<PrivateLinkResource> {\n    for await (const page of this.listByDatabaseAccountPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the private link resources that need to be created for a Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _listByDatabaseAccount(\n    resourceGroupName: string,\n    accountName: string,\n    options?: PrivateLinkResourcesListByDatabaseAccountOptionalParams\n  ): Promise<PrivateLinkResourcesListByDatabaseAccountResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listByDatabaseAccountOperationSpec\n    );\n  }\n\n  /**\n   * Gets the private link resources that need to be created for a Cosmos DB account.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param groupName The name of the private link resource.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    accountName: string,\n    groupName: string,\n    options?: PrivateLinkResourcesGetOptionalParams\n  ): Promise<PrivateLinkResourcesGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, groupName, options },\n      getOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listByDatabaseAccountOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateLinkResources\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateLinkResourceListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateLinkResources/{groupName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateLinkResource\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.groupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableDatabaseAccounts } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableDatabaseAccountGetResult,\n  RestorableDatabaseAccountsListByLocationOptionalParams,\n  RestorableDatabaseAccountsListByLocationResponse,\n  RestorableDatabaseAccountsListOptionalParams,\n  RestorableDatabaseAccountsListResponse,\n  RestorableDatabaseAccountsGetByLocationOptionalParams,\n  RestorableDatabaseAccountsGetByLocationResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableDatabaseAccounts operations. */\nexport class RestorableDatabaseAccountsImpl\n  implements RestorableDatabaseAccounts {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableDatabaseAccounts class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the restorable Azure Cosmos DB database accounts available under the subscription and in a\n   * region.  This call requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read'\n   * permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param options The options parameters.\n   */\n  public listByLocation(\n    location: string,\n    options?: RestorableDatabaseAccountsListByLocationOptionalParams\n  ): PagedAsyncIterableIterator<RestorableDatabaseAccountGetResult> {\n    const iter = this.listByLocationPagingAll(location, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByLocationPagingPage(location, options, settings);\n      }\n    };\n  }\n\n  private async *listByLocationPagingPage(\n    location: string,\n    options?: RestorableDatabaseAccountsListByLocationOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableDatabaseAccountGetResult[]> {\n    let result: RestorableDatabaseAccountsListByLocationResponse;\n    result = await this._listByLocation(location, options);\n    yield result.value || [];\n  }\n\n  private async *listByLocationPagingAll(\n    location: string,\n    options?: RestorableDatabaseAccountsListByLocationOptionalParams\n  ): AsyncIterableIterator<RestorableDatabaseAccountGetResult> {\n    for await (const page of this.listByLocationPagingPage(location, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This\n   * call requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read' permission.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: RestorableDatabaseAccountsListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableDatabaseAccountGetResult> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: RestorableDatabaseAccountsListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableDatabaseAccountGetResult[]> {\n    let result: RestorableDatabaseAccountsListResponse;\n    result = await this._list(options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    options?: RestorableDatabaseAccountsListOptionalParams\n  ): AsyncIterableIterator<RestorableDatabaseAccountGetResult> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the restorable Azure Cosmos DB database accounts available under the subscription and in a\n   * region.  This call requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read'\n   * permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param options The options parameters.\n   */\n  private _listByLocation(\n    location: string,\n    options?: RestorableDatabaseAccountsListByLocationOptionalParams\n  ): Promise<RestorableDatabaseAccountsListByLocationResponse> {\n    return this.client.sendOperationRequest(\n      { location, options },\n      listByLocationOperationSpec\n    );\n  }\n\n  /**\n   * Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This\n   * call requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read' permission.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: RestorableDatabaseAccountsListOptionalParams\n  ): Promise<RestorableDatabaseAccountsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Retrieves the properties of an existing Azure Cosmos DB restorable database account.  This call\n   * requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read/*' permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  getByLocation(\n    location: string,\n    instanceId: string,\n    options?: RestorableDatabaseAccountsGetByLocationOptionalParams\n  ): Promise<RestorableDatabaseAccountsGetByLocationResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      getByLocationOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listByLocationOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableDatabaseAccountsListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/restorableDatabaseAccounts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableDatabaseAccountsListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getByLocationOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableDatabaseAccountGetResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableSqlDatabases } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableSqlDatabaseGetResult,\n  RestorableSqlDatabasesListOptionalParams,\n  RestorableSqlDatabasesListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableSqlDatabases operations. */\nexport class RestorableSqlDatabasesImpl implements RestorableSqlDatabases {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableSqlDatabases class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB SQL databases under the\n   * restorable account.  This helps in scenario where database was accidentally deleted to get the\n   * deletion time.  This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlDatabasesListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableSqlDatabaseGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlDatabasesListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableSqlDatabaseGetResult[]> {\n    let result: RestorableSqlDatabasesListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlDatabasesListOptionalParams\n  ): AsyncIterableIterator<RestorableSqlDatabaseGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB SQL databases under the\n   * restorable account.  This helps in scenario where database was accidentally deleted to get the\n   * deletion time.  This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlDatabasesListOptionalParams\n  ): Promise<RestorableSqlDatabasesListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlDatabases\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableSqlDatabasesListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableSqlContainers } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableSqlContainerGetResult,\n  RestorableSqlContainersListOptionalParams,\n  RestorableSqlContainersListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableSqlContainers operations. */\nexport class RestorableSqlContainersImpl implements RestorableSqlContainers {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableSqlContainers class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB SQL containers under a specific\n   * database.  This helps in scenario where container was accidentally deleted.  This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlContainersListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableSqlContainerGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlContainersListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableSqlContainerGetResult[]> {\n    let result: RestorableSqlContainersListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlContainersListOptionalParams\n  ): AsyncIterableIterator<RestorableSqlContainerGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB SQL containers under a specific\n   * database.  This helps in scenario where container was accidentally deleted.  This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlContainersListOptionalParams\n  ): Promise<RestorableSqlContainersListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlContainers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableSqlContainersListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.restorableSqlDatabaseRid,\n    Parameters.startTime,\n    Parameters.endTime\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableSqlResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableSqlResourcesGetResult,\n  RestorableSqlResourcesListOptionalParams,\n  RestorableSqlResourcesListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableSqlResources operations. */\nexport class RestorableSqlResourcesImpl implements RestorableSqlResources {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableSqlResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Return a list of database and container combo that exist on the account at the given timestamp and\n   * location. This helps in scenarios to validate what resources exist at given timestamp and location.\n   * This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlResourcesListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableSqlResourcesGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlResourcesListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableSqlResourcesGetResult[]> {\n    let result: RestorableSqlResourcesListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlResourcesListOptionalParams\n  ): AsyncIterableIterator<RestorableSqlResourcesGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Return a list of database and container combo that exist on the account at the given timestamp and\n   * location. This helps in scenarios to validate what resources exist at given timestamp and location.\n   * This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableSqlResourcesListOptionalParams\n  ): Promise<RestorableSqlResourcesListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlResources\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableSqlResourcesListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.restoreLocation,\n    Parameters.restoreTimestampInUtc\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableMongodbDatabases } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableMongodbDatabaseGetResult,\n  RestorableMongodbDatabasesListOptionalParams,\n  RestorableMongodbDatabasesListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableMongodbDatabases operations. */\nexport class RestorableMongodbDatabasesImpl\n  implements RestorableMongodbDatabases {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableMongodbDatabases class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB databases under the\n   * restorable account.  This helps in scenario where database was accidentally deleted to get the\n   * deletion time.  This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbDatabasesListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableMongodbDatabaseGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbDatabasesListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableMongodbDatabaseGetResult[]> {\n    let result: RestorableMongodbDatabasesListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbDatabasesListOptionalParams\n  ): AsyncIterableIterator<RestorableMongodbDatabaseGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB databases under the\n   * restorable account.  This helps in scenario where database was accidentally deleted to get the\n   * deletion time.  This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbDatabasesListOptionalParams\n  ): Promise<RestorableMongodbDatabasesListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableMongodbDatabases\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableMongodbDatabasesListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableMongodbCollections } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableMongodbCollectionGetResult,\n  RestorableMongodbCollectionsListOptionalParams,\n  RestorableMongodbCollectionsListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableMongodbCollections operations. */\nexport class RestorableMongodbCollectionsImpl\n  implements RestorableMongodbCollections {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableMongodbCollections class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB collections under a\n   * specific database.  This helps in scenario where container was accidentally deleted.  This API\n   * requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbCollectionsListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableMongodbCollectionGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbCollectionsListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableMongodbCollectionGetResult[]> {\n    let result: RestorableMongodbCollectionsListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbCollectionsListOptionalParams\n  ): AsyncIterableIterator<RestorableMongodbCollectionGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB collections under a\n   * specific database.  This helps in scenario where container was accidentally deleted.  This API\n   * requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbCollectionsListOptionalParams\n  ): Promise<RestorableMongodbCollectionsListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableMongodbCollections\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableMongodbCollectionsListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.startTime,\n    Parameters.endTime,\n    Parameters.restorableMongodbDatabaseRid\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableMongodbResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableMongodbResourcesGetResult,\n  RestorableMongodbResourcesListOptionalParams,\n  RestorableMongodbResourcesListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableMongodbResources operations. */\nexport class RestorableMongodbResourcesImpl\n  implements RestorableMongodbResources {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableMongodbResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Return a list of database and collection combo that exist on the account at the given timestamp and\n   * location. This helps in scenarios to validate what resources exist at given timestamp and location.\n   * This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbResourcesListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableMongodbResourcesGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbResourcesListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableMongodbResourcesGetResult[]> {\n    let result: RestorableMongodbResourcesListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbResourcesListOptionalParams\n  ): AsyncIterableIterator<RestorableMongodbResourcesGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Return a list of database and collection combo that exist on the account at the given timestamp and\n   * location. This helps in scenarios to validate what resources exist at given timestamp and location.\n   * This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableMongodbResourcesListOptionalParams\n  ): Promise<RestorableMongodbResourcesListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableMongodbResources\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableMongodbResourcesListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.restoreLocation,\n    Parameters.restoreTimestampInUtc\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableGremlinDatabases } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableGremlinDatabaseGetResult,\n  RestorableGremlinDatabasesListOptionalParams,\n  RestorableGremlinDatabasesListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableGremlinDatabases operations. */\nexport class RestorableGremlinDatabasesImpl\n  implements RestorableGremlinDatabases {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableGremlinDatabases class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB Gremlin databases under the\n   * restorable account. This helps in scenario where database was accidentally deleted to get the\n   * deletion time. This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinDatabasesListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableGremlinDatabaseGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinDatabasesListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableGremlinDatabaseGetResult[]> {\n    let result: RestorableGremlinDatabasesListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinDatabasesListOptionalParams\n  ): AsyncIterableIterator<RestorableGremlinDatabaseGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB Gremlin databases under the\n   * restorable account. This helps in scenario where database was accidentally deleted to get the\n   * deletion time. This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinDatabasesListOptionalParams\n  ): Promise<RestorableGremlinDatabasesListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableGremlinDatabases\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableGremlinDatabasesListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableGremlinGraphs } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableGremlinGraphGetResult,\n  RestorableGremlinGraphsListOptionalParams,\n  RestorableGremlinGraphsListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableGremlinGraphs operations. */\nexport class RestorableGremlinGraphsImpl implements RestorableGremlinGraphs {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableGremlinGraphs class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB Gremlin graphs under a specific\n   * database. This helps in scenario where container was accidentally deleted. This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinGraphsListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableGremlinGraphGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinGraphsListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableGremlinGraphGetResult[]> {\n    let result: RestorableGremlinGraphsListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinGraphsListOptionalParams\n  ): AsyncIterableIterator<RestorableGremlinGraphGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB Gremlin graphs under a specific\n   * database. This helps in scenario where container was accidentally deleted. This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinGraphsListOptionalParams\n  ): Promise<RestorableGremlinGraphsListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableGraphs\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableGremlinGraphsListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.startTime,\n    Parameters.endTime,\n    Parameters.restorableGremlinDatabaseRid\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableGremlinResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableGremlinResourcesGetResult,\n  RestorableGremlinResourcesListOptionalParams,\n  RestorableGremlinResourcesListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableGremlinResources operations. */\nexport class RestorableGremlinResourcesImpl\n  implements RestorableGremlinResources {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableGremlinResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Return a list of gremlin database and graphs combo that exist on the account at the given timestamp\n   * and location. This helps in scenarios to validate what resources exist at given timestamp and\n   * location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read'\n   * permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinResourcesListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableGremlinResourcesGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinResourcesListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableGremlinResourcesGetResult[]> {\n    let result: RestorableGremlinResourcesListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinResourcesListOptionalParams\n  ): AsyncIterableIterator<RestorableGremlinResourcesGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Return a list of gremlin database and graphs combo that exist on the account at the given timestamp\n   * and location. This helps in scenarios to validate what resources exist at given timestamp and\n   * location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read'\n   * permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableGremlinResourcesListOptionalParams\n  ): Promise<RestorableGremlinResourcesListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableGremlinResources\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableGremlinResourcesListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.restoreLocation,\n    Parameters.restoreTimestampInUtc\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableTables } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableTableGetResult,\n  RestorableTablesListOptionalParams,\n  RestorableTablesListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableTables operations. */\nexport class RestorableTablesImpl implements RestorableTables {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableTables class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB Tables. This helps in scenario\n   * where table was accidentally deleted. This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableTablesListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableTableGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableTablesListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableTableGetResult[]> {\n    let result: RestorableTablesListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableTablesListOptionalParams\n  ): AsyncIterableIterator<RestorableTableGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Show the event feed of all mutations done on all the Azure Cosmos DB Tables. This helps in scenario\n   * where table was accidentally deleted. This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableTablesListOptionalParams\n  ): Promise<RestorableTablesListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableTables\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableTablesListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.startTime,\n    Parameters.endTime\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { RestorableTableResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  RestorableTableResourcesGetResult,\n  RestorableTableResourcesListOptionalParams,\n  RestorableTableResourcesListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing RestorableTableResources operations. */\nexport class RestorableTableResourcesImpl implements RestorableTableResources {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class RestorableTableResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Return a list of tables that exist on the account at the given timestamp and location. This helps in\n   * scenarios to validate what resources exist at given timestamp and location. This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  public list(\n    location: string,\n    instanceId: string,\n    options?: RestorableTableResourcesListOptionalParams\n  ): PagedAsyncIterableIterator<RestorableTableResourcesGetResult> {\n    const iter = this.listPagingAll(location, instanceId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(location, instanceId, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    location: string,\n    instanceId: string,\n    options?: RestorableTableResourcesListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<RestorableTableResourcesGetResult[]> {\n    let result: RestorableTableResourcesListResponse;\n    result = await this._list(location, instanceId, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    location: string,\n    instanceId: string,\n    options?: RestorableTableResourcesListOptionalParams\n  ): AsyncIterableIterator<RestorableTableResourcesGetResult> {\n    for await (const page of this.listPagingPage(\n      location,\n      instanceId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Return a list of tables that exist on the account at the given timestamp and location. This helps in\n   * scenarios to validate what resources exist at given timestamp and location. This API requires\n   * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\n   * @param location Cosmos DB region, with spaces between words and each word capitalized.\n   * @param instanceId The instanceId GUID of a restorable database account.\n   * @param options The options parameters.\n   */\n  private _list(\n    location: string,\n    instanceId: string,\n    options?: RestorableTableResourcesListOptionalParams\n  ): Promise<RestorableTableResourcesListResponse> {\n    return this.client.sendOperationRequest(\n      { location, instanceId, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableTableResources\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RestorableTableResourcesListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.restoreLocation,\n    Parameters.restoreTimestampInUtc\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location1,\n    Parameters.instanceId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { Service } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { CosmosDBManagementClient } from \"../cosmosDBManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  ServiceResource,\n  ServiceListOptionalParams,\n  ServiceListResponse,\n  ServiceResourceCreateUpdateParameters,\n  ServiceCreateOptionalParams,\n  ServiceCreateResponse,\n  ServiceGetOptionalParams,\n  ServiceGetResponse,\n  ServiceDeleteOptionalParams\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Service operations. */\nexport class ServiceImpl implements Service {\n  private readonly client: CosmosDBManagementClient;\n\n  /**\n   * Initialize a new instance of the class Service class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CosmosDBManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets the status of service.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    accountName: string,\n    options?: ServiceListOptionalParams\n  ): PagedAsyncIterableIterator<ServiceResource> {\n    const iter = this.listPagingAll(resourceGroupName, accountName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: ServiceListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<ServiceResource[]> {\n    let result: ServiceListResponse;\n    result = await this._list(resourceGroupName, accountName, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: ServiceListOptionalParams\n  ): AsyncIterableIterator<ServiceResource> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      accountName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the status of service.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    accountName: string,\n    options?: ServiceListOptionalParams\n  ): Promise<ServiceListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Creates a service.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param serviceName Cosmos DB service name.\n   * @param createUpdateParameters The Service resource parameters.\n   * @param options The options parameters.\n   */\n  async beginCreate(\n    resourceGroupName: string,\n    accountName: string,\n    serviceName: string,\n    createUpdateParameters: ServiceResourceCreateUpdateParameters,\n    options?: ServiceCreateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ServiceCreateResponse>,\n      ServiceCreateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<ServiceCreateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        serviceName,\n        createUpdateParameters,\n        options\n      },\n      spec: createOperationSpec\n    });\n    const poller = await createHttpPoller<\n      ServiceCreateResponse,\n      OperationState<ServiceCreateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a service.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param serviceName Cosmos DB service name.\n   * @param createUpdateParameters The Service resource parameters.\n   * @param options The options parameters.\n   */\n  async beginCreateAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    serviceName: string,\n    createUpdateParameters: ServiceResourceCreateUpdateParameters,\n    options?: ServiceCreateOptionalParams\n  ): Promise<ServiceCreateResponse> {\n    const poller = await this.beginCreate(\n      resourceGroupName,\n      accountName,\n      serviceName,\n      createUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the status of service.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param serviceName Cosmos DB service name.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    accountName: string,\n    serviceName: string,\n    options?: ServiceGetOptionalParams\n  ): Promise<ServiceGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, serviceName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Deletes service with the given serviceName.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param serviceName Cosmos DB service name.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    accountName: string,\n    serviceName: string,\n    options?: ServiceDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, serviceName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes service with the given serviceName.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName Cosmos DB database account name.\n   * @param serviceName Cosmos DB service name.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    serviceName: string,\n    options?: ServiceDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      accountName,\n      serviceName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/services\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ServiceResourceListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/services/{serviceName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ServiceResource\n    },\n    201: {\n      bodyMapper: Mappers.ServiceResource\n    },\n    202: {\n      bodyMapper: Mappers.ServiceResource\n    },\n    204: {\n      bodyMapper: Mappers.ServiceResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.createUpdateParameters1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.serviceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/services/{serviceName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ServiceResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.serviceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/services/{serviceName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.serviceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport {\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest\n} from \"@azure/core-rest-pipeline\";\nimport * as coreAuth from \"@azure/core-auth\";\nimport {\n  DatabaseAccountsImpl,\n  OperationsImpl,\n  DatabaseImpl,\n  CollectionImpl,\n  CollectionRegionImpl,\n  DatabaseAccountRegionImpl,\n  PercentileSourceTargetImpl,\n  PercentileTargetImpl,\n  PercentileImpl,\n  CollectionPartitionRegionImpl,\n  CollectionPartitionImpl,\n  PartitionKeyRangeIdImpl,\n  PartitionKeyRangeIdRegionImpl,\n  SqlResourcesImpl,\n  MongoDBResourcesImpl,\n  TableResourcesImpl,\n  CassandraResourcesImpl,\n  GremlinResourcesImpl,\n  LocationsImpl,\n  CassandraClustersImpl,\n  CassandraDataCentersImpl,\n  NotebookWorkspacesImpl,\n  PrivateEndpointConnectionsImpl,\n  PrivateLinkResourcesImpl,\n  RestorableDatabaseAccountsImpl,\n  RestorableSqlDatabasesImpl,\n  RestorableSqlContainersImpl,\n  RestorableSqlResourcesImpl,\n  RestorableMongodbDatabasesImpl,\n  RestorableMongodbCollectionsImpl,\n  RestorableMongodbResourcesImpl,\n  RestorableGremlinDatabasesImpl,\n  RestorableGremlinGraphsImpl,\n  RestorableGremlinResourcesImpl,\n  RestorableTablesImpl,\n  RestorableTableResourcesImpl,\n  ServiceImpl\n} from \"./operations\";\nimport {\n  DatabaseAccounts,\n  Operations,\n  Database,\n  Collection,\n  CollectionRegion,\n  DatabaseAccountRegion,\n  PercentileSourceTarget,\n  PercentileTarget,\n  Percentile,\n  CollectionPartitionRegion,\n  CollectionPartition,\n  PartitionKeyRangeId,\n  PartitionKeyRangeIdRegion,\n  SqlResources,\n  MongoDBResources,\n  TableResources,\n  CassandraResources,\n  GremlinResources,\n  Locations,\n  CassandraClusters,\n  CassandraDataCenters,\n  NotebookWorkspaces,\n  PrivateEndpointConnections,\n  PrivateLinkResources,\n  RestorableDatabaseAccounts,\n  RestorableSqlDatabases,\n  RestorableSqlContainers,\n  RestorableSqlResources,\n  RestorableMongodbDatabases,\n  RestorableMongodbCollections,\n  RestorableMongodbResources,\n  RestorableGremlinDatabases,\n  RestorableGremlinGraphs,\n  RestorableGremlinResources,\n  RestorableTables,\n  RestorableTableResources,\n  Service\n} from \"./operationsInterfaces\";\nimport { CosmosDBManagementClientOptionalParams } from \"./models\";\n\nexport class CosmosDBManagementClient extends coreClient.ServiceClient {\n  $host: string;\n  subscriptionId: string;\n  apiVersion: string;\n\n  /**\n   * Initializes a new instance of the CosmosDBManagementClient class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param subscriptionId The ID of the target subscription.\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    subscriptionId: string,\n    options?: CosmosDBManagementClientOptionalParams\n  ) {\n    if (credentials === undefined) {\n      throw new Error(\"'credentials' cannot be null\");\n    }\n    if (subscriptionId === undefined) {\n      throw new Error(\"'subscriptionId' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CosmosDBManagementClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n      credential: credentials\n    };\n\n    const packageDetails = `azsdk-js-arm-cosmosdb/15.3.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint:\n        options.endpoint ?? options.baseUri ?? \"https://management.azure.com\"\n    };\n    super(optionsWithDefaults);\n\n    let bearerTokenAuthenticationPolicyFound: boolean = false;\n    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {\n      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();\n      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(\n        (pipelinePolicy) =>\n          pipelinePolicy.name ===\n          coreRestPipeline.bearerTokenAuthenticationPolicyName\n      );\n    }\n    if (\n      !options ||\n      !options.pipeline ||\n      options.pipeline.getOrderedPolicies().length == 0 ||\n      !bearerTokenAuthenticationPolicyFound\n    ) {\n      this.pipeline.removePolicy({\n        name: coreRestPipeline.bearerTokenAuthenticationPolicyName\n      });\n      this.pipeline.addPolicy(\n        coreRestPipeline.bearerTokenAuthenticationPolicy({\n          credential: credentials,\n          scopes:\n            optionsWithDefaults.credentialScopes ??\n            `${optionsWithDefaults.endpoint}/.default`,\n          challengeCallbacks: {\n            authorizeRequestOnChallenge:\n              coreClient.authorizeRequestOnClaimChallenge\n          }\n        })\n      );\n    }\n    // Parameter assignments\n    this.subscriptionId = subscriptionId;\n\n    // Assigning values to Constant parameters\n    this.$host = options.$host || \"https://management.azure.com\";\n    this.apiVersion = options.apiVersion || \"2022-11-15\";\n    this.databaseAccounts = new DatabaseAccountsImpl(this);\n    this.operations = new OperationsImpl(this);\n    this.database = new DatabaseImpl(this);\n    this.collection = new CollectionImpl(this);\n    this.collectionRegion = new CollectionRegionImpl(this);\n    this.databaseAccountRegion = new DatabaseAccountRegionImpl(this);\n    this.percentileSourceTarget = new PercentileSourceTargetImpl(this);\n    this.percentileTarget = new PercentileTargetImpl(this);\n    this.percentile = new PercentileImpl(this);\n    this.collectionPartitionRegion = new CollectionPartitionRegionImpl(this);\n    this.collectionPartition = new CollectionPartitionImpl(this);\n    this.partitionKeyRangeId = new PartitionKeyRangeIdImpl(this);\n    this.partitionKeyRangeIdRegion = new PartitionKeyRangeIdRegionImpl(this);\n    this.sqlResources = new SqlResourcesImpl(this);\n    this.mongoDBResources = new MongoDBResourcesImpl(this);\n    this.tableResources = new TableResourcesImpl(this);\n    this.cassandraResources = new CassandraResourcesImpl(this);\n    this.gremlinResources = new GremlinResourcesImpl(this);\n    this.locations = new LocationsImpl(this);\n    this.cassandraClusters = new CassandraClustersImpl(this);\n    this.cassandraDataCenters = new CassandraDataCentersImpl(this);\n    this.notebookWorkspaces = new NotebookWorkspacesImpl(this);\n    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);\n    this.privateLinkResources = new PrivateLinkResourcesImpl(this);\n    this.restorableDatabaseAccounts = new RestorableDatabaseAccountsImpl(this);\n    this.restorableSqlDatabases = new RestorableSqlDatabasesImpl(this);\n    this.restorableSqlContainers = new RestorableSqlContainersImpl(this);\n    this.restorableSqlResources = new RestorableSqlResourcesImpl(this);\n    this.restorableMongodbDatabases = new RestorableMongodbDatabasesImpl(this);\n    this.restorableMongodbCollections = new RestorableMongodbCollectionsImpl(\n      this\n    );\n    this.restorableMongodbResources = new RestorableMongodbResourcesImpl(this);\n    this.restorableGremlinDatabases = new RestorableGremlinDatabasesImpl(this);\n    this.restorableGremlinGraphs = new RestorableGremlinGraphsImpl(this);\n    this.restorableGremlinResources = new RestorableGremlinResourcesImpl(this);\n    this.restorableTables = new RestorableTablesImpl(this);\n    this.restorableTableResources = new RestorableTableResourcesImpl(this);\n    this.service = new ServiceImpl(this);\n    this.addCustomApiVersionPolicy(options.apiVersion);\n  }\n\n  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */\n  private addCustomApiVersionPolicy(apiVersion?: string) {\n    if (!apiVersion) {\n      return;\n    }\n    const apiVersionPolicy = {\n      name: \"CustomApiVersionPolicy\",\n      async sendRequest(\n        request: PipelineRequest,\n        next: SendRequest\n      ): Promise<PipelineResponse> {\n        const param = request.url.split(\"?\");\n        if (param.length > 1) {\n          const newParams = param[1].split(\"&\").map((item) => {\n            if (item.indexOf(\"api-version\") > -1) {\n              return \"api-version=\" + apiVersion;\n            } else {\n              return item;\n            }\n          });\n          request.url = param[0] + \"?\" + newParams.join(\"&\");\n        }\n        return next(request);\n      }\n    };\n    this.pipeline.addPolicy(apiVersionPolicy);\n  }\n\n  databaseAccounts: DatabaseAccounts;\n  operations: Operations;\n  database: Database;\n  collection: Collection;\n  collectionRegion: CollectionRegion;\n  databaseAccountRegion: DatabaseAccountRegion;\n  percentileSourceTarget: PercentileSourceTarget;\n  percentileTarget: PercentileTarget;\n  percentile: Percentile;\n  collectionPartitionRegion: CollectionPartitionRegion;\n  collectionPartition: CollectionPartition;\n  partitionKeyRangeId: PartitionKeyRangeId;\n  partitionKeyRangeIdRegion: PartitionKeyRangeIdRegion;\n  sqlResources: SqlResources;\n  mongoDBResources: MongoDBResources;\n  tableResources: TableResources;\n  cassandraResources: CassandraResources;\n  gremlinResources: GremlinResources;\n  locations: Locations;\n  cassandraClusters: CassandraClusters;\n  cassandraDataCenters: CassandraDataCenters;\n  notebookWorkspaces: NotebookWorkspaces;\n  privateEndpointConnections: PrivateEndpointConnections;\n  privateLinkResources: PrivateLinkResources;\n  restorableDatabaseAccounts: RestorableDatabaseAccounts;\n  restorableSqlDatabases: RestorableSqlDatabases;\n  restorableSqlContainers: RestorableSqlContainers;\n  restorableSqlResources: RestorableSqlResources;\n  restorableMongodbDatabases: RestorableMongodbDatabases;\n  restorableMongodbCollections: RestorableMongodbCollections;\n  restorableMongodbResources: RestorableMongodbResources;\n  restorableGremlinDatabases: RestorableGremlinDatabases;\n  restorableGremlinGraphs: RestorableGremlinGraphs;\n  restorableGremlinResources: RestorableGremlinResources;\n  restorableTables: RestorableTables;\n  restorableTableResources: RestorableTableResources;\n  service: Service;\n}\n"],"names":["KnownDatabaseAccountKind","KnownConnectorOffer","KnownPublicNetworkAccess","KnownServerVersion","KnownAnalyticalStorageSchemaType","KnownCreateMode","KnownRestoreMode","KnownBackupPolicyType","KnownBackupPolicyMigrationStatus","KnownMinimalTlsVersion","KnownCreatedByType","KnownKeyKind","KnownUnitType","KnownPrimaryAggregationType","KnownIndexingMode","KnownDataType","KnownIndexKind","KnownCompositePathSortOrder","KnownSpatialType","KnownPartitionKind","KnownConflictResolutionMode","KnownTriggerType","KnownTriggerOperation","KnownBackupStorageRedundancy","KnownManagedCassandraProvisioningState","KnownAuthenticationMethod","KnownManagedCassandraResourceIdentityType","KnownConnectionState","KnownNodeState","KnownNotebookWorkspaceName","KnownApiType","KnownOperationType","KnownServiceSize","KnownServiceType","KnownServiceStatus","KnownNodeStatus","DatabaseAccountUpdateParametersMapper","DatabaseAccountCreateUpdateParametersMapper","FailoverPoliciesMapper","RegionForOnlineOfflineMapper","DatabaseAccountRegenerateKeyParametersMapper","SqlDatabaseCreateUpdateParametersMapper","ThroughputSettingsUpdateParametersMapper","SqlContainerCreateUpdateParametersMapper","ClientEncryptionKeyCreateUpdateParametersMapper","SqlStoredProcedureCreateUpdateParametersMapper","SqlUserDefinedFunctionCreateUpdateParametersMapper","SqlTriggerCreateUpdateParametersMapper","SqlRoleDefinitionCreateUpdateParametersMapper","SqlRoleAssignmentCreateUpdateParametersMapper","ContinuousBackupRestoreLocationMapper","MongoDBDatabaseCreateUpdateParametersMapper","MongoDBCollectionCreateUpdateParametersMapper","MongoRoleDefinitionCreateUpdateParametersMapper","MongoUserDefinitionCreateUpdateParametersMapper","TableCreateUpdateParametersMapper","CassandraKeyspaceCreateUpdateParametersMapper","CassandraTableCreateUpdateParametersMapper","GremlinDatabaseCreateUpdateParametersMapper","GremlinGraphCreateUpdateParametersMapper","ClusterResourceMapper","CommandPostBodyMapper","DataCenterResourceMapper","NotebookWorkspaceCreateUpdateParametersMapper","PrivateEndpointConnectionMapper","ServiceResourceCreateUpdateParametersMapper","__rest","__await","__asyncValues","__asyncDelegator","getOperationSpec","__awaiter","updateOperationSpec","createHttpPoller","createOrUpdateOperationSpec","deleteOperationSpec","listOperationSpec","listByResourceGroupOperationSpec","listMetricsOperationSpec","listUsagesOperationSpec","listMetricDefinitionsOperationSpec","serializer","coreClient","Mappers.DatabaseAccountGetResults","Parameters.apiVersion","Parameters.$host","Parameters.subscriptionId","Parameters.resourceGroupName","Parameters.accountName","Parameters.accept","Parameters.updateParameters","Parameters.contentType","Parameters.createUpdateParameters","Mappers.DatabaseAccountsDeleteHeaders","Mappers.DatabaseAccountsFailoverPriorityChangeHeaders","Parameters.failoverParameters","Mappers.DatabaseAccountsListResult","Mappers.DatabaseAccountListKeysResult","Mappers.DatabaseAccountListConnectionStringsResult","Mappers.ErrorResponse","Parameters.regionParameterForOffline","Parameters.regionParameterForOnline","Mappers.DatabaseAccountListReadOnlyKeysResult","Parameters.keyToRegenerate","Mappers.MetricListResult","Parameters.filter","Mappers.UsagesResult","Parameters.filter1","Mappers.MetricDefinitionsListResult","Mappers.OperationListResult","Parameters.nextLink","Parameters.databaseRid","Parameters.collectionRid","Parameters.region","Mappers.PercentileMetricListResult","Parameters.sourceRegion","Parameters.targetRegion","Mappers.PartitionMetricListResult","Mappers.PartitionUsagesResult","Parameters.partitionKeyRangeId","retrieveContinuousBackupInformationOperationSpec","Mappers.SqlDatabaseListResult","Mappers.SqlDatabaseGetResults","Parameters.databaseName","Parameters.createUpdateSqlDatabaseParameters","Mappers.SqlResourcesDeleteSqlDatabaseHeaders","Mappers.ThroughputSettingsGetResults","Parameters.updateThroughputParameters","Mappers.CloudError","Mappers.SqlContainerListResult","Mappers.SqlContainerGetResults","Parameters.containerName","Parameters.createUpdateSqlContainerParameters","Mappers.SqlResourcesDeleteSqlContainerHeaders","Mappers.ClientEncryptionKeysListResult","Mappers.ClientEncryptionKeyGetResults","Parameters.clientEncryptionKeyName","Parameters.createUpdateClientEncryptionKeyParameters","Mappers.SqlStoredProcedureListResult","Mappers.SqlStoredProcedureGetResults","Parameters.storedProcedureName","Parameters.createUpdateSqlStoredProcedureParameters","Mappers.SqlResourcesDeleteSqlStoredProcedureHeaders","Mappers.SqlUserDefinedFunctionListResult","Mappers.SqlUserDefinedFunctionGetResults","Parameters.userDefinedFunctionName","Parameters.createUpdateSqlUserDefinedFunctionParameters","Mappers.SqlResourcesDeleteSqlUserDefinedFunctionHeaders","Mappers.SqlTriggerListResult","Mappers.SqlTriggerGetResults","Parameters.triggerName","Parameters.createUpdateSqlTriggerParameters","Mappers.SqlResourcesDeleteSqlTriggerHeaders","Mappers.SqlRoleDefinitionGetResults","Parameters.roleDefinitionId","Parameters.createUpdateSqlRoleDefinitionParameters","Mappers.SqlRoleDefinitionListResult","Mappers.SqlRoleAssignmentGetResults","Parameters.roleAssignmentId","Parameters.createUpdateSqlRoleAssignmentParameters","Mappers.SqlRoleAssignmentListResult","Mappers.BackupInformation","Parameters.location","Mappers.MongoDBDatabaseListResult","Mappers.MongoDBDatabaseGetResults","Parameters.createUpdateMongoDBDatabaseParameters","Mappers.MongoDBResourcesDeleteMongoDBDatabaseHeaders","Mappers.MongoDBCollectionListResult","Mappers.MongoDBCollectionGetResults","Parameters.collectionName","Parameters.createUpdateMongoDBCollectionParameters","Mappers.MongoDBResourcesDeleteMongoDBCollectionHeaders","Mappers.MongoRoleDefinitionGetResults","Parameters.mongoRoleDefinitionId","Parameters.createUpdateMongoRoleDefinitionParameters","Mappers.MongoRoleDefinitionListResult","Mappers.MongoUserDefinitionGetResults","Parameters.mongoUserDefinitionId","Parameters.createUpdateMongoUserDefinitionParameters","Mappers.MongoUserDefinitionListResult","Mappers.TableListResult","Mappers.TableGetResults","Parameters.tableName","Parameters.createUpdateTableParameters","Mappers.TableResourcesDeleteTableHeaders","Mappers.CassandraKeyspaceListResult","Mappers.CassandraKeyspaceGetResults","Parameters.keyspaceName","Parameters.createUpdateCassandraKeyspaceParameters","Mappers.CassandraResourcesDeleteCassandraKeyspaceHeaders","Mappers.CassandraTableListResult","Mappers.CassandraTableGetResults","Parameters.createUpdateCassandraTableParameters","Mappers.CassandraResourcesDeleteCassandraTableHeaders","Mappers.GremlinDatabaseListResult","Mappers.GremlinDatabaseGetResults","Parameters.createUpdateGremlinDatabaseParameters","Mappers.GremlinResourcesDeleteGremlinDatabaseHeaders","Mappers.GremlinGraphListResult","Mappers.GremlinGraphGetResults","Parameters.graphName","Parameters.createUpdateGremlinGraphParameters","Mappers.GremlinResourcesDeleteGremlinGraphHeaders","Mappers.LocationListResult","Mappers.LocationGetResult","Parameters.location1","createUpdateOperationSpec","startOperationSpec","Mappers.ListClusters","Mappers.ClusterResource","Parameters.clusterName","Parameters.body","Mappers.CommandOutput","Parameters.body1","Mappers.CassandraClusterPublicStatus","Mappers.ListDataCenters","Mappers.DataCenterResource","Parameters.dataCenterName","Parameters.body2","listByDatabaseAccountOperationSpec","Mappers.NotebookWorkspaceListResult","Mappers.NotebookWorkspace","Parameters.notebookWorkspaceName","Parameters.notebookCreateUpdateParameters","Mappers.NotebookWorkspaceConnectionInfoResult","Mappers.PrivateEndpointConnectionListResult","Mappers.PrivateEndpointConnection","Parameters.privateEndpointConnectionName","Parameters.parameters","Mappers.PrivateLinkResourceListResult","Mappers.PrivateLinkResource","Parameters.groupName","Mappers.RestorableDatabaseAccountsListResult","Mappers.RestorableDatabaseAccountGetResult","Parameters.instanceId","Mappers.RestorableSqlDatabasesListResult","Mappers.RestorableSqlContainersListResult","Parameters.restorableSqlDatabaseRid","Parameters.startTime","Parameters.endTime","Mappers.RestorableSqlResourcesListResult","Parameters.restoreLocation","Parameters.restoreTimestampInUtc","Mappers.RestorableMongodbDatabasesListResult","Mappers.RestorableMongodbCollectionsListResult","Parameters.restorableMongodbDatabaseRid","Mappers.RestorableMongodbResourcesListResult","Mappers.RestorableGremlinDatabasesListResult","Mappers.RestorableGremlinGraphsListResult","Parameters.restorableGremlinDatabaseRid","Mappers.RestorableGremlinResourcesListResult","Mappers.RestorableTablesListResult","Mappers.RestorableTableResourcesListResult","Mappers.ServiceResourceListResult","Mappers.ServiceResource","Parameters.createUpdateParameters1","Parameters.serviceName","coreRestPipeline"],"mappings":"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"}